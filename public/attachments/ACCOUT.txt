<?php

namespace frontend\controllers;

use Yii;
use yii\helpers\Url;
use common\models\User;
use yii\data\ActiveDataProvider;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use yii\web\UploadedFile;
use common\models\WorkingDay;
use frontend\models\ContactForm;
use common\models\CommentFile;
use common\models\Post;
use common\models\PostFile;
use common\models\TrakingTime;
use common\models\Priority;
use common\models\Service;
use common\models\ProjectUser;
use common\models\Assets;
use common\models\ProjectService;
use common\models\Project;
use common\models\Currency;
use common\models\TemplateTask;
use common\models\Comment;
use common\models\ProjectMonthlyService;
use common\models\Agency;
use common\models\CompanyContact;
use common\models\Task;
use common\models\TaskUser;
use common\models\AssetsFile;
use common\models\Category;
use common\models\ProjectCategory;
use common\models\ActivityLogs; 
use common\models\Notifications; 
use DateTime;
use common\models\UserDevice;
use common\models\Expense;

/**
 * AccountsController implements the CRUD actions for User model.
 */
class AccountsController extends Controller
{

	function init() {
		parent::init();

		// Magic
		session_write_close();
	}

    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }
	
	public function beforeAction($action)
	{		
		$this->enableCsrfValidation = false;
		// your custom code here, if you want the code to run before action filters,
		// which are triggered on the [[EVENT_BEFORE_ACTION]] event, e.g. PageCache or AccessControl

		if (!parent::beforeAction($action)) {
			return false;
		}

		if(\Yii::$app->user->getId()){ 
			return true;
		}else{  
		  $this->redirect(['site/login']);
			return false;
		}
		
		 return true;
	}
	
	public function actionOneofftasks( $id, $name=null ){
		$sortable=1;
		$where = array();
		$data_search="";
		$status="";
		$search="";
		$startdate="";
		$enddate="";
		$typecheckbox =[];

		$project_services_tasks_joins = array();
		$project_services_tasks_joins['project'] = 'project';

		$userid=\Yii::$app->user->getId();
		$currentuser = User::findOne($userid);
		$traking_task = TrakingTime::find()->where('duration = 0')->andWhere('task_id!=0')->andWhere(['user_id'=>$userid])->one();
		if($currentuser->deleted > 0){ Yii::$app->user->logout(); return $this->redirect(['site/login']); } 
		if(isset($_GET['notification_id'])){ 
			$notification_id = $_GET['notification_id'];
			$notification = Notifications::find()->where(['id'=>$notification_id])->one();
			if(!empty($notification)){
				$notification->read =1;
				$notification->save(false);
			}
		}
		
		if (!empty($_GET['date_search'])  ) {
			$data_search = $_GET['date_search'];
			$sortable=0;
			$daterangearray = explode('-', $data_search);
			$startdate=date("Y,m,d", strtotime($daterangearray[0]));
			$enddate=date("Y,m,d", strtotime($daterangearray[1]));
			
		}
			if (isset($_GET['assigncheckbox']) && !empty($_GET['assigncheckbox'])  ) {
				$sortable=0;
				$arrayassign = $_GET['assigncheckbox'];
				$str = implode (", ", $_GET['assigncheckbox']);
				if (!empty($str)) {
					$where[] = 'project_user.user_id IN ('.$str.')';
					$project_services_tasks['project.projectuser'] = 'project.projectuser';
				}
			}
			if (isset($_GET['selectstatus']) && !empty($_GET['selectstatus']) && $_GET['selectstatus']!="Status"   ) {
				$sortable=0;
				$status = $_GET['selectstatus'];
				/*
					$where[] = 'task.status = '.$status.'';
					$project_services_tasks['task'] = 'task';
				*/
			}
			
			if (isset($_GET['search']) && !empty($_GET['search'])) {
				$sortable=0;
				$search = $_GET['search'];
				/*
					$where[] = 'assets.title LIKE "%'.$search.'%"';
					$project_services_tasks['assets'] = 'assets';
				*/
			}
			
			if (isset($_GET['typecheckbox']) && !empty($_GET['typecheckbox'])  ) {
				
					$typecheckbox = $_GET['typecheckbox'];
					//print_r($arrayassign); die();
					$str = implode (", ", $_GET['typecheckbox']);

					if (!empty($str)) {
						$where[] = '(project_service.service_id IN ('.$str.'))';
					}
			}

		$project_users =  ProjectUser::find()->joinWith(['user'])->where(['project_user.project_id'=>$id])->andWhere(['project_user.status'=>1])->andWhere(['user.deleted'=>0])->andWhere(['user.active'=>1])->all();
		//$project_services =  ProjectService::find()->joinWith(['service'])->where(['project_service.project_id'=>$id])->andWhere(['project_service.type'=>0])->all();
		$project_services =  ProjectService::find()
			->with(['service'])
			->where(['project_service.project_id'=>$id])
			->andWhere(['project_service.type'=>0])
			->all();

		$where = !empty($where) ? implode(' AND ', $where) : '';

		$project =  Project::find()->where(['id'=>$id])->one();
		$priorities = Priority::find()->all();
		$allservices = Service::find()->where(['type'=>0])->orderBy(['service.popuporders'=> SORT_ASC])->all();
		$project_user = ProjectUser::find()->where(['project_id'=>$id])->andWhere(['user_id'=>$userid])->one();
		//$project_services_tasks = ProjectService::find()->joinWith(['service','project','project.projectuser','task','task.priority'])->where($where)->andWhere(['project_service.type'=>0])->andWhere(['project.id'=>$id])->orderBy(['project_service.id'=> SORT_DESC])->all();
		$project_services_tasks = ProjectService::find()
			->joinWith(array_values($project_services_tasks_joins), true, 'INNER JOIN')
			->with(['service'])
			->where($where)
			->andWhere(['project_service.type'=>0])
			->andWhere(['project.id'=>$id])
			->orderBy(['project_service.id'=> SORT_DESC])
			->all();
			
 		$arraydataservices = array();
		foreach($project_services as $project_service){
			array_push($arraydataservices, $project_service->service_id);
		}
		//$services = Service::find()->all();
		return $this->render('oneofftask', ['project'=>$project,'project_users'=>$project_users,'project_services'=>$project_services,'priorities'=>$priorities,
		'project_services_tasks'=>$project_services_tasks,'data_search'=>$data_search,'status'=>$status,'search'=>$search,'typecheckbox'=>$typecheckbox,
		'sortable'=>$sortable,'startdate'=>$startdate,'enddate'=>$enddate,'currentuser'=>$currentuser,'allservices'=>$allservices,
		'arraydataservices'=>$arraydataservices, 'traking_task'=> $traking_task, 'project_user'=> $project_user ]); 

	}
	public function actionOneofflists( $id, $name=null ){
		
		$sortable=1;
		$where = array();
		$data_search="";
		$status="";
		$search="";
		$startdate="";
		$enddate="";
		$typecheckbox =[];

		$project_services_tasks_joins = array();
		$project_services_tasks_joins['project'] = 'project';

		$userid=\Yii::$app->user->getId();
		$currentuser = User::findOne($userid);
		$traking_task = TrakingTime::find()->where('duration = 0')->andWhere('task_id!=0')->andWhere(['user_id'=>$userid])->one();
		if($currentuser->deleted > 0){ Yii::$app->user->logout(); return $this->redirect(['site/login']); } 
		if(isset($_GET['notification_id'])){ 
			$notification_id = $_GET['notification_id'];
			$notification = Notifications::find()->where(['id'=>$notification_id])->one();
			if(!empty($notification)){
				$notification->read =1;
				$notification->save(false);
			}
		}
		
		if (!empty($_GET['date_search'])  ) {
			$data_search = $_GET['date_search'];
			$sortable=0;
			$daterangearray = explode('-', $data_search);
			$startdate=date("Y,m,d", strtotime($daterangearray[0]));
			$enddate=date("Y,m,d", strtotime($daterangearray[1]));
			
		}
			if (isset($_GET['assigncheckbox']) && !empty($_GET['assigncheckbox'])  ) {
				$sortable=0;
				$arrayassign = $_GET['assigncheckbox'];
				$str = implode (", ", $_GET['assigncheckbox']);
				if (!empty($str)) {
					$where[] = 'project_user.user_id IN ('.$str.')';
					$project_services_tasks['project.projectuser'] = 'project.projectuser';
				}
			}
			if (isset($_GET['selectstatus']) && !empty($_GET['selectstatus']) && $_GET['selectstatus']!="Status"   ) {
				$sortable=0;
				$status = $_GET['selectstatus'];
				/*
					$where[] = 'task.status = '.$status.'';
					$project_services_tasks['task'] = 'task';
				*/
			}
			
			if (isset($_GET['search']) && !empty($_GET['search'])) {
				$sortable=0;
				$search = $_GET['search'];
				/*
					$where[] = 'assets.title LIKE "%'.$search.'%"';
					$project_services_tasks['assets'] = 'assets';
				*/
			}
			
			if (isset($_GET['typecheckbox']) && !empty($_GET['typecheckbox'])  ) {
				
					$typecheckbox = $_GET['typecheckbox'];
					//print_r($arrayassign); die();
					$str = implode (", ", $_GET['typecheckbox']);

					if (!empty($str)) {
						$where[] = '(project_service.service_id IN ('.$str.'))';
					}
			}

		$project_users =  ProjectUser::find()->joinWith(['user'])->where(['project_user.project_id'=>$id])->andWhere(['project_user.status'=>1])->andWhere(['user.deleted'=>0])->andWhere(['user.active'=>1])->all();
		//$project_services =  ProjectService::find()->joinWith(['service'])->where(['project_service.project_id'=>$id])->andWhere(['project_service.type'=>0])->all();
		$project_services =  ProjectService::find()
			->with(['service'])
			->where(['project_service.project_id'=>$id])
			->andWhere(['project_service.type'=>0])
			->all();

		$where = !empty($where) ? implode(' AND ', $where) : '';

		$project =  Project::find()->where(['id'=>$id])->one();
		$priorities = Priority::find()->all();
		$allservices = Service::find()->where(['type'=>0])->orderBy(['service.popuporders'=> SORT_ASC])->all();
		$project_user = ProjectUser::find()->where(['project_id'=>$id])->andWhere(['user_id'=>$userid])->one();
		//$project_services_tasks = ProjectService::find()->joinWith(['service','project','project.projectuser','task','task.priority'])->where($where)->andWhere(['project_service.type'=>0])->andWhere(['project.id'=>$id])->orderBy(['project_service.id'=> SORT_DESC])->all();
		$project_services_tasks = ProjectService::find()
			->joinWith(array_values($project_services_tasks_joins), true, 'INNER JOIN')
			->with(['service'])
			->where($where)
			->andWhere(['project_service.type'=>0])
			->andWhere(['project.id'=>$id])
			->orderBy(['project_service.id'=> SORT_DESC])
			->all();
			
 		$arraydataservices = array();
		foreach($project_services as $project_service){
			array_push($arraydataservices, $project_service->service_id);
		}
	
		//$services = Service::find()->all();
		return $this->render('oneofflist', ['project'=>$project,'project_users'=>$project_users,'project_services'=>$project_services,'priorities'=>$priorities,
		'project_services_tasks'=>$project_services_tasks,'data_search'=>$data_search,'status'=>$status,'search'=>$search,'typecheckbox'=>$typecheckbox,
		'sortable'=>$sortable,'startdate'=>$startdate,'enddate'=>$enddate,'currentuser'=>$currentuser,'allservices'=>$allservices,
		'arraydataservices'=>$arraydataservices, 'traking_task'=> $traking_task, 'project_user'=> $project_user ]); 

	}
	public function actionChangestage() {
 	  \Yii::$app->response->format = 'json';
	  $userid = \Yii::$app->user->getId();
	  $arrids = array();
	  $arrid = array();		
	  $service_id = $_POST["service_id"];
	  $task_id = $_POST["task_id"];
	  $task = ProjectService::find()->andWhere(['project_service.id'=>$service_id])->one();
	  $oldenddate = $task->current_stage;
	  if(!empty($task)){
		  
			$task->current_stage = $task_id;
		  
		if($task->save(false)){
			
			$result=[
				'status' => "success",
				'listdata' => 'done',
			];
			return $result;
		}else{
			$result=[
				'status' => "error",
				'listdata' => $arrids,
			];
			return $result;
		}
	  }else{
		$result=[
			'status' => "error",
			'listdata' => $arrids,
		];
		return $result;
	  }

	}
	
	public function actionContentprocess($id){
		$sortable=1;
		$where="";
		$data_search="";
		$status="";
		$search="";
		$startdate="";
		$enddate="";
		$typecheckbox =[];
		$userid=\Yii::$app->user->getId();
		$currentuser = User::findOne($userid);
		if($currentuser->deleted > 0){ Yii::$app->user->logout(); return $this->redirect(['site/login']); }
		if (!empty($_GET['date_search'])  ) {
			$data_search = $_GET['date_search'];
			$sortable=0;
			$daterangearray = explode('-', $data_search);
			$startdate=date("Y,m,d", strtotime($daterangearray[0]));
			$enddate=date("Y,m,d", strtotime($daterangearray[1]));
	
		}
			if (isset($_GET['assigncheckbox']) && !empty($_GET['assigncheckbox'])  ) {
				$sortable=0;
				$arrayassign = $_GET['assigncheckbox'];
				$str = implode (", ", $_GET['assigncheckbox']);
				if (!empty($str)) {
					if(!empty($where)){
						$where .= ' AND assets.user_id IN ('.$str.')';
					}else{
						$where .= 'assets.user_id IN ('.$str.')';
					}
				}
			}
			if (isset($_GET['selectstatus']) && !empty($_GET['selectstatus']) && $_GET['selectstatus']!="Status"   ) {
				$sortable=0;
				$status = $_GET['selectstatus'];
				/*if(!empty($where)){
					$where .= ' AND task.status = '.$status.'';
				}else{
					$where .= 'task.status = '.$status.'';
				}*/
			}
			
			if (isset($_GET['search']) && !empty($_GET['search'])) {
				$sortable=0;
				$search = $_GET['search'];
				/*if(!empty($where)){
					$where .= ' AND assets.title LIKE "%'.$search.'%"';
				}else{
					$where .= 'assets.title LIKE "%'.$search.'%"';
				}*/
			}
			
			if (isset($_GET['typecheckbox']) && !empty($_GET['typecheckbox'])  ) {
				$typecheckbox = $_GET['typecheckbox'];
				//print_r($arrayassign); die();
				$str = implode (", ", $_GET['typecheckbox']);

				if (!empty($str)) {
					if(!empty($where)){
						$where .= ' AND (project_service.service_id IN ('.$str.'))';
					}else{
						$where .= '(project_service.service_id IN ('.$str.'))';
					}
				}
			}
			
		$project_users =  ProjectUser::find()->joinWith(['user'])->where(['project_user.project_id'=>$id])->andWhere(['project_user.status'=>1])->andWhere(['user.deleted'=>0])->andWhere(['user.active'=>1])->all();
		$project_services =  ProjectService::find()->joinWith(['service'])->where(['project_service.project_id'=>$id])->andWhere(['project_service.type'=>1])->all();
		$project =  Project::find()->where(['id'=>$id])->one();
		$priorities = Priority::find()->all();
		
	/*	$project_services_tasks = ProjectService::find()->joinWith(['service','project','project.projectuser','task','projectmonthlyservice'])->where($where)->andWhere(['project_service.type'=>1])->andWhere(['project.id'=>$id])->all();*/

		
		//$project_monthly_services = ProjectMonthlyService::find()->joinWith(['projectservice','projectservice.service'])->andWhere(['project_service.project_id'=>$id])->andWhere(['service.have_process_calendar'=>1])->groupBy(['project_monthly_service.month'])->all();
		$project_monthly_services = ProjectMonthlyService::find()->joinWith(['projectservice','projectservice.service','projectservice.project','projectservice.project.projectuser','projectservice.task'])->where($where)->andWhere(['service.have_process_calendar'=>1])->andWhere(['project_service.project_id'=>$id])->groupBy(['project_monthly_service.month','project_monthly_service.year'])->all();
		
		
		
		$services = Service::find()->where(['type'=>1])->andWhere(['have_process_calendar'=>1])->orderBy(['service.popuporders'=> SORT_ASC])->all();
		return $this->render('contentprocess', ['project'=>$project,'project_users'=>$project_users,'project_services'=>$project_services,'priorities'=>$priorities,'data_search'=>$data_search,'status'=>$status,'search'=>$search,'typecheckbox'=>$typecheckbox,'sortable'=>$sortable,'startdate'=>$startdate,'enddate'=>$enddate,'currentuser'=>$currentuser,'services'=>$services,'project_monthly_services'=>$project_monthly_services,'where'=>$where]); 
	}
	
	public function actionDeletetime()
	{
		$trakingtime_id = $_POST["trakingtime_id"];
		$trakingtime =TrakingTime::find()->where(['id' => $trakingtime_id])->one();
		if(!empty($trakingtime)){
			$trakingtime->delete(false);
			return "success";
		}else{
			return "error";
		}

		return "error";
	}
	
		
	public function actionEdittime()
	{
		$trakingtime_id = $_POST["id"];
		$hours = $_POST["hours"];
		$minutes = $_POST["minutes"];
		$trakingtime =TrakingTime::find()->where(['id' => $trakingtime_id])->one();
		if(!empty($trakingtime)){
			$duration = ($hours *60 )+ $minutes;
			$trakingtime->duration = $duration;
			$trakingtime->save(false);
			return "success";
		}else{
			return "error";
		}

		return "error";
	}
	
	
	
	public function actionTimexpense( $id, $name=null){

		$userid= \Yii::$app->user->getId();
		$currentuser = User::findOne($userid);
		if(isset($_GET['notification_id'])){
			$notification_id = $_GET['notification_id'];
			$notification = Notifications::find()->where(['id'=>$notification_id])->one();
			if(!empty($notification)){
				$notification->read =1;
				$notification->save(false);
			}
		}


		$project =  Project::find()->where(['id'=>$id])->one();

		$currencies =  Currency::find()->all();

		$expenses = Expense::find()->joinWith(['currency'])->where(['project_id'=>$project->id])->all();

		// $tasks = Task::find()
		// ->joinWith(['projectservice'], false, 'INNER JOIN')
		// ->andWhere(['project_service.project_id'=>$id])
		// ->column();

		// $time = new TrakingTime;
		// foreach ($tasks as $task){
		// 	$time_records = $time->workingtimeononetaskbyuser($task,$userid);
		// }

		$users = User::find()->where('role_id =1 OR role_id =2')->andWhere('can_tag_crm = 1')->orderBy(['user.first_name'=> SORT_ASC])->all();
		$project_service_ids =  ProjectService::find()
		->select('service_id')
		->where(['project_id'=>$id])
		->all();

		$service_ids = [];
		foreach($project_service_ids as $id){
			array_push($service_ids, $id->service_id);
		}

		$alltasks = Task::find()
		->joinWith(['taskuser', 'projectservice'], false, 'INNER JOIN')
		->with(['priority', 'trakingtime'])
		->andWhere(['in', 'project_service_id', $service_ids])
		->groupBy(['task.id'])
		->all();

		$company = CompanyContact::find()->where(['type'=>'supplier'])->all();

		return $this->render('timexpense', ['alltasks' => $alltasks, 'currencies' => $currencies ,'project'=>$project,'currentuser'=>$currentuser, 'expenses'=> $expenses, 'users' => $users,'company'=>$company]);

	}
	
	
	public function actionMonthlytasks( $id, $name=null){
 		$sortable=1;
		$where="";
		$data_search="";
		$status="";
		$search="";
		$startdate="";
		$enddate="";
		$typecheckbox =[];
		$userid=\Yii::$app->user->getId();
		$currentuser = User::findOne($userid);
		$project =  Project::find()->where(['id'=>$id])->one();
 		if(isset($_GET['notification_id'])){ 
			$notification_id = $_GET['notification_id'];
			$notification = Notifications::find()->where(['id'=>$notification_id])->one();
			if(!empty($notification)){
				$notification->read =1;
				$notification->save(false);
			}
		}
		if (!empty($_GET['date_search'])  ) {
			$data_search = $_GET['date_search'];
			$sortable=0;
			$daterangearray = explode('-', $data_search);
			$startdate=date("Y,m,d", strtotime($daterangearray[0]));
			$enddate=date("Y,m,d", strtotime($daterangearray[1]));
	
		}
			if (isset($_GET['assigncheckbox']) && !empty($_GET['assigncheckbox'])  ) {
				$sortable=0;
				$arrayassign = $_GET['assigncheckbox'];
				$str = implode (", ", $_GET['assigncheckbox']);
				if (!empty($str)) {
					if(!empty($where)){
						$where .= ' AND assets.user_id IN ('.$str.')';
					}else{
						$where .= 'assets.user_id IN ('.$str.')';
					}
				}
			}
			if (isset($_GET['selectstatus']) && !empty($_GET['selectstatus']) && $_GET['selectstatus']!="Status"   ) {
				$sortable=0;
				$status = $_GET['selectstatus'];
				/*if(!empty($where)){
					$where .= ' AND task.status = '.$status.'';
				}else{
					$where .= 'task.status = '.$status.'';
				}*/
			}
			
			if (isset($_GET['search']) && !empty($_GET['search'])) {
				$sortable=0;
				$search = $_GET['search'];
				/*if(!empty($where)){
					$where .= ' AND assets.title LIKE "%'.$search.'%"';
				}else{
					$where .= 'assets.title LIKE "%'.$search.'%"';
				}*/
			}
			
			if (isset($_GET['typecheckbox']) && !empty($_GET['typecheckbox'])  ) {
				$typecheckbox = $_GET['typecheckbox'];
				//print_r($arrayassign); die();
				$str = implode (", ", $_GET['typecheckbox']);

				if (!empty($str)) {
					if(!empty($where)){
						$where .= ' AND (project_service.service_id IN ('.$str.'))';
					}else{
						$where .= '(project_service.service_id IN ('.$str.'))';
					}
				}
			}

			$project_users =  ProjectUser::find()
				->joinWith(['user'], true, 'INNER JOIN')
				->where(['project_user.project_id'=>$id])
				->andWhere(['project_user.status'=>1])
				->andWhere(['user.deleted'=>0])
				->andWhere(['user.active'=>1])
				->all();

			$project_service_ids =  ProjectService::find()
			->select('service_id')
			->where(['project_id'=>$id])
			->all();

			$service_ids = [];
			foreach($project_service_ids as $id){
				array_push($service_ids, $id->service_id);
			}

			$alltasks = Task::find()
			->joinWith(['taskuser'], false, 'INNER JOIN')
			->with(['priority'])
			->andWhere(['task.level'=>1])
			->andWhere(['in', 'project_service_id', $service_ids])
			->groupBy(['task.id'])
			->all();

			// $times = TrakingTime::find()
			// ->joinWith(['user', 'task'] ,false, 'INNER JOIN')
			// ->where(['task.level'=>1])
			// ->all();


		$project_services =  ProjectService::find()->where(['project_service.project_id'=>$id])->andWhere(['project_service.type'=>1])->orderBy(['project_service.id'=> SORT_DESC])->all();
		
		$priorities = Priority::find()->all();
	/*	$project_services_tasks = ProjectService::find()->joinWith(['service','project','project.projectuser','task','projectmonthlyservice'])->where($where)->andWhere(['project_service.type'=>1])->andWhere(['project.id'=>$id])->all();*/
 		$services = Service::find()->where(['type'=>1])->orderBy(['service.popuporders'=> SORT_ASC])->all();
		
		return $this->render('monthlytask', ['alltasks'=>$alltasks, 'project'=>$project,'project_users'=>$project_users,'project_services'=>$project_services,'priorities'=>$priorities,
		'data_search'=>$data_search,'status'=>$status,'search'=>$search,'typecheckbox'=>$typecheckbox,'sortable'=>$sortable,'startdate'=>$startdate,
		'enddate'=>$enddate,'currentuser'=>$currentuser,'services'=>$services, 'where'=>$where,
		]); 
 	}
	public function actionMonthlylists($id, $name=null){
		
		$sortable=1;
	 $where="";
	 $data_search="";
	 $status="";
	 $search="";
	 $startdate="";
	 $enddate="";
	 $typecheckbox =[];
	 $userid=\Yii::$app->user->getId();
	 $project =  Project::findone($id);
	 $currentuser = User::findOne($userid);
		if(isset($_GET['notification_id'])){ 
		 $notification_id = $_GET['notification_id'];
		 $notification = Notifications::find()->where(['id'=>$notification_id])->one();
		 if(!empty($notification)){
			 $notification->read =1;
			 $notification->save(false);
		 }
	 }
	 if (!empty($_GET['date_search'])  ) {
		 $data_search = $_GET['date_search'];
		 $sortable=0;
		 $daterangearray = explode('-', $data_search);
		 $startdate=date("Y,m,d", strtotime($daterangearray[0]));
		 $enddate=date("Y,m,d", strtotime($daterangearray[1]));
 
	 }
		 if (isset($_GET['assigncheckbox']) && !empty($_GET['assigncheckbox'])  ) {
			 $sortable=0;
			 $arrayassign = $_GET['assigncheckbox'];
			 $str = implode (", ", $_GET['assigncheckbox']);
			 if (!empty($str)) {
				 if(!empty($where)){
					 $where .= ' AND assets.user_id IN ('.$str.')';
				 }else{
					 $where .= 'assets.user_id IN ('.$str.')';
				 }
			 }
		 }
		 if (isset($_GET['selectstatus']) && !empty($_GET['selectstatus']) && $_GET['selectstatus']!="Status"   ) {
			 $sortable=0;
			 $status = $_GET['selectstatus'];
			 /*if(!empty($where)){
				 $where .= ' AND task.status = '.$status.'';
			 }else{
				 $where .= 'task.status = '.$status.'';
			 }*/
		 }
		 
		 if (isset($_GET['search']) && !empty($_GET['search'])) {
			 $sortable=0;
			 $search = $_GET['search'];
			 /*if(!empty($where)){
				 $where .= ' AND assets.title LIKE "%'.$search.'%"';
			 }else{
				 $where .= 'assets.title LIKE "%'.$search.'%"';
			 }*/
		 }
		 
		 if (isset($_GET['typecheckbox']) && !empty($_GET['typecheckbox'])  ) {
			 $typecheckbox = $_GET['typecheckbox'];
			 //print_r($arrayassign); die();
			 $str = implode (", ", $_GET['typecheckbox']);

			 if (!empty($str)) {
				 if(!empty($where)){
					 $where .= ' AND (project_service.service_id IN ('.$str.'))';
				 }else{
					 $where .= '(project_service.service_id IN ('.$str.'))';
				 }
			 }
		 }

		 $project_users =  ProjectUser::find()
			 ->joinWith(['user'], true, 'INNER JOIN')
			 ->where(['project_user.project_id'=>$id])
			 ->andWhere(['project_user.status'=>1])
			 ->andWhere(['user.deleted'=>0])
			 ->andWhere(['user.active'=>1])
			 ->all();

		 $project_service_ids =  ProjectService::find()
		 ->select('service_id')
		 ->where(['project_id'=>$id])
		 ->all();

		 $service_ids = [];
		 foreach($project_service_ids as $id){
			 array_push($service_ids, $id->service_id);
		 }

		 $alltasks = Task::find()
		 ->joinWith(['taskuser'], false, 'INNER JOIN')
		 ->with(['priority'])
		 ->andWhere(['task.level'=>1])
		 ->andWhere(['in', 'project_service_id', $service_ids])
		 ->groupBy(['task.id'])
		 ->all();


	 $project_services =  ProjectService::find()->where(['project_service.project_id'=>$id])->andWhere(['project_service.type'=>1])->orderBy(['project_service.id'=> SORT_DESC])->all();
	 
	 $priorities = Priority::find()->all();
 /*	$project_services_tasks = ProjectService::find()->joinWith(['service','project','project.projectuser','task','projectmonthlyservice'])->where($where)->andWhere(['project_service.type'=>1])->andWhere(['project.id'=>$id])->all();*/
		$services = Service::find()->where(['type'=>1])->orderBy(['service.popuporders'=> SORT_ASC])->all();
		return $this->render('monthlylist', ['alltasks'=>$alltasks, 'project'=>$project,'project_users'=>$project_users,'project_services'=>$project_services,'priorities'=>$priorities,
	 'data_search'=>$data_search,'status'=>$status,'search'=>$search,'typecheckbox'=>$typecheckbox,'sortable'=>$sortable,'startdate'=>$startdate,
	 'enddate'=>$enddate,'currentuser'=>$currentuser,'services'=>$services, 'where'=>$where,
	 ]); 
	}
	

	public function actionAllservices(){
	$html ='';
	$userid=\Yii::$app->user->getId();
	$currentuser = User::findOne($userid);
	$id= $_REQUEST['id'];
 	$project_monthly_services = ProjectMonthlyService::find()
		->joinWith(['projectservice'], true, 'INNER JOIN')
		->Where(['project_monthly_service.is_archived'=>0 ])
		->andWhere(['project_service.project_id'=>$id])
		->groupBy(['project_monthly_service.month','project_monthly_service.year'])
		->orderBy([ 'project_monthly_service.year'=>SORT_DESC,'project_monthly_service.month' => SORT_DESC])
		->all();

		if (!empty($project_monthly_services)) {
			foreach ($project_monthly_services as $project_monthly_service) {
//				$currentmonth = date('m');
//				$uparrowmonth = "";
//				$hiddenmonth = "";
//				$bgmonth = "";

				$allproject_monthly_services = ProjectService::allprojectmonthlyservices($project_monthly_service->month, $project_monthly_service->year, $id);

				$html .= '<div class="panel-group panel-group' . $project_monthly_service->id . ' ">';
				$html .= '<div class="panel panel-default monthlypanel' . $project_monthly_service->id . '" >';
				$html .= '<div class="panel-heading formonths forfirstmonth" >';
				$monthNum = $project_monthly_service->month;
				$dateObj = DateTime::createFromFormat('!m', $monthNum);
				$monthName = $dateObj->format('F'); // March 
				$color = '';
				$img = '';
				$down = '';
				$up = '';
				switch ($monthNum) {
					case 1:
						$color = '#F90D78';
						$img = 'pink-archive.svg';
						$down = 'down-pink.svg';
						$up = 'up-pink.svg';
						break;
					case 2:
						$color = '#2196FF';
						$img = 'blue-archive.svg';
						$down = 'down-blue.svg';
						$up = 'up-blue.svg';
						break;
					case 3:
						$color = '#17CB6C';
						$img = 'green-archive.svg';
						$down = 'down-green.svg';
						break;
					case 4:
						$color = '#F90D78';
						$img = 'pink-archive.svg';
						$down = 'down-pink.svg';
						$up = 'up-pink.svg';
						break;
					case 5:
						$color = '#2196FF';
						$img = 'blue-archive.svg';
						$down = 'down-blue.svg';
						break;
					case 6:
						$color = '#17CB6C';
						$img = 'green-archive.svg';
						$down = 'down-green.svg';
						break;
					case 7:
						$color = '#F90D78';
						$img = 'pink-archive.svg';
						$down = 'down-pink.svg';
						$up = 'up-pink.svg';
						break;
					case 8:
						$color = '#2196FF';
						$img = 'blue-archive.svg';
						$down = 'down-blue.svg';
						break;
					case 9:
						$color = '#17CB6C';
						$img = 'green-archive.svg';
						$down = 'down-green.svg';
						break;
					case 10:
						$color = '#F90D78';
						$img = 'pink-archive.svg';
						$down = 'down-pink.svg';
						$up = 'up-pink.svg';
						break;
					case 11:
						$color = '#2196FF';
						$img = 'blue-archive.svg';
						$down = 'down-blue.svg';
						break;
					case 12:
						$color = '#17CB6C';
						$img = 'green-archive.svg';
						$down = 'down-green.svg';
						break;  
				}
				$html .= '<h4 class="panel-title panelmonthly" data_monthly_id="' . $project_monthly_service->id . '">';
				$html .= '<a href="javascript://" style="color:' . $color . '" class="showingmonth" > ' . $monthName . ' ' . $project_monthly_service->year . ' </a>';
				if ($currentuser->role_id == 1 || $currentuser->role_id == 2) {
					$html .= '<div class="archive_monthly" data_project_monthly_service="' . $project_monthly_service->id . '" style="color: ' . $color . '">';
					$html .= '<img class="iconfolder" src="' . Url::base(true) . '/images/icons/' . $img . '">Move to archive';
					$html .= '</div>';
				}
				$html .= '</h4>';
				$html .= '</div>';
				$html .= '<div id="collapse' . $project_monthly_service->id . '">';

				$html .= '<div class="panel-body">';
				foreach ($allproject_monthly_services as $allproject_monthly_service) {
					if (!empty($allproject_monthly_service->projectservice)) {
						$project_services_task = $allproject_monthly_service->projectservice;
						$hiddenclass = "hidden";
						$uparrowclass = "";

						$html .= '<div class="panel panel-default panel' . $allproject_monthly_service->id . ' ">';
						$html .= '<div class="panel-heading tasks' . $project_monthly_service->id . $project_services_task->id . ' clicktoshowtasks " data_service_id="' . $project_services_task->id . '" data_allproject_monthly_service="' . $allproject_monthly_service->id . '"  data_monthly_service_id="' . $project_monthly_service->id . '">';
						$html .= '<h4 class="panel-title servicespanel" data_service_id="' . $project_services_task->id . '" data_monthly_service_id="' . $allproject_monthly_service->id . '">';
						$html .= '<a href="javascript://" class="aflag">';
						$html .= '<img class="iconservice" src="' . Url::base(true) . '/images/icons/' . $down . '">';
						$html .= $project_services_task->service->name;
						$html .= '</a>';
						$html .= '<a href="javascrpt://" class="delete_service"  data_project_service_id="' . $project_services_task->id . '" data_project_monthly_service="' . $allproject_monthly_service->id . '"></a>';
						$html .= '</h4>';
						$html .= '</div>';

					}
					$html .= '</div>';
				}
				$html .= '</div>';
				$html .= '</div>';
				$html .= '</div>';
				$html .= '</div>';

			}
		}
		$results=[
		'issuccess'=> 'success',
		'html'=> $html];
		echo json_encode($results);
        exit();
		
	}	
	
	public function actionAlltasks(){
		$data_service_id = $_POST['data_service_id'];
		$id = $_POST['project_id'];
		$data_monthly_service_id= $_POST['data_monthly_service_id'];
		$data_allproject_monthly_service= $_POST['data_allproject_monthly_service'];
		$userid=\Yii::$app->user->getId();
		$currentuser = User::findOne($userid);
		$project_services_task = ProjectService::find()->joinWith(['service'])->where(['project_service.id'=> $data_service_id ])->one();
		//$parenttask = Task::parentMonthlyTask($data_service_id,$data_monthly_service_id,$data_search,$status,$search); 
		 
		$parenttask = Task::parentMonthlyTask($data_service_id,$data_allproject_monthly_service,null,null,null); 
 		$html ='';
		$project_users =  ProjectUser::find()->joinWith(['user'])->where(['project_user.project_id'=>$id])->andWhere(['project_user.status'=>1])->andWhere(['user.deleted'=>0])->andWhere(['user.active'=>1])->all();
		$priorities = Priority::find()->all(); 
		$html .='<div id="collapse'. $data_monthly_service_id . $data_service_id .'" class="divtocollapse">'; 
		    $html .='<div class="panel-titles titles">'; 
			$html .='<div class="panel-item first-item">Title</div>'; 
			$html .='<div class="panel-item showassignes">Assignees</div>'; 
			$html .='<div class="panel-item for-status">Status</div>	'; 
            $html .='<div class="panel-item for-priority">Priority</div>'; 				
			$html .='<div class="panel-item for-starts">Start</div>'; 
			$html .='<div class="panel-item for-dues">Due</div>'; 
			$html .='<div class="panel-item for-logged">Logged Time</div>'; 
			$html .='<div class="panel-item for-status">Tracking time</div> '; 
			$html .='<div class="panel-item for-action">Action</div>'; 
			$html .='</div>'; $latestorder = 0;
		if($parenttask){ 
			$html .='<div class="panel-body">';
			//$html .='<ol class="default vertical mylist datalevel ol"'. $allproject_monthly_service->id . $project_services_task->id .'" data_servicetask="'. $project_services_task->id .'"   data_level="1" data_monthly_service="'. $allproject_monthly_service->id .'">';
			$html .='<ol class="default vertical mylist datalevel ol"'. $data_monthly_service_id . $data_service_id .'" data_servicetask="'. $data_service_id .'"   data_level="1" data_monthly_service="'. $data_monthly_service_id .'">';
			$generalindex=0;
			foreach($parenttask as $task){ $latestorder = 0;
			if($task->status == 4){ $statusdate="active"; }
			$hiddenfield="";
			if($project_services_task->service->have_process_calendar == 1){ $generalindex++; }
			if($generalindex > 1){ $clickable="notclickable"; $darkgrey="";}else{ $clickable="clickable"; }
			if($project_services_task->service->have_process_calendar == 1 && $clickable="clickable"){ $hiddenfield="hiddenfiled";}else{ $hiddenfield="";}
			if($hiddenfield == "hiddenfiled" ){$darkgrey="parent_class_grey";}else{$darkgrey="";}			
			$html .='<li class="parentitem isparent " data_id="'. $task->id.'" data_servicetask="'. $data_service_id .'"  data_order="'. $task->order .'" data_monthly_service="'.  $data_monthly_service_id .'">';
 			$html .='<div class="task-row '.$darkgrey.'">';
			$latestorder = $task->order;					
			$statusdate="";
			$statusoriginale="";
			date_default_timezone_set('Australia/Sydney');
            $time = new \DateTime('now');
            $today = $time->format('Y-m-d');
			if(!empty($task->due_date)){
				if($today > $task->due_date){
				$statusdate="expired";
				$statusoriginale="expired";}
			}
			

			$html .='<div class="'. $statusdate .' for-title  '.$clickable.' for-title"'. $task->id .'" data_clickable="'. $generalindex .'"  data_id="'. $task->id .'" >'; 
			$html .='<span class="t-title">';
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){ 
			// if($project_services_task->service->have_process_calendar == 0){ 
			//    $html .= '<input type="text" class="edittext"  placeholder="ADD TASK"  value="'. $task->title. '" data_id="'. $task->id .'" />';
			// } else{
			//$html .= '<input type="text" class="edittext"  placeholder="ADD TASK"  value="'. $task->title. '" data_id="'. $task->id .'" />';
			// }
				if($project_services_task->service->have_process_calendar == 1){ 
					$html .= '<input type="text" class="edittext"  placeholder="ADD TASK"  value="'. $task->title. '" data_id="'. $task->id .'" readonly />';
				}else{
					$html .= '<input type="text" class="edittext"  placeholder="ADD TASK"  value="'. $task->title. '" data_id="'. $task->id .'"  />';
				}
			} else {
			$html .= $task->title;
			}
			$html .='</span>';
			$html .='</div>';
			$assignusers  = Task::UserAssignTasks($task->id);
			 
			// show assignees
			
			$html .='<div class="for-assignees showassignes '.$hiddenfield.'">';
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){
									$html .='<div class="filter-block forcalendar">';
									$html .='<select class="selecteduser" multiple="multiple">';
									 	   $html .='<optgroup label="All People">';
										   foreach($project_users as $project_user){
										   $url = (!empty($project_user->user->image))?$project_user->user->image:"default.png";
										   if(in_array($project_user->user->id, $assignusers)){
  										    $html .='<option selected="" selected="" value="'.$project_user->user->id.'" data_task_id="'.$task->id.'" data-img="'.$url.'">'.$project_user->user->first_name .' '. $project_user->user->last_name.'</option>'; 
 										   }else {
										    $html .='<option value="'.$project_user->user->id.'" data_task_id="'.$task->id.'" data-img="'.$url.'">'.$project_user->user->first_name .' '. $project_user->user->last_name.'</option>'; 
										   }
 										   //  $html .='<option value="23" selected="" data_task_id="8498" data-img="1575436383.jpg">Abbas A</option>'; 
										   }
									$html .='</select>'; 
			$html .='</div>';
			} else{
			$html .='<div class="users_assign_imagea">'; 
			$assignusers  = Task::ListUserAssignTasks($task->id);
			foreach($assignusers as $listuser){ 
				$html .='<div class="user_assign_image">';
				$url = (!empty($listuser->user->image))?Url::base(true)."/uploads/users/".$listuser->user->image:Url::base(true)."/uploads/users/default.png";
				$html .='<img class="user_assign_image" src="'. $url .'">';
				$html .='</div>';
			} 
			$html .='</div>';
			} 
			$html .='</div>';
			// end assignees
			// show status
			$html .='<div class="for-status">';
			if($hiddenfield == "hiddenfiled" ){$html .='<div class="overdiv"></div>';}
			$html .='<select class="hidden selectstatus changestatus changestatus'. $task->id .'" data_id="'. $task->id .'" name="changestatus" style="display: none;">';
			$html .='<option data-display="Select" value="">Select</option>';
			$html .='<option value="0">Select</option>';
			$html .='<option value="1">Working on it</option>';
			$html .='<option value="2">Waiting for review</option>';
			$html .='<option value="3">Stuck</option>';
			$html .='<option value="4">Done</option>';
			$html .='</select>';
			$statustxt="Select"; $statucbg="statusselect";
								 if($task->status==0){
									 $statustxt="Select"; $statucbg="statusselect";
								 }else if($task->status==1){
									 $statustxt="Working on it"; $statucbg="workingonit";
								 }else if($task->status==2){
									 $statustxt="Waiting for review"; $statucbg="Waitingforreview";
								 }else if($task->status==3){
									 $statustxt="Stuck"; $statucbg="statusstuck";
								 }else if($task->status==4){
									  $statustxt="Done"; $statucbg="statusdone";
								 }
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){
				$html .='<div class="showforstatus" data-id="'. $task->id .'">';
				$html .='<div class="selectedoption" id="forstatus'. $task->id .'"><div class="'. $statucbg .'">'. $statustxt .' </div> </div>';
				$html .='<div class="myoptions">';
				$html .='<div class="statustoselect optionselect" data-id="0">Select</div>';
				$html .='<div class="statustoselect optionworking" data-id="1">Working on it</div>';
				$html .='<div class="statustoselect optionwaiting" data-id="2">Waiting for review </div>';
				$html .='<div class="statustoselect optionstuck" data-id="3">Stuck</div>';
				$html .='<div class="statustoselect optiondone" data-id="4">Done</div>';
				$html .='</div>';
				$html .='</div>';	
			}else {
				$html .='<div class="showforstatus">';
				$html .='<div class="selectedoption" id="forstatus'. $task->id .'"><div class="'. $statucbg .'"> '. $statustxt .' </div> </div>';
				$html .='</div>';
			}		
 			$html .='</div>';
			// end status
			// show priority
			$html .='<div class="for-priority">';
			if($hiddenfield == "hiddenfiled" ){$html .='<div class="overdiv"></div>';}
			$statustxt="Select"; $statucbg="statusselect";
                         if($task->priority_id==1){
							 $statustxt="Low"; $statucbg="priolow";
						 }else if($task->priority_id==2){
							 $statustxt="Normal"; $statucbg="priomedium";
						 }else if($task->priority_id==3){
							 $statustxt="High"; $statucbg="priohigh";
						 }else if($task->priority_id==4){
							 $statustxt="Urgent"; $statucbg="priourgent";
						 }
			$html .='<div class="for-priority hidden">';
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){
				$html .='<select class="wide selectstatus changepriority changepriority'. $task->id .'"  name="changepriority" data_id="'. $task->id .'" >';
				$html .='<option data-display="Select" value="" >Select</option>';
				foreach($priorities as $priority){
				$html .='<option value="'. $priority->id .'" >'. $priority->name .'</option>';	
				}	
				$html .='</select>';
			} else {
				$html .=(!empty($task->priority->name))?$task->priority->name:"";
			}
			$html .='</div>';
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){
				$html .='<div class="showforpriorities"  data-id="'. $task->id .'">';
				$html .='<div class="selectedoption" id="forprio'. $task->id .'"><div class="'. $statucbg .'">'. $statustxt.' </div> </div>';
				$html .='<div class="myoptions"  >'; 
				$html .='<div class="prioritytoselect Select" data-id="0">Select</div>';
					foreach($priorities as $priority){ 
					$html .='<div class="prioritytoselect '. $priority->name.'" data-id="'. $priority->id .'">'. $priority->name .'</div>';
					} 
				$html .='</div>';
				$html .='</div>';
			} else {
				$html .='<div class="showforpriorities">';
				$html .='<div class="selectedoption" id="forprio'. $task->id .'"><div class="'. $statucbg .'"> '. $statustxt .' </div> </div>';
				$html .='</div>';
			} 
			$html .='</div>';
			// end priority		
			// for start
			$html .='<div class="for-start">';
			if($hiddenfield == "hiddenfiled" ){$html .='<div class="overdiv"></div>';}
			$start_date = ($task->start_date != null)?date('Y,m,j', strtotime($task->start_date)):"";
			$startedt_date = ($task->start_date != null)?date('M j', strtotime($task->start_date)):""; 
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){ 
			$html .='<input class="hidden changeStartDate changeStartDate'. $task->id .'" autocomplete="off" value="'. $start_date .'" data_id="'. $task->id .'" placeholder="Add Start Date"/>';
			$html .='<input type="text" class="tochangestartdate" data_id="'. $task->id .'" value="'. $startedt_date .'" id="tochangedatestart'. $task->id .'" placeholder="Add Start Date" >';
			$html .='<span class="cleardate startclear startclear'. $task->id .'" data_id="'. $task->id .'" ></span>';
			}else{ 
			  $startedt_date;
			}   
			$html .='</div>'; 
			// end forstart
			// for due
			$html .='<div class="for-due">';
			if($hiddenfield == "hiddenfiled" ){$html .='<div class="overdiv"></div>';}
			$due_date = ($task->due_date != null)?date('M j', strtotime($task->due_date)):""; /* echo $due_date; */
			$end_date = ($task->due_date != null)?date('Y,m,j', strtotime($task->due_date)):""; /* echo $due_date; */ 
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){ 
			$html .='<input class="hidden changeEndDate changeEndDate'. $task->id .'" autocomplete="off" value="'. $end_date .'" data_id="'. $task->id .'" placeholder="Add Due Date" />';
			$html .='<input type="text"  placeholder="Add Due Date" class="tochangeenddate" id="tochangeenddate'. $task->id .'" data_id="'. $task->id .'" value="'. $due_date  .'" >';
			$html .='<span class="cleardate endclear endclear'. $task->id .'" data_id="'. $task->id .'" ></span>';
 			}else{ 
			$html .= $due_date;
			} 
			$html .='</div>';
			// end fordue
			if($hiddenfield == "hiddenfiled" ){ // means it's a process ca;endar, so we will get the totlal of subtusk tracking time
				$totaltime  = TrakingTime::workingsubtasktimeononetaskbyuser($task->id,$currentuser->id); 
			}else{
				$totaltime  = TrakingTime::workingtimeononetaskbyuser($task->id,$currentuser->id); 
			}
			
			
			$hours = floor($totaltime / 60);
			$mins = $totaltime%60;
			$html .='<div class="for-due for-logged ">';
			$html .='<div class="add-sub-logged">'.$hours.'h '.$mins.'m</div>';
			$html .='</div>';
			// time tracker
			$html .='<div class="for-status '.$hiddenfield.'">'; 
			$html .='<div class="timetracker timetracker'. $task->id .'">';
			$html .='<div class="displaystart displaystart'. $task->id .'" data-id="'. $task->id .'">';
			$html .='<a href="#" class="clickstart" data-projid="'.$id.'" data-id="'. $task->id .'"><img class="imgstart" src="'. Url::base(true) .'/images/icons/starttimer.svg"></a>';
			$html .='Start</div>';
			$html .='<div class="displaystop displaystop'. $task->id .' hidden">';
			$html .='<a href="#"  class="clickstop" data-id="'. $task->id .'" ><img class="imgstop" src="'. Url::base(true) .'/images/icons/stop-btn.svg"></a>';
			$html .='Stop</div>';
			$html .='<div class="displaystime timer'. $task->id .'" >00:00:00</div>'; 
			$html .='</div>';
			$html .='</div>'; 

			// end time tracker
			// for action
			$html .='<div class="for-actions">';
			if($clickable == "clickable"){ $html .='<div class="icondetail convicon"  data_id="'. $task->id .'"></div>'; }
			if($project_services_task->service->have_process_calendar == 0 ){ 
			$html .='<div class="add-sub-icon bottom-sub-add" data-id="'. $task->id .'" data_level="1" data_monthly_service="'. $data_monthly_service_id .'" data_service_id="'.$data_service_id.'" data_allproject_monthly_service="'. $data_allproject_monthly_service .'"
            data_project_id="'. $id .'"></div>';
			}
				if($currentuser->role_id == 1 || $currentuser->role_id == 2){
					if($project_services_task->service->have_process_calendar == 0){
					$html .='<div class="remove-task-icon task-remove"  data-id="'. $task->id .'" data_level="1"></div>';
					} 
				}  
			$html .='</div>';
			// end foraction
			
			$html .='</div>';
			$child_tasks = Task::havechild($task->id, null, null, null);
			if(!empty($child_tasks)){
				
			$html .='<ul class="datalevel level_one" data_level="2" data_servicetask="'. $data_service_id .'">';	
		foreach($child_tasks as $key=> $child_task){
			
			$html .='<li class="parentitem'. $task->id .' isparent " data_id="'. $child_task->id .'" data_parent="'. $task->id .'" data_servicetask="'. $data_service_id .'" data_order="'. $child_task->order .'" >';	
			$html .='<div class="task-row">';	
			if($key == 0){
				$html.= '<img class="subtask-img" src="https://adcreatorsmanagementdemo.com.au/images/icons/sub-task-icon.svg">';
		 }	
             //
            $latestorder = $child_task->order;					
			$statusdate="";
			$statusoriginale="";
			date_default_timezone_set('Australia/Sydney');
            $time = new \DateTime('now');
            $today = $time->format('Y-m-d');
			if(!empty($child_task->due_date)){
				if($today > $child_task->due_date){
				$statusdate="expired";
				$statusoriginale="expired";}
			}
			if($child_task->status == 4){ $statusdate="active"; }
			if($project_services_task->service->have_process_calendar == 1){ $generalindex++; } 
			if($generalindex > 1){ $clickable="notclickable"; }else{ $clickable="clickable"; }
			$html .='<div class="'. $statusdate .' for-title '.$clickable.' for-title"'. $child_task->id .'"  data_clickable="'. $generalindex .'"  data_id="'. $child_task->id .'" >'; 
			$html .='<span class="t-title">';
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){ 
				if($project_services_task->service->have_process_calendar == 1){ 
					$html .= '<input type="text" class="edittext"  placeholder="ADD TASK"  value="'. $child_task->title. '" data_id="'. $child_task->id .'" readonly/>';
				}else{
					$html .= '<input type="text" class="edittext"  placeholder="ADD TASK"  value="'. $child_task->title. '" data_id="'. $child_task->id .'" />';
				}
			    
 			} else {
			$html .= $child_task->title;
			}
			$html .='</span>';
			$html .='</div>';
			$assignusers  = Task::UserAssignTasks($child_task->id);
			 
			// show assignees
			$html .='<div class="for-assignees showassignes">';
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){
									$html .='<div class="filter-block forcalendar">';
									$html .='<select class="selecteduser" multiple="multiple">';
									 	   $html .='<optgroup label="All People">';
										   foreach($project_users as $project_user){
										   $url = (!empty($project_user->user->image))?$project_user->user->image:"default.png";
										   if(in_array($project_user->user->id, $assignusers)){
  										    $html .='<option selected="" selected="" value="'.$project_user->user->id.'" data_task_id="'.$child_task->id.'" data-img="'.$url.'">'.$project_user->user->first_name .' '. $project_user->user->last_name.'</option>'; 
 										   }else {
										    $html .='<option value="'.$project_user->user->id.'" data_task_id="'.$child_task->id.'" data-img="'.$url.'">'.$project_user->user->first_name .' '. $project_user->user->last_name.'</option>'; 
										   }
 										   //  $html .='<option value="23" selected="" data_task_id="8498" data-img="1575436383.jpg">Abbas A</option>'; 
										   }
									$html .='</select>'; 
			$html .='</div>';
			} else{
			$html .='<div class="users_assign_imagea">'; 
			$assignusers  = Task::ListUserAssignTasks($child_task->id);
			foreach($assignusers as $listuser){ 
				$html .='<div class="user_assign_image">';
				$url = (!empty($listuser->user->image))?Url::base(true)."/uploads/users/".$listuser->user->image:Url::base(true)."/uploads/users/default.png";
 				$html .='<img class="user_assign_image" src="'. $url .'">';
				$html .='</div>';
			} 
			$html .='</div>';
			} 
			$html .='</div>';
			// end assignees
			// show status
			$html .='<div class="for-status">';
			$html .='<select class="hidden selectstatus changestatus changestatus'. $child_task->id .'" data_id="'. $child_task->id .'" name="changestatus" style="display: none;">';
			$html .='<option data-display="Select" value="">Select</option>';
			$html .='<option value="0">Select</option>';
			$html .='<option value="1">Working on it</option>';
			$html .='<option value="2">Waiting for review</option>';
			$html .='<option value="3">Stuck</option>';
			$html .='<option value="4">Done</option>';
			$html .='</select>';
			$statustxt="Select"; $statucbg="statusselect";
								 if($child_task->status==0){
									 $statustxt="Select"; $statucbg="statusselect";
								 }else if($child_task->status==1){
									 $statustxt="Working on it"; $statucbg="workingonit";
								 }else if($child_task->status==2){
									 $statustxt="Waiting for review"; $statucbg="Waitingforreview";
								 }else if($child_task->status==3){
									$statustxt="Stuck"; $statucbg="statusstuck";
								 }else if($child_task->status==4){
									  $statustxt="Done"; $statucbg="statusdone";
									 
								 }
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){
				$html .='<div class="showforstatus" data-id="'. $child_task->id .'">';
				$html .='<div class="selectedoption" id="forstatus'. $child_task->id .'"><div class="'. $statucbg .'">'. $statustxt .' </div> </div>';
				$html .='<div class="myoptions">';
				$html .='<div class="statustoselect optionselect" data-id="0">Select</div>';
				$html .='<div class="statustoselect optionworking" data-id="1">Working on it</div>';
				$html .='<div class="statustoselect optionwaiting" data-id="2">Waiting for review </div>';
				$html .='<div class="statustoselect optionstuck " data-id="3">Stuck</div>';
				$html .='<div class="statustoselect optiondone " data-id="4">Done</div>';
				$html .='</div>';
				$html .='</div>';	
			}else {
				$html .='<div class="showforstatus">';
				$html .='<div class="selectedoption" id="forstatus'. $child_task->id .'"><div class="'. $statucbg .'"> '. $statustxt .' </div> </div>';
				$html .='</div>';
			}		
 			$html .='</div>';
			// end status
			// show priority
			$html .='<div class="for-priority">';
			$statustxt="Select"; $statucbg="statusselect";
                         if($child_task->priority_id==1){
							 $statustxt="Low"; $statucbg="priolow";
						 }else if($child_task->priority_id==2){
							 $statustxt="Normal"; $statucbg="priomedium";
						 }else if($child_task->priority_id==3){
							 $statustxt="High"; $statucbg="priohigh";
						 }else if($child_task->priority_id==4){
							 $statustxt="Urgent"; $statucbg="priourgent";
						 }
			$html .='<div class="for-priority hidden">';
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){
				$html .='<select class="wide selectstatus changepriority changepriority'. $child_task->id .'"  name="changepriority" data_id="'. $child_task->id .'" >';
				$html .='<option data-display="Select" value="" >Select</option>';
				foreach($priorities as $priority){
				$html .='<option value="'. $priority->id .'">'. $priority->name .'</option>';	
				}	
				$html .='</select>';
			} else {
				$html .=(!empty($child_task->priority->name))?$child_task->priority->name:"";
			}
			$html .='</div>';
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){
				$html .='<div class="showforpriorities"  data-id="'. $child_task->id .'">';
				$html .='<div class="selectedoption" id="forprio'. $child_task->id .'"><div class="'. $statucbg .'">'. $statustxt.' </div> </div>';
				$html .='<div class="myoptions"  >'; 
				$html .='<div class="prioritytoselect Select" data-id="0">Select</div>';
					foreach($priorities as $priority){ 
					$html .='<div class="prioritytoselect '. $priority->name.'" data-id="'. $priority->id .'">'. $priority->name .'</div>';
					} 
				$html .='</div>';
				$html .='</div>';
			} else {
				$html .='<div class="showforpriorities">';
				$html .='<div class="selectedoption" id="forprio'. $child_task->id .'"><div class="'. $statucbg .'"> '. $statustxt .' </div> </div>';
				$html .='</div>';
			} 
			$html .='</div>';
			// end priority		
			// for start
			$html .='<div class="for-start">';
			$start_date = ($child_task->start_date != null)?date('Y,m,j', strtotime($child_task->start_date)):"";
			$startedt_date = ($child_task->start_date != null)?date('M j', strtotime($child_task->start_date)):""; 
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){ 
			$html .='<input class="hidden changeStartDate changeStartDate'. $child_task->id .'" autocomplete="off" value="'. $start_date .'" data_id="'. $child_task->id .'" placeholder="Add Start Date"/>';
			$html .='<input type="text" class="tochangestartdate" data_id="'. $child_task->id .'" value="'. $startedt_date .'" id="tochangedatestart'. $child_task->id .'" placeholder="Add Start Date" >';
			$html .='<span class="cleardate startclear startclear'. $child_task->id .'" data_id="'. $child_task->id .'" ></span>';
			}else{ 
			  $startedt_date;
			}   
			$html .='</div>'; 
			// end forstart
			// for due
			$html .='<div class="for-due">';
			$due_date = ($child_task->due_date != null)?date('M j', strtotime($child_task->due_date)):""; /* echo $due_date; */
			$end_date = ($child_task->due_date != null)?date('Y,m,j', strtotime($child_task->due_date)):""; /* echo $due_date; */ 
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){ 
			$html .='<input class="hidden changeEndDate changeEndDate'. $child_task->id .'" autocomplete="off" value="'. $end_date .'" data_id="'. $child_task->id .'" placeholder="Add Due Date" />';
			$html .='<input type="text"  placeholder="Add Due Date" class="tochangeenddate" id="tochangeenddate'. $child_task->id .'" data_id="'. $child_task->id .'" value="'. $due_date  .'" >';
			$html .='<span class="cleardate endclear endclear'. $child_task->id .'" data_id="'. $child_task->id .'" ></span>';
 			}else{ 
			$html .= $due_date;
			} 
			$html .='</div>';
			// end fordue
			$totaltime  = TrakingTime::workingtimeononetaskbyuser($child_task->id,$currentuser->id); 
			$hours = floor($totaltime / 60);
			$mins = $totaltime%60;
			$html .='<div class="for-due for-logged">';
			$html .='<div class="add-sub-logged">'.$hours.'h '.$mins.'m</div>';
			$html .='</div>';
			// time tracker
			$html .='<div class="for-status">'; 
			$html .='<div class="timetracker timetracker'. $child_task->id .'">';
			$html .='<div class="displaystart displaystart'. $child_task->id .'" data-id="'. $child_task->id .'">';
			$html .='<a href="#" class="clickstart" data-projid="'.$id.'" data-id="'. $child_task->id .'"><img class="imgstart" src="'. Url::base(true) .'/images/icons/starttimer.svg"></a>';
			$html .='Start</div>';
			$html .='<div class="displaystop displaystop'. $child_task->id .' hidden">';
			$html .='<a href="#"  class="clickstop" data-id="'. $child_task->id .'" ><img class="imgstop" src="'. Url::base(true) .'/images/icons/stop-btn.svg"></a>';
			$html .='Stop</div>';
			$html .='<div class="displaystime timer'. $child_task->id .'" >00:00:00</div>'; 
			$html .='</div>';
			$html .='</div>'; 

			// end time tracker
			// for action
			$html .='<div class="for-actions">';
			if($clickable == "clickable"){ $html .='<div class="icondetail convicon"  data_id="'. $child_task->id .'"></div>'; }
			
			$html .='<div class="add-sub-icon bottom-sub-add" data-id="'. $child_task->id .'" data_level="1" data_monthly_service="'.  $data_monthly_service_id .'"
            data_service_id="'.$data_service_id.'" data_allproject_monthly_service="'. $data_allproject_monthly_service .'"
            data_project_id="'. $id .'"></div>';
				if($currentuser->role_id == 1 || $currentuser->role_id == 2){
					if($project_services_task->service->have_process_calendar == 0){
					$html .='<div class="remove-task-icon task-remove"  data-id="'. $child_task->id .'" data_level="1"></div>';
					} 
				}  
			$html .='</div>';
//
			$html .='</div>';
			// start 3eme child
			$child1_tasks = Task::havechild($child_task->id,null,null,null);
			if(!empty($child1_tasks)){ 
			$html .='<ul class="datalevel level_two" data_level="3" data_servicetask="'. $data_service_id .'">';
			foreach($child1_tasks as $key=> $child1_task){
			$html .=' <li class="parentitem'. $child_task->id .' isparent " data_id="'. $child1_task->id .'" data_parent="'. $child_task->id .'" data_servicetask="'. $data_service_id .'" data_order="'. $child1_task->order .'"> ';	
			$html .='<div class="task-row">';
			if($key == 0){
				$html.= '<img class="subtask-img" src="https://adcreatorsmanagementdemo.com.au/images/icons/sub-task-icon.svg">';
		 }	
			$latestorder = $child1_task->order;					
			$statusdate="";
			$statusoriginale="";
			date_default_timezone_set('Australia/Sydney');
            $time = new \DateTime('now');
            $today = $time->format('Y-m-d');
			if(!empty($child1_task->due_date)){
				if($today > $child1_task->due_date){
				$statusdate="expired";
				$statusoriginale="expired";}
			}
			if($child1_task->status == 4){ $statusdate="active"; }
			if($project_services_task->service->have_process_calendar == 1){ $generalindex++;  } 
			if($generalindex > 1){ $clickable="notclickable"; }else{ $clickable="clickable"; }
			$html .='<div class="'. $statusdate .' for-title '.$clickable.' for-title"'. $child1_task->id .'  data_clickable="'. $generalindex .'"  " data_id="'. $child1_task->id .'" >'; 
			$html .='<span class="t-title">';
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){ 
			    
				if($project_services_task->service->have_process_calendar == 1){ 
					$html .= '<input type="text" class="edittext"  placeholder="ADD TASK"  value="'. $child1_task->title. '" data_id="'. $child1_task->id .'"  />';
				}else{
					$html .= '<input type="text" class="edittext"  placeholder="ADD TASK"  value="'. $child1_task->title. '" data_id="'. $child1_task->id .'" />';
				}
 			} else {
			$html .= $child1_task->title;
			}
			$html .='</span>';
			$html .='</div>';
			$assignusers  = Task::UserAssignTasks($child1_task->id);
			 
			// show assignees
			$html .='<div class="for-assignees showassignes">';
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){
									$html .='<div class="filter-block forcalendar">';
									$html .='<select class="selecteduser" multiple="multiple">';
									 	   $html .='<optgroup label="All People">';
										   foreach($project_users as $project_user){
										   $url = (!empty($project_user->user->image))?$project_user->user->image:"default.png";
										   if(in_array($project_user->user->id, $assignusers)){
  										    $html .='<option selected="" selected="" value="'.$project_user->user->id.'" data_task_id="'.$child1_task->id.'" data-img="'.$url.'">'.$project_user->user->first_name .' '. $project_user->user->last_name.'</option>'; 
 										   }else {
										    $html .='<option value="'.$project_user->user->id.'" data_task_id="'.$child1_task->id.'" data-img="'.$url.'">'.$project_user->user->first_name .' '. $project_user->user->last_name.'</option>'; 
										   }
 										   //  $html .='<option value="23" selected="" data_task_id="8498" data-img="1575436383.jpg">Abbas A</option>'; 
										   }
									$html .='</select>'; 
			$html .='</div>';
			} else{
			$html .='<div class="users_assign_imagea">'; 
			$assignusers  = Task::ListUserAssignTasks($child1_task->id);
			foreach($assignusers as $listuser){ 
				$html .='<div class="user_assign_image">'; 
				$url = (!empty($listuser->user->image))?Url::base(true)."/uploads/users/".$listuser->user->image:Url::base(true)."/uploads/users/default.png";
 				$html .='<img class="user_assign_image" src="'. $url .'">';
				$html .='</div>';
			} 
			$html .='</div>';
			} 
			$html .='</div>';
			// end assignees
			// show status
			$html .='<div class="for-status">';
			$html .='<select class="hidden selectstatus changestatus changestatus'. $child1_task->id .'" data_id="'. $child1_task->id .'" name="changestatus" style="display: none;">';
			$html .='<option data-display="Select" value="">Select</option>';
			$html .='<option value="0">Select</option>';
			$html .='<option value="1">Working on it</option>';
			$html .='<option value="2">Waiting for review</option>';
			$html .='<option value="3">Stuck</option>';
			$html .='<option value="4">Done</option>';
			$html .='</select>';
			$statustxt="Select"; $statucbg="statusselect";
								 if($child1_task->status==0){
									 $statustxt="Select"; $statucbg="statusselect";
								 }else if($child1_task->status==1){
									 $statustxt="Working on it"; $statucbg="workingonit";
								 }else if($child1_task->status==2){
									 $statustxt="Waiting for review"; $statucbg="Waitingforreview";
								 }else if($child1_task->status==3){
									 $statustxt="Stuck"; $statucbg="statusstuck";
								 }else if($child1_task->status==4){
									 $statustxt="Done"; $statucbg="statusdone";
								 }
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){
				$html .='<div class="showforstatus" data-id="'. $child1_task->id .'">';
				$html .='<div class="selectedoption" id="forstatus'. $child1_task->id .'"><div class="'. $statucbg .'">'. $statustxt .' </div> </div>';
				$html .='<div class="myoptions">';
				$html .='<div class="statustoselect optionselect" data-id="0">Select</div>';
				$html .='<div class="statustoselect optionworking" data-id="1">Working on it</div>';
				$html .='<div class="statustoselect optionwaiting" data-id="2">Waiting for review </div>';
				$html .='<div class="statustoselect optionstuck" data-id="3">Stuck</div>';
				$html .='<div class="statustoselect optiondone" data-id="4">Done</div>';
				$html .='</div>';
				$html .='</div>';	
			}else {
				$html .='<div class="showforstatus">';
				$html .='<div class="selectedoption" id="forstatus'. $child1_task->id .'"><div class="'. $statucbg .'"> '. $statustxt .' </div> </div>';
				$html .='</div>';
			}		
 			$html .='</div>';
			// end status
			// show priority
			$html .='<div class="for-priority">';
			$statustxt="Select"; $statucbg="statusselect";
                         if($child1_task->priority_id==1){
							 $statustxt="Low"; $statucbg="priolow";
						 }else if($child1_task->priority_id==2){
							 $statustxt="Normal"; $statucbg="priomedium";
						 }else if($child1_task->priority_id==3){
							 $statustxt="High"; $statucbg="priohigh";
						 }else if($child1_task->priority_id==4){
							 $statustxt="Urgent"; $statucbg="priourgent";
						 }
			$html .='<div class="for-priority hidden">';
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){
				$html .='<select class="wide selectstatus changepriority changepriority'. $child1_task->id .'"  name="changepriority" data_id="'. $child1_task->id .'" >';
				$html .='<option data-display="Select" value="" >Select</option>';
				foreach($priorities as $priority){
				$html .='<option value="'. $priority->id .'" >'. $priority->name .'</option>';	
				}	
				$html .='</select>';
			} else {
				$html .=(!empty($child1_task->priority->name))?$child1_task->priority->name:"";
			}
			$html .='</div>';
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){
				$html .='<div class="showforpriorities"  data-id="'. $child1_task->id .'">';
				$html .='<div class="selectedoption" id="forprio'. $child1_task->id .'"><div class="'. $statucbg .'">'. $statustxt.' </div> </div>';
				$html .='<div class="myoptions"  >'; 
				$html .='<div class="prioritytoselect Select" data-id="0">Select</div>';
					foreach($priorities as $priority){ 
					$html .='<div class="prioritytoselect '. $priority->name.'" data-id="'. $priority->id .'">'. $priority->name .'</div>';
					} 
				$html .='</div>';
				$html .='</div>';
			} else {
				$html .='<div class="showforpriorities">';
				$html .='<div class="selectedoption" id="forprio'. $child1_task->id .'"><div class="'. $statucbg .'"> '. $statustxt .' </div> </div>';
				$html .='</div>';
			} 
			$html .='</div>';
			// end priority		
			// for start
			$html .='<div class="for-start">';
			$start_date = ($child1_task->start_date != null)?date('Y,m,j', strtotime($child1_task->start_date)):"";
			$startedt_date = ($child1_task->start_date != null)?date('M j', strtotime($child1_task->start_date)):""; 
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){ 
			$html .='<input class="hidden changeStartDate changeStartDate'. $child1_task->id .'" autocomplete="off" value="'. $start_date .'" data_id="'. $child1_task->id .'" placeholder="Add Start Date"/>';
			$html .='<input type="text" class="tochangestartdate" data_id="'. $child1_task->id .'" value="'. $startedt_date .'" id="tochangedatestart'. $child1_task->id .'" placeholder="Add Start Date" >';
			$html .='<span class="cleardate startclear startclear'. $child1_task->id .'" data_id="'. $child1_task->id .'" ></span>';
			}else{ 
			  $startedt_date;
			}   
			$html .='</div>'; 
			// end forstart
			// for due
			$html .='<div class="for-due">';
			$due_date = ($child1_task->due_date != null)?date('M j', strtotime($child1_task->due_date)):""; /* echo $due_date; */
			$end_date = ($child1_task->due_date != null)?date('Y,m,j', strtotime($child1_task->due_date)):""; /* echo $due_date; */ 
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){ 
			$html .='<input class="hidden changeEndDate changeEndDate'. $child1_task->id .'" autocomplete="off" value="'. $end_date .'" data_id="'. $child1_task->id .'" placeholder="Add Due Date" />';
			$html .='<input type="text"  placeholder="Add Due Date" class="tochangeenddate" id="tochangeenddate'. $child1_task->id .'" data_id="'. $child1_task->id .'" value="'. $due_date  .'" >';
			$html .='<span class="cleardate endclear endclear'. $child1_task->id .'" data_id="'. $child1_task->id .'" ></span>';
 			}else{ 
			$html .= $due_date;
			} 
			$html .='</div>';
			// end fordue
			$totaltime  = TrakingTime::workingtimeononetaskbyuser($child1_task->id,$currentuser->id); 
			$hours = floor($totaltime / 60);
			$mins = $totaltime%60;
			$html .='<div class="for-due for-logged">';
			$html .='<div class="add-sub-logged">'.$hours.'h '.$mins.'m</div>';
			$html .='</div>';
			// time tracker
			$html .='<div class="for-status">'; 
			$html .='<div class="timetracker timetracker'. $child1_task->id .'">';
			$html .='<div class="displaystart displaystart'. $child1_task->id .'" data-id="'. $child1_task->id .'">';
			$html .='<a href="#" class="clickstart" data-projid="'.$id.'" data-id="'. $child1_task->id .'"><img class="imgstart" src="'. Url::base(true) .'/images/icons/starttimer.svg"></a>';
			$html .='Start</div>';
			$html .='<div class="displaystop displaystop'. $child1_task->id .' hidden">';
			$html .='<a href="#"  class="clickstop" data-id="'. $child1_task->id .'" ><img class="imgstop" src="'. Url::base(true) .'/images/icons/stop-btn.svg"></a>';
			$html .='Stop</div>';
			$html .='<div class="displaystime timer'. $child1_task->id .'" >00:00:00</div>'; 
			$html .='</div>';
			$html .='</div>'; 
			// end time tracker

			// for action
			$html .='<div class="for-actions">';
			if($clickable == "clickable"){ $html .='<div class="icondetail convicon"  data_id="'. $child1_task->id .'"></div>'; }
			
			$html .='<div class="add-sub-icon bottom-sub-add" data-id="'. $child1_task->id .'" data_level="1" data_monthly_service="'.  $data_monthly_service_id .'"
			data_service_id="'.$data_service_id.'" data_allproject_monthly_service="'. $data_allproject_monthly_service .'" data_project_id="'. $id .'"></div>';
				if($currentuser->role_id == 1 || $currentuser->role_id == 2){
					
					$html .='<div class="remove-task-icon task-remove"  data-id="'. $child1_task->id .'" data_level="1"></div>';
					
				}  
			$html .='</div>';
				
			$html .='</div>';	
						// start 4eme child
			$child2_tasks = Task::havechild($child1_task->id,null,null,null);
			if(!empty($child2_tasks)){ 
			$html .='<ul class="datalevel level_three" data_level="4" data_servicetask=" '.  $data_service_id  .' ">';
			foreach($child2_tasks as $key=> $child2_task){
			 $html .='<li class="parentitem'.  $child1_task->id .' isparent " data_id="'. $child2_task->id .'" data_parent="'. $child1_task->id .'" data_servicetask="'. $data_service_id .'" data_order="'. $child1_task->order .'">'; 	
			 $html .='<div class="task-row">';
			 if($key == 0){
				$html.= '<img class="subtask-img" src="https://adcreatorsmanagementdemo.com.au/images/icons/sub-task-icon.svg">';
		 }	
			 $latestorder = $child2_task->order;					
			$statusdate="";
			$statusoriginale="";
			date_default_timezone_set('Australia/Sydney');
            $time = new \DateTime('now');
            $today = $time->format('Y-m-d');
			if(!empty($child2_task->due_date)){
				if($today > $child2_task->due_date){
				$statusdate="expired";
				$statusoriginale="expired";}
			}
			if($child2_task->status == 4){ $statusdate="active"; }
			$index=1;
			if($project_services_task->service->have_process_calendar == 1){ $generalindex++; } 
						if($generalindex > 1){ $clickable="notclickable"; }else{ $clickable="clickable"; }
			$html .='<div class="'. $statusdate .' for-title '.$clickable.' for-title"'. $child2_task->id .' "  data_clickable="'. $generalindex .'"  data_id="'. $child2_task->id .'"  style="width: calc( 98% - 1170px );" >'; 
			$html .='<span class="t-title">';
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){ 
			   
				$html .= '<input type="text" class="edittext"  placeholder="ADD TASK"  value="'. $child2_task->title. '" data_id="'. $child2_task->id .'" />';
 			} else {
			$html .= $child2_task->title;
			}
			$html .='</span>';
			$html .='</div>';
			$assignusers  = Task::UserAssignTasks($child2_task->id);
			 
			// show assignees
			$html .='<div class="for-assignees showassignes">';
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){
									$html .='<div class="filter-block forcalendar">';
									$html .='<select class="selecteduser" multiple="multiple">';
									 	   $html .='<optgroup label="All People">';
										   foreach($project_users as $project_user){
										   $url = (!empty($project_user->user->image))?$project_user->user->image:"default.png";
										   if(in_array($project_user->user->id, $assignusers)){
  										    $html .='<option selected="" selected="" value="'.$project_user->user->id.'" data_task_id="'.$child2_task->id.'" data-img="'.$url.'">'.$project_user->user->first_name .' '. $project_user->user->last_name.'</option>'; 
 										   }else {
										    $html .='<option value="'.$project_user->user->id.'" data_task_id="'.$child2_task->id.'" data-img="'.$url.'">'.$project_user->user->first_name .' '. $project_user->user->last_name.'</option>'; 
										   }
 										   //  $html .='<option value="23" selected="" data_task_id="8498" data-img="1575436383.jpg">Abbas A</option>'; 
										   }
									$html .='</select>'; 
			$html .='</div>';
			} else{
			$html .='<div class="users_assign_imagea">'; 
			$assignusers  = Task::ListUserAssignTasks($child2_task->id);
			foreach($assignusers as $listuser){ 
				$html .='<div class="user_assign_image">';
				$url = (!empty($listuser->user->image))?Url::base(true)."/uploads/users/".$listuser->user->image:Url::base(true)."/uploads/users/default.png";
				$html .='<img class="user_assign_image" src="'. $url .'">';
				$html .='</div>';
			} 
			$html .='</div>';
			} 
			$html .='</div>';
			// end assignees
			// show status
			$html .='<div class="for-status">';
			$html .='<select class="hidden selectstatus changestatus changestatus'. $child2_task->id .'" data_id="'. $child2_task->id .'" name="changestatus" style="display: none;">';
			$html .='<option data-display="Select" value="">Select</option>';
			$html .='<option value="0">Select</option>';
			$html .='<option value="1">Working on it</option>';
			$html .='<option value="2">Waiting for review</option>';
			$html .='<option value="3">Stuck</option>';
			$html .='<option value="4">Done</option>';
			$html .='</select>';
			$statustxt="Select"; $statucbg="statusselect";
								 if($child2_task->status==0){
									 $statustxt="Select"; $statucbg="statusselect";
								 }else if($child2_task->status==1){
									 $statustxt="Working on it"; $statucbg="workingonit";
								 }else if($child2_task->status==2){
									 $statustxt="Waiting for review"; $statucbg="Waitingforreview";
								 }else if($child2_task->status==3){
									 $statustxt="Stuck"; $statucbg="statusstuck";
								 }else if($child2_task->status==4){
									 $statustxt="Done"; $statucbg="statusdone";
								 }
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){
				$html .='<div class="showforstatus" data-id="'. $child2_task->id .'">';
				$html .='<div class="selectedoption" id="forstatus'. $child2_task->id .'"><div class="'. $statucbg .'">'. $statustxt .' </div> </div>';
				$html .='<div class="myoptions">';
				$html .='<div class="statustoselect optionselect" data-id="0">Select</div>';
				$html .='<div class="statustoselect optionworking" data-id="1">Working on it</div>';
				$html .='<div class="statustoselect optionwaiting" data-id="2">Waiting for review </div>';
				$html .='<div class="statustoselect optionstuck" data-id="3">Stuck</div>';
				$html .='<div class="statustoselect optiondone" data-id="4">Done</div>';
				$html .='</div>';
				$html .='</div>';	
			}else {
				$html .='<div class="showforstatus">';
				$html .='<div class="selectedoption" id="forstatus'. $child2_task->id .'"><div class="'. $statucbg .'"> '. $statustxt .' </div> </div>';
				$html .='</div>';
			}		
 			$html .='</div>';
			// end status
			// show priority
			$html .='<div class="for-priority">';
			$statustxt="Select"; $statucbg="statusselect";
                         if($child2_task->priority_id==1){
							 $statustxt="Low"; $statucbg="priolow";
						 }else if($child2_task->priority_id==2){
							 $statustxt="Normal"; $statucbg="priomedium";
						 }else if($child2_task->priority_id==3){
							 $statustxt="High"; $statucbg="priohigh";
						 }else if($child2_task->priority_id==4){
							 $statustxt="Urgent"; $statucbg="priourgent";
						 }
			$html .='<div class="for-priority hidden">';
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){
				$html .='<select class="wide selectstatus changepriority changepriority'. $child2_task->id .'"  name="changepriority" data_id="'. $child2_task->id .'" >';
				$html .='<option data-display="Select" value="" >Select</option>';
				foreach($priorities as $priority){
				$html .='<option value="'. $priority->id .'">'. $priority->name .'</option>';	
				}	
				$html .='</select>';
			} else {
				$html .=(!empty($child2_task->priority->name))?$child2_task->priority->name:"";
			}
			$html .='</div>';
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){
				$html .='<div class="showforpriorities"  data-id="'. $child2_task->id .'">';
				$html .='<div class="selectedoption" id="forprio'. $child2_task->id .'"><div class="'. $statucbg .'">'. $statustxt.' </div> </div>';
				$html .='<div class="myoptions"  >'; 
				$html .='<div class="prioritytoselect Select" data-id="0">Select</div>';
					foreach($priorities as $priority){ 
					$html .='<div class="prioritytoselect '. $priority->name.'" data-id="'. $priority->id .'">'. $priority->name .'</div>';
					} 
				$html .='</div>';
				$html .='</div>';
			} else {
				$html .='<div class="showforpriorities">';
				$html .='<div class="selectedoption" id="forprio'. $child2_task->id .'"><div class="'. $statucbg .'"> '. $statustxt .' </div> </div>';
				$html .='</div>';
			} 
			$html .='</div>';
			// end priority		
			// for start
			$html .='<div class="for-start">';
			$start_date = ($child2_task->start_date != null)?date('Y,m,j', strtotime($child2_task->start_date)):"";
			$startedt_date = ($child2_task->start_date != null)?date('M j', strtotime($child2_task->start_date)):""; 
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){ 
			$html .='<input class="hidden changeStartDate changeStartDate'. $child2_task->id .'" autocomplete="off" value="'. $start_date .'" data_id="'. $child2_task->id .'" placeholder="Add Start Date"/>';
			$html .='<input type="text" class="tochangestartdate" data_id="'. $child2_task->id .'" value="'. $startedt_date .'" id="tochangedatestart'. $child2_task->id .'" placeholder="Add Start Date" >';
			$html .='<span class="cleardate startclear startclear'. $child2_task->id .'" data_id="'. $child2_task->id .'" ></span>';
			}else{ 
			  $startedt_date;
			}   
			$html .='</div>'; 
			// end forstart
			// for due
			$html .='<div class="for-due">';
			$due_date = ($child2_task->due_date != null)?date('M j', strtotime($child2_task->due_date)):""; /* echo $due_date; */
			$end_date = ($child2_task->due_date != null)?date('Y,m,j', strtotime($child2_task->due_date)):""; /* echo $due_date; */ 
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){ 
			$html .='<input class="hidden changeEndDate changeEndDate'. $child2_task->id .'" autocomplete="off" value="'. $end_date .'" data_id="'. $child2_task->id .'" placeholder="Add Due Date" />';
			$html .='<input type="text"  placeholder="Add Due Date" class="tochangeenddate" id="tochangeenddate'. $child2_task->id .'" data_id="'. $child2_task->id .'" value="'. $due_date  .'" >';
			$html .='<span class="cleardate endclear endclear'. $child2_task->id .'" data_id="'. $child2_task->id .'" ></span>';
 			}else{ 
			$html .= $due_date;
			} 
			$html .='</div>';
			// end fordue
			$totaltime  = TrakingTime::workingtimeononetaskbyuser($child2_task->id,$currentuser->id); 
			$hours = floor($totaltime / 60);
			$mins = $totaltime%60;
			$html .='<div class="for-due for-logged">';
			$html .='<div class="add-sub-logged">'.$hours.'h '.$mins.'m</div>';
			$html .='</div>';
			// time tracker
			$html .='<div class="for-status">'; 
			$html .='<div class="timetracker timetracker'. $child2_task->id .'">';
			$html .='<div class="displaystart displaystart'. $child2_task->id .'" data-id="'. $child2_task->id .'">';
			$html .='<a href="#" class="clickstart" data-projid="'.$id.'" data-id="'. $child2_task->id .'"><img class="imgstart" src="'. Url::base(true) .'/images/icons/starttimer.svg"></a>';
			$html .='Start</div>';
			$html .='<div class="displaystop displaystop'. $child2_task->id .' hidden">';
			$html .='<a href="#"  class="clickstop" data-id="'. $child2_task->id .'" ><img class="imgstop" src="'. Url::base(true) .'/images/icons/stop-btn.svg"></a>';
			$html .='Stop</div>';
			$html .='<div class="displaystime timer'. $child2_task->id .'" >00:00:00</div>'; 
			$html .='</div>';
			$html .='</div>'; 
			// end time tracker

			// for action
			$html .='<div class="for-actions">';
			if($clickable == "clickable"){ $html .='<div class="icondetail convicon"  data_id="'. $child2_task->id .'"></div>'; }
			
			$html .='<div class="add-sub-icon bottom-sub-add" data-id="'. $child2_task->id .'" data_level="1" data_monthly_service="'.  $data_monthly_service_id .'"></div>';
				if($currentuser->role_id == 1 || $currentuser->role_id == 2){
					
					$html .='<div class="remove-task-icon task-remove"  data-id="'. $child2_task->id .'" data_level="1"></div>';
					 
				}  
			$html .='</div>';
																				
			 
			 $html .='</div>';
			 $html .='</li>';
			}
			$html .='</ul>';
			}
			// end 4eme child
			$html .='</li>';	
			}	
			$html .='</ul>';
			}

			
			// end 3eme child		
			$html .='<li>';// end 2em li	
			}	
            
            $html .='</ul>';			
			}	
			// first li
			$html .='</li>'; 
			}
			$html .='</ol>';
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){
			if($project_services_task->service->have_process_calendar == 0){ 
				$html .='<div class="toadd-task"><a href="javascript://" class="addtask" data_project_id="'. $id .'"   data-serviceid="'. $data_service_id .'" data_allproject_monthly_service="'.$data_allproject_monthly_service.'" data-id="'. $data_allproject_monthly_service . $project_services_task->id .'" data_monthly_id="'. $data_monthly_service_id .'" data_level="1" data_last_li_order="'. $latestorder .'">+ ADD TASKS</a></div>';
				} 
			}  
			$html .='</div>'; 
		} else {
		 $html .='<div class="toadd-task"><a href="javascript://" class="addtask" data_project_id="'. $id .'"   data-serviceid="'. $data_service_id .'" data_allproject_monthly_service="'.$data_allproject_monthly_service.'" data-id="'. $data_allproject_monthly_service . $project_services_task->id .'" data_monthly_id="'. $data_monthly_service_id .'" data_level="1" data_last_li_order="'. $latestorder .'">+ ADD TASKS</a></div>';
 		} 	
		$html .='</div>';
		
		$results=['html'=> $html];
		echo json_encode($results);
        exit();
	}
	
public function actionAlltasksoneoff(){
		$data_service_id = $_POST['data_service_id'];
		$id = $_POST['project_id'];
		//$data_monthly_service_id= $_POST['data_monthly_service_id'];
		//$data_allproject_monthly_service= $_POST['data_allproject_monthly_service'];
		if(isset($_POST['servicename'])){
		$servicename= $_POST['servicename'];
		}else{
			$servicename= '';
		}
		if(isset($_POST['monthtext'])){
		$monthtext= $_POST['monthtext'];
		}else{
			$monthtext= '';
		}
		if(isset($_POST['process_cacndar'])){
		$process_cacndar= $_POST['process_cacndar'];
		}else{
			$process_cacndar= 0;
		}
		$userid=\Yii::$app->user->getId();
		$currentuser = User::findOne($userid);
		
		$data_monthly_service_id = '';
		$data_allproject_monthly_service = '0';
		
		$project_services_task = ProjectService::find()->joinWith(['service'])->where(['project_service.id'=> $data_service_id ])->one();
		//$parenttask = Task::parentMonthlyTask($data_service_id,$data_monthly_service_id,$data_search,$status,$search); 
		 
	//	$parenttask = Task::parentMonthlyTask($data_service_id,$data_allproject_monthly_service,null,null,null); 
		$parenttask = Task::parentTask($data_service_id,null,null,null); 
 		$html ='';
		$project_users =  ProjectUser::find()->joinWith(['user'])->where(['project_user.project_id'=>$id])->andWhere(['project_user.status'=>1])->andWhere(['user.deleted'=>0])->andWhere(['user.active'=>1])->all();
		$priorities = Priority::find()->all(); 
		$html .='<div id="collapse'. $data_service_id .'" class="divtocollapse">'; 
		     $latestorder = 0;
		if($parenttask){ 
		
	$currentstage = array();	  
	$currentstage[$data_service_id]['currentstage'] = $project_services_task->current_stage;
	$exist = 0;
	foreach($parenttask as $task){
		$currentstage[$data_service_id]['allstages'][$task->id] = $task->title;
		if($task->id == $project_services_task->current_stage){
			$exist = 1;
		}
	} 
$current = $currentstage[$project_services_task->id]['currentstage'];
$allstages = $currentstage[$project_services_task->id]['allstages'];	
		
			$html .='<div class="panel-body">';
			//$html .='<ol class="default vertical mylist datalevel ol"'. $allproject_monthly_service->id . $project_services_task->id .'" data_servicetask="'. $project_services_task->id .'"   data_level="1" data_monthly_service="'. $allproject_monthly_service->id .'">';
			$html .='<ol class="default vertical mylist datalevel ol"'. $data_service_id .'" data_servicetask="'. $data_service_id .'"   data_level="1" >';
			 $generalindex=0;
			foreach($parenttask as $task){ 
						 if($project_services_task->service->have_process_calendar == 1){ $generalindex++; }
			if($exist == 0){
				$current = 1;
				$exist = 2;
			}
			if($current == 1){
					$currentid = $task->id;	
					$current = 2;					
			}else{
				$currentid = $current;
			}
		
			if($currentid == $task->id){
				$currentclass = 'active';
			}else{
				//$currentclass = 'nonactive';
			}
		if(!$process_cacndar == 0){ 
			if($currentid == $task->id){
				$currentclass = 'doyellow ';
				$clickable = 'clickable';
			}else{
				$currentclass = 'doyellow ';
				$clickable = 'notclickable';
			}
		}else{
			$currentclass = 'active';
			$clickable = 'clickable';
		}
			$hiddenfield="";
			$latestorder = 0;	
			if($generalindex > 1){ $clickable="notclickable"; $darkgrey="";}else{ $clickable="clickable"; }			
			if($project_services_task->service->have_process_calendar == 1 && $clickable="clickable"){ $hiddenfield="hiddenfiled";}else{ $hiddenfield="";}
			if($hiddenfield == "hiddenfiled" ){$darkgrey="parent_class_grey";}else{$darkgrey="";}
			$html .='<li class="parentitem isparent '.$currentclass.' " data_id="'. $task->id.'" data_servicetask="'. $data_service_id .'"  data_order="'. $task->order .'" data_monthly_service="'.  $data_monthly_service_id .'">';
 			$html .='<div class="task-row '.$darkgrey.'">';
			$latestorder = $task->order;					
			$statusdate="";
			$statusoriginale="";
			$overduetask='';
			date_default_timezone_set('Australia/Sydney');
            $time = new \DateTime('now');
            $today = $time->format('Y-m-d');
			if(!empty($task->due_date)){
				if($today > $task->due_date){
				$statusdate="expired";
				$statusoriginale="expired";
				$overduetask='overdue';
				}else{
					$overduetask='overdue';
				}
			}
 			if($task->status == 4){ $statusdate="active"; }
			$html .='<div class="for-title-up for-stage-d-flex" >'; 
			$html .='<div class="'. $statusdate .' for-title '.$clickable.' for-title'. $task->id .'"  data_id="'. $task->id .'" data_project_id="'. $id .'">'; 
			$html .='<span class="t-title">';
			if($process_cacndar == 0){
				$title = $task->title;
			}elseif($servicename == ''){
				$title = $task->title;
			}else{
				$title = $servicename;
			}
			if($process_cacndar == 0){
				if($currentuser->role_id == 1 || $currentuser->role_id == 2){
				if($process_cacndar == 1){ 
					$html .= '<input type="text" class="edittext"  placeholder="ADD TASK"  value="'. $task->title. '" data_id="'. $task->id .'" readonly />';
				}else{
					$html .= '<input type="text" class="edittext"  placeholder="ADD TASK"  value="'. $task->title. '" data_id="'. $task->id .'" />';
				}
			
				}
			}else{
			$html .= $title;
			}
		
			$html .='</span>';
			$html .='</div>';
			if(!$process_cacndar == 0){ 
			/*$html .='   <div class="for-stage">
					<div class="form-group-block">
						<div class="form-items-block">';
			$html .='<select class="form-select stagechange" data="'.$project_services_task->id.'" data_monthly_service="'.  $data_monthly_service_id .'" aria-label="Default select example">';
							foreach($allstages as $key => $stage){
								if($key == $task->id){
									$select = 'selected';
								}else{
									$select = '';
								}
		$html	.='<option value="'.$key.'" '.$select.'>'.$stage.'</option>';
							}
		$html	.='</select></div> </div>	</div>';*/
			}
			$html .='</div>';
			
			
			
			$assignusers  = Task::UserAssignTasks($task->id);
			 
			// show assignees
			$html .='<div class="for-assignees showassignes '.$hiddenfield.'">';
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){
									$html .='<div class="filter-block forcalendar">';
									$html .='<select class="selecteduser" multiple="multiple">';
									 	   $html .='<optgroup label="All People">';
										   foreach($project_users as $project_user){
										   $url = (!empty($project_user->user->image))?$project_user->user->image:"default.png";
										   if(in_array($project_user->user->id, $assignusers)){
  										    $html .='<option selected="" selected="" value="'.$project_user->user->id.'" data_task_id="'.$task->id.'" data-img="'.$url.'">'.$project_user->user->first_name .' '. $project_user->user->last_name.'</option>'; 
 										   }else {
										    $html .='<option value="'.$project_user->user->id.'" data_task_id="'.$task->id.'" data-img="'.$url.'">'.$project_user->user->first_name .' '. $project_user->user->last_name.'</option>'; 
										   }
 										   //  $html .='<option value="23" selected="" data_task_id="8498" data-img="1575436383.jpg">Abbas A</option>'; 
										   }
									$html .='</select>'; 
			$html .='</div>';
			} else{
			$html .='<div class="users_assign_imagea">'; 
			$assignusers  = Task::ListUserAssignTasks($task->id);
			foreach($assignusers as $listuser){ 
				$html .='<div class="user_assign_image">';
				$url = (!empty($listuser->user->image))?Url::base(true)."/uploads/users/".$listuser->user->image:Url::base(true)."/uploads/users/default.png";
				$html .='<img class="user_assign_image" src="'. $url .'">';
				$html .='</div>';
			} 
			$html .='</div>';
			} 
			$html .='</div>';
			// end assignees
			
			// show status
			$html .='<div class="for-status">';
			if($hiddenfield == "hiddenfiled" ){$html .='<div class="overdiv"></div>';}
			$html .='<select class="hidden selectstatus changestatus changestatus'. $task->id .'" data_id="'. $task->id .'" name="changestatus" style="display: none;">';
			$html .='<option data-display="Select" value="">Select</option>';
			$html .='<option value="0">Select</option>';
			$html .='<option value="1">Working on it</option>';
			$html .='<option value="2">Waiting for review</option>';
			$html .='<option value="3">Stuck</option>';
			$html .='<option value="4">Done</option>';
			$html .='</select>';
			$statustxt="Select"; $statucbg="statusselect";
								 if($task->status==0){
									 $statustxt="Select"; $statucbg="statusselect";
								 }else if($task->status==1){
									 $statustxt="Working on it"; $statucbg="workingonit";
								 }else if($task->status==2){
									 $statustxt="Waiting for review"; $statucbg="Waitingforreview";
								 }else if($task->status==3){
									$statustxt="Stuck"; $statucbg="statusstuck";
								 }else if($task->status==4){
									  $statustxt="Done"; $statucbg="statusdone";
									 
								 }
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){
				$html .='<div class="showforstatus" data-id="'. $task->id .'">';
				$html .='<div class="selectedoption" id="forstatus'. $task->id .'"><div class="'. $statucbg .'">'. $statustxt .' </div> </div>';
				$html .='<div class="myoptions">';
				$html .='<div class="statustoselect optionselect" data-id="0">Select</div>';
				$html .='<div class="statustoselect optionworking" data-id="1">Working on it</div>';
				$html .='<div class="statustoselect optionwaiting" data-id="2">Waiting for review </div>';
				$html .='<div class="statustoselect  optionstuck" data-id="3">Stuck</div>';
				$html .='<div class="statustoselect optiondone" data-id="4">Done</div>';
				$html .='</div>';
				$html .='</div>';	
			}else {
				$html .='<div class="showforstatus">';
				$html .='<div class="selectedoption" id="forstatus'. $task->id .'"><div class="'. $statucbg .'"> '. $statustxt .' </div> </div>';
				$html .='</div>';
			}		
 			$html .='</div>';
			// end status
			// show priority
			$html .='<div class="for-priority">';
			if($hiddenfield == "hiddenfiled" ){$html .='<div class="overdiv"></div>';}
			$statustxt="Select"; $statucbg="statusselect";
                         if($task->priority_id==1){
							 $statustxt="Low"; $statucbg="priolow";
						 }else if($task->priority_id==2){
							 $statustxt="Normal"; $statucbg="priomedium";
						 }else if($task->priority_id==3){
							 $statustxt="High"; $statucbg="priohigh";
						 }else if($task->priority_id==4){
							 $statustxt="Urgent"; $statucbg="priourgent";
						 }
			$html .='<div class="for-priority hidden">';
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){
				$html .='<select class="wide selectstatus changepriority changepriority'. $task->id .'"  name="changepriority" data_id="'. $task->id .'" >';
				$html .='<option data-display="Select" value="" >Select</option>';
				foreach($priorities as $priority){
				$html .='<option value="'. $priority->id .'" >'. $priority->name .'</option>';	
				}	
				$html .='</select>';
			} else {
				$html .=(!empty($task->priority->name))?$task->priority->name:"";
			}
			$html .='</div>';
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){
				$html .='<div class="showforpriorities"  data-id="'. $task->id .'">';
				$html .='<div class="selectedoption" id="forprio'. $task->id .'"><div class="'. $statucbg .'">'. $statustxt.' </div> </div>';
				$html .='<div class="myoptions"  >'; 
				$html .='<div class="prioritytoselect Select" data-id="0">Select</div>';
					foreach($priorities as $priority){ 
					$html .='<div class="prioritytoselect '. $priority->name.'" data-id="'. $priority->id .'">'. $priority->name .'</div>';
					} 
				$html .='</div>';
				$html .='</div>';
			} else {
				$html .='<div class="showforpriorities">';
				$html .='<div class="selectedoption" id="forprio'. $task->id .'"><div class="'. $statucbg .'"> '. $statustxt .' </div> </div>';
				$html .='</div>';
			} 
			$html .='</div>';
			// end priority		
			// for start
				// for start
			$html .='<div class="for-start">';
			if($hiddenfield == "hiddenfiled" ){$html .='<div class="overdiv"></div>';}
			$start_date = ($task->start_date != null)?date('M, j', strtotime($task->start_date)):""; /*echo $start_date;*/ 
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){ 
			$html .='<input class="changeStartDate changeStartDate'.$task->id.'" value="'.$start_date.'" data_id="'.$task->id.'" placeholder="Add Start Date" />';
			}else{ 
			  $start_date;
			}   
			$html .='</div>'; 
			// end forstart
			// for due
			$html .='<div class="for-due">';
			if($hiddenfield == "hiddenfiled" ){$html .='<div class="overdiv"></div>';}
			$due_date = ($task->due_date != null)?date('M j', strtotime($task->due_date)):""; /* echo $due_date; */
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){ 
			$html .='<input class="changeEndDate changeEndDate'.$task->id.' '.$overduetask.'" value="'.$due_date.'" data_id="'.$task->id.'" placeholder="Add Due Date" />';
 			}else{ 
			$html .= $due_date;
			} 
			$html .='</div>';
			// end fordue

			if($hiddenfield == "hiddenfiled" ){ // means it's a process ca;endar, so we will get the totlal of subtusk tracking time
				$totaltime  = TrakingTime::workingsubtasktimeononetaskbyuser($task->id,$currentuser->id); 
			}else{
				$totaltime  = TrakingTime::workingtimeononetaskbyuser($task->id,$currentuser->id); 
			}
			$hours = floor($totaltime / 60);
			$mins = $totaltime%60;
			$html .='<div class="for-due for-logged ">'; 
			$html .='<div class="add-sub-logged">'.$hours.'h '.$mins.'m</div>';
			$html .='</div>';
			// time tracker
			$html .='<div class="for-due for-trakingg '.$hiddenfield.'">'; 
			
			$html .='<div class="timetracker timetracker'. $task->id .'">';
			$html .='<div class="displaystart displaystart'. $task->id .'" data-id="'. $task->id .'">';
			$html .='<a href="#" class="clickstart" data-id="'. $task->id .'" data-projid="'.$id.'"><img class="imgstart" src="'. Url::base(true) .'/images/icons/starttimer.svg">Start</a>';
			$html .='</div>';
			$html .='<div class="displaystop displaystop'. $task->id .' hidden">';
			$html .='<a href="#"  class="clickstop" data-id="'. $task->id .'" data-projid="'.$id.'"><img class="imgstop" src="'. Url::base(true) .'/images/icons/stop-btn.svg">Stop</a>';
			$html .='</div>';
			$html .='<div class="displaystime timer'. $task->id .'" >00:00:00</div>'; 
			$html .='</div>';
			$html .='</div>'; 

			// end time tracker
			// for action
			$html .='<div class="for-actions">';
			if($clickable == 'clickable'){$html .='<div class="icondetail convicon" data_project_id="'.$id.'"  data_id="'. $task->id .'" servicename="'.$servicename.'" process_cacndar="'.$process_cacndar.'"></div>';}
			if($project_services_task->service->have_process_calendar == 0 ){ 
			$html .='<div class="add-sub-icon bottom-sub-add" data-id="'. $task->id .'" data_level="1" data_monthly_service="'. $data_monthly_service_id .'" data_service_id="'.$data_service_id.'" data_allproject_monthly_service="'. $data_allproject_monthly_service .'"
            data_project_id="'. $id .'" servicename="'.$servicename.'"  process_cacndar="'.$process_cacndar.'"></div>';
			}
				if($currentuser->role_id == 1 || $currentuser->role_id == 2){
					if($project_services_task->service->have_process_calendar == 0){
					$html .='<div class="remove-task-icon task-remove"  data-id="'. $task->id .'" serviceid="'.$data_service_id.'" data_level="1"  process_cacndar="'.$process_cacndar.'"></div>';
					} 
				}  
			$html .='</div>';
			// end foraction
			
			$html .='</div>';
			$child_tasks = Task::havechild($task->id, null, null, null);
			if(!empty($child_tasks)){  
			if($project_services_task->service->have_process_calendar == 1){ $clickable= ""; }else{ $clickable="clickable"; }
			$hiddenfield="";
			$html .='<ul class="datalevel level_four" data_level="2" data_servicetask="'. $data_service_id .'">';	
			foreach($child_tasks as $key=> $child_task){
			$html .='<li class="parentitem'. $task->id .' isparent " data_id="'. $child_task->id .'" data_parent="'. $task->id .'" data_servicetask="'. $data_service_id .'" data_order="'. $child_task->order .'" >';	
			$html .='<div class="task-row">';		
		// 	if($key == 0){
		// 		$html.= '<img class="subtask-img" src="https://adcreatorsmanagementdemo.com.au/images/icons/sub-task-icon.svg">';
		//  }	
            $latestorder = $child_task->order;					
			$statusdate="";
			$statusoriginale="";
			$overduetask='';
			date_default_timezone_set('Australia/Sydney');
            $time = new \DateTime('now');
            $today = $time->format('Y-m-d');
			if(!empty($child_task->due_date)){
				if($today > $child_task->due_date){
				$statusdate="expired";
				$statusoriginale="expired";
				$overduetask='overdue';
				}else{
					$overduetask='';
				}
			}
			if($child_task->status == 4){ $statusdate="active"; }
			$html .='<div class="'. $statusdate .' for-title '.$clickable.' for-title'. $child_task->id .'" data_project_id="'. $id .'" data_id="'. $child_task->id .'" >'; 
			$html .='<span class="t-title">';
			if($process_cacndar == 0){ 
					$html .= '<div class="sub-task-icon">
						<img class="subtask-img" src="https://adcreatorsmanagementdemo.com.au/images/icons/sub-task-icon.svg">
					</div>';
			}
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){ 
				if($process_cacndar == 1){ 
				  $html .= '<input type="text" class="edittext"  placeholder="ADD TASK"  value="'. $child_task->title. '" data_id="'. $child_task->id .'" readonly />';
				}else{
					  $html .= '<input type="text" class="edittext"  placeholder="ADD TASK"  value="'. $child_task->title. '" data_id="'. $child_task->id .'" />';
				}
			  
 			} else {
			$html .= $child_task->title;
			}
			$html .='</span>';
			$html .='</div>';
			$assignusers  = Task::UserAssignTasks($child_task->id);
			 
			// show assignees
			$html .='<div class="for-assignees showassignes">';
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){
									$html .='<div class="filter-block forcalendar">';
									$html .='<select class="selecteduser" multiple="multiple">';
									 	   $html .='<optgroup label="All People">';
										   foreach($project_users as $project_user){
										   $url = (!empty($project_user->user->image))?$project_user->user->image:"default.png";
										   if(in_array($project_user->user->id, $assignusers)){
  										    $html .='<option selected="" selected="" value="'.$project_user->user->id.'" data_task_id="'.$child_task->id.'" data-img="'.$url.'">'.$project_user->user->first_name .' '. $project_user->user->last_name.'</option>'; 
 										   }else {
										    $html .='<option value="'.$project_user->user->id.'" data_task_id="'.$child_task->id.'" data-img="'.$url.'">'.$project_user->user->first_name .' '. $project_user->user->last_name.'</option>'; 
										   }
 										   //  $html .='<option value="23" selected="" data_task_id="8498" data-img="1575436383.jpg">Abbas A</option>'; 
										   }
									$html .='</select>'; 
			$html .='</div>';
			} else{
			$html .='<div class="users_assign_imagea">'; 
			$assignusers  = Task::ListUserAssignTasks($child_task->id);
			foreach($assignusers as $listuser){ 
				$html .='<div class="user_assign_image">';
				$url = (!empty($listuser->user->image))?Url::base(true)."/uploads/users/".$listuser->user->image:Url::base(true)."/uploads/users/default.png";
 				$html .='<img class="user_assign_image" src="'. $url .'">';
				$html .='</div>';
			} 
			$html .='</div>';
			} 
			$html .='</div>';
			// end assignees
			// show status
			$html .='<div class="for-status">';
			$html .='<select class="hidden selectstatus changestatus changestatus'. $child_task->id .'" data_id="'. $child_task->id .'" name="changestatus" style="display: none;">';
			$html .='<option data-display="Select" value="">Select</option>';
			$html .='<option value="0">Select</option>';
			$html .='<option value="1">Working on it</option>';
			$html .='<option value="2">Waiting for review</option>';
			$html .='<option value="3">Stuck</option>';
			$html .='<option value="4">Done</option>';
			$html .='</select>';
			$statustxt="Select"; $statucbg="statusselect";
								 if($child_task->status==0){
									 $statustxt="Select"; $statucbg="statusselect";
								 }else if($child_task->status==1){
									 $statustxt="Working on it"; $statucbg="workingonit";
								 }else if($child_task->status==2){
									 $statustxt="Waiting for review"; $statucbg="Waitingforreview";
								 }else if($child_task->status==3){
									  $statustxt="Stuck"; $statucbg="statusstuck";
								 }else if($child_task->status==4){
									 $statustxt="Done"; $statucbg="statusdone";
									
								 }
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){
				$html .='<div class="showforstatus" data-id="'. $child_task->id .'">';
				$html .='<div class="selectedoption" id="forstatus'. $child_task->id .'"><div class="'. $statucbg .'">'. $statustxt .' </div> </div>';
				$html .='<div class="myoptions">';
				$html .='<div class="statustoselect optionselect" data-id="0">Select</div>';
				$html .='<div class="statustoselect optionworking" data-id="1">Working on it</div>';
				$html .='<div class="statustoselect optionwaiting" data-id="2">Waiting for review </div>';
				$html .='<div class="statustoselect optionstuck" data-id="3">Stuck</div>';
				$html .='<div class="statustoselect optiondone" data-id="4">Done</div>';
				$html .='</div>';
				$html .='</div>';	
			}else {
				$html .='<div class="showforstatus">';
				$html .='<div class="selectedoption" id="forstatus'. $child_task->id .'"><div class="'. $statucbg .'"> '. $statustxt .' </div> </div>';
				$html .='</div>';
			}		
 			$html .='</div>';
			// end status
			// show priority
			$html .='<div class="for-priority">';
			$statustxt="Select"; $statucbg="statusselect";
                         if($child_task->priority_id==1){
							 $statustxt="Low"; $statucbg="priolow";
						 }else if($child_task->priority_id==2){
							 $statustxt="Normal"; $statucbg="priomedium";
						 }else if($child_task->priority_id==3){
							 $statustxt="High"; $statucbg="priohigh";
						 }else if($child_task->priority_id==4){
							 $statustxt="Urgent"; $statucbg="priourgent";
						 }
			$html .='<div class="for-priority hidden">';
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){
				$html .='<select class="wide selectstatus changepriority changepriority'. $child_task->id .'"  name="changepriority" data_id="'. $child_task->id .'" >';
				$html .='<option data-display="Select" value="" >Select</option>';
				foreach($priorities as $priority){
				$html .='<option value="'. $priority->id .'">'. $priority->name .'</option>';	
				}	
				$html .='</select>';
			} else {
				$html .=(!empty($child_task->priority->name))?$child_task->priority->name:"";
			}
			$html .='</div>';
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){
				$html .='<div class="showforpriorities"  data-id="'. $child_task->id .'">';
				$html .='<div class="selectedoption" id="forprio'. $child_task->id .'"><div class="'. $statucbg .'">'. $statustxt.' </div> </div>';
				$html .='<div class="myoptions"  >'; 
				$html .='<div class="prioritytoselect Select" data-id="0">Select</div>';
					foreach($priorities as $priority){ 
					$html .='<div class="prioritytoselect '. $priority->name.'" data-id="'. $priority->id .'">'. $priority->name .'</div>';
					} 
				$html .='</div>';
				$html .='</div>';
			} else {
				$html .='<div class="showforpriorities">';
				$html .='<div class="selectedoption" id="forprio'. $child_task->id .'"><div class="'. $statucbg .'"> '. $statustxt .' </div> </div>';
				$html .='</div>';
			} 
			$html .='</div>';
			// end priority		
			

			// for start
			$html .='<div class="for-start">';
			$start_date = ($child_task->start_date != null)?date('M, j', strtotime($child_task->start_date)):""; /*echo $start_date;*/ 
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){ 
			$html .='<input class="changeStartDate changeStartDate'.$child_task->id.'" value="'.$start_date.'" data_id="'.$child_task->id.'" placeholder="Add Start Date" />';
			}else{ 
			  $start_date;
			}   
			$html .='</div>'; 
			// end forstart
			// for due
			$html .='<div class="for-due">';
			$due_date = ($child_task->due_date != null)?date('M j', strtotime($child_task->due_date)):""; /* echo $due_date; */
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){ 
			$html .='<input class="changeEndDate changeEndDate'.$child_task->id.' '.$overduetask.'" value="'.$due_date.'" data_id="'.$child_task->id.'" placeholder="Add Due Date" />';
 			}else{ 
			$html .= $due_date;
			} 
			$html .='</div>';
			// end fordue
			$totaltime  = TrakingTime::workingtimeononetaskbyuser($child_task->id,$currentuser->id); 
			$hours = floor($totaltime / 60);
			$mins = $totaltime%60;
			$html .='<div class="for-due for-logged">';
			$html .='<div class="add-sub-logged">'.$hours.'h '.$mins.'m</div>';
			$html .='</div>';
			// time tracker
			$html .='<div class="for-due for-trakingg">'; 
			$html .='<div class="timetracker timetracker'. $child_task->id .'">';
			$html .='<div class="displaystart displaystart'. $child_task->id .'" data-id="'. $child_task->id .'">';
			$html .='<a href="#" class="clickstart" data-id="'. $child_task->id .'" data-projid="'.$id.'"><img class="imgstart" src="'. Url::base(true) .'/images/icons/starttimer.svg"></a>';
			$html .='Start</div>';
			$html .='<div class="displaystop displaystop'. $child_task->id .' hidden">';
			$html .='<a href="#"  class="clickstop" data-id="'. $child_task->id .'" data-projid="'.$id.'"><img class="imgstop" src="'. Url::base(true) .'/images/icons/stop-btn.svg"></a>';
			$html .='Stop</div>';
			$html .='<div class="displaystime timer'. $child_task->id .'" >00:00:00</div>'; 
			$html .='</div>';
			$html .='</div>'; 
			// end time tracker

			
			// for action
			$html .='<div class="for-actions">';
			if($clickable == 'clickable'){$html .='<div class="icondetail convicon" data_project_id="'.$id.'"  data_id="'. $child_task->id .'" servicename="'.$servicename.'"  process_cacndar="'.$process_cacndar.'"></div>';}
			
			$html .='<div class="add-sub-icon bottom-sub-add" data-id="'. $child_task->id .'" data_level="2" data_monthly_service="'.  $data_monthly_service_id .'"
            data_service_id="'.$data_service_id.'" data_allproject_monthly_service="'. $data_allproject_monthly_service .'"
            data_project_id="'. $id .'" servicename="'.$servicename.'"  process_cacndar="'.$process_cacndar.'"></div>';
				if($currentuser->role_id == 1 || $currentuser->role_id == 2){
					if($project_services_task->service->have_process_calendar == 0){
					$html .='<div class="remove-task-icon task-remove"  data-id="'. $child_task->id .'" serviceid="'.$data_service_id.'" data_level="2"  process_cacndar="'.$process_cacndar.'"></div>';
					} 
				}  
			$html .='</div>';
//
			$html .='</div>';
			// start 3eme child
			$child1_tasks = Task::havechild($child_task->id,null,null,null);
			if(!empty($child1_tasks)){ 
			$html .='<ul class="datalevel level_five" data_level="3" data_servicetask="'. $data_service_id .'">';
			foreach($child1_tasks as $key=> $child1_task){
			$html .=' <li class="parentitem'. $child_task->id .' isparent " data_id="'. $child1_task->id .'" data_parent="'. $child_task->id .'" data_servicetask="'. $data_service_id .'" data_order="'. $child1_task->order .'"> ';	
			$html .='<div class="task-row">';
		// 	if($key == 0){
		// 		$html.= '<img class="subtask-img" src="https://adcreatorsmanagementdemo.com.au/images/icons/sub-task-icon.svg">';
		//  }	
			$latestorder = $child1_task->order;					
			$statusdate="";
			$statusoriginale="";
			$overduetask='';
			date_default_timezone_set('Australia/Sydney');
            $time = new \DateTime('now');
            $today = $time->format('Y-m-d');
			if(!empty($child1_task->due_date)){
				if($today > $child1_task->due_date){
				$statusdate="expired";
				$statusoriginale="expired";
				$overduetask='overdue';
				}else{
					$overduetask='overdue';
				}
			}
			if($child1_task->status == 4){ $statusdate="active"; }
			$html .='<div class="'. $statusdate .' ddd for-title '.$clickable.' for-title'. $child1_task->id .' " data_project_id="'. $id .'" data_id="'. $child1_task->id .'" >'; 
			$html .='<div class="for-stage-d-flex">';
			$html .='<div class="sub-task-icon">
				<img class="subtask-img" src="https://adcreatorsmanagementdemo.com.au/images/icons/sub-task-icon.svg">
			</div>';
			$html .='<span class="t-title">';
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){ 
			    $html .= '<input type="text" class="edittext"  placeholder="ADD TASK"  value="'. $child1_task->title. '" data_id="'. $child1_task->id .'" />';
 			} else {
			$html .= $child1_task->title;
			}
			$html .='</span>';
			$html .='</div>';
			$html .='</div>';
			$assignusers  = Task::UserAssignTasks($child1_task->id);
			 
			// show assignees
			$html .='<div class="for-assignees showassignes">';
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){
									$html .='<div class="filter-block forcalendar">';
									$html .='<select class="selecteduser" multiple="multiple">';
									 	   $html .='<optgroup label="All People">';
										   foreach($project_users as $project_user){
										   $url = (!empty($project_user->user->image))?$project_user->user->image:"default.png";
										   if(in_array($project_user->user->id, $assignusers)){
  										    $html .='<option selected="" selected="" value="'.$project_user->user->id.'" data_task_id="'.$child1_task->id.'" data-img="'.$url.'">'.$project_user->user->first_name .' '. $project_user->user->last_name.'</option>'; 
 										   }else {
										    $html .='<option value="'.$project_user->user->id.'" data_task_id="'.$child1_task->id.'" data-img="'.$url.'">'.$project_user->user->first_name .' '. $project_user->user->last_name.'</option>'; 
										   }
 										   //  $html .='<option value="23" selected="" data_task_id="8498" data-img="1575436383.jpg">Abbas A</option>'; 
										   }
							$html .='</select>'; 
			$html .='</div>';
			} else{
			$html .='<div class="users_assign_imagea">'; 
			$assignusers  = Task::ListUserAssignTasks($child1_task->id);
			foreach($assignusers as $listuser){ 
				$html .='<div class="user_assign_image">'; 
				$url = (!empty($listuser->user->image))?Url::base(true)."/uploads/users/".$listuser->user->image:Url::base(true)."/uploads/users/default.png";
 				$html .='<img class="user_assign_image" src="'. $url .'">';
				$html .='</div>';
			} 
			$html .='</div>';
			} 
			$html .='</div>';
			// end assignees
			// show status
			$html .='<div class="for-status">';
			$html .='<select class="hidden selectstatus changestatus changestatus'. $child1_task->id .'" data_id="'. $child1_task->id .'" name="changestatus" style="display: none;">';
			$html .='<option data-display="Select" value="">Select</option>';
			$html .='<option value="0">Select</option>';
			$html .='<option value="1">Working on it</option>';
			$html .='<option value="2">Waiting for review</option>';
			$html .='<option value="3">Stuck</option>';
			$html .='<option value="4">Done</option>';
			$html .='</select>';
			$statustxt="Select"; $statucbg="statusselect";
								 if($child1_task->status==0){
									 $statustxt="Select"; $statucbg="statusselect";
								 }else if($child1_task->status==1){
									 $statustxt="Working on it"; $statucbg="workingonit";
								 }else if($child1_task->status==2){
									 $statustxt="Waiting for review"; $statucbg="Waitingforreview";
								 }else if($child1_task->status==3){
									$statustxt="Stuck"; $statucbg="statusstuck";
								 }else if($child1_task->status==4){
									  $statustxt="Done"; $statucbg="statusdone";
									 
								 }
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){
				$html .='<div class="showforstatus" data-id="'. $child1_task->id .'">';
				$html .='<div class="selectedoption" id="forstatus'. $child1_task->id .'"><div class="'. $statucbg .'">'. $statustxt .' </div> </div>';
				$html .='<div class="myoptions">';
				$html .='<div class="statustoselect optionselect" data-id="0">Select</div>';
				$html .='<div class="statustoselect optionworking" data-id="1">Working on it</div>';
				$html .='<div class="statustoselect optionwaiting" data-id="2">Waiting for review </div>';
				$html .='<div class="statustoselect optionstuck" data-id="3">Stuck</div>';
				$html .='<div class="statustoselect optiondone" data-id="4">Done</div>';
				$html .='</div>';
				$html .='</div>';	
			}else {
				$html .='<div class="showforstatus">';
				$html .='<div class="selectedoption" id="forstatus'. $child1_task->id .'"><div class="'. $statucbg .'"> '. $statustxt .' </div> </div>';
				$html .='</div>';
			}		
 			$html .='</div>';
			// end status
			// show priority
			$html .='<div class="for-priority">';
			$statustxt="Select"; $statucbg="statusselect";
                         if($child1_task->priority_id==1){
							 $statustxt="Low"; $statucbg="priolow";
						 }else if($child1_task->priority_id==2){
							 $statustxt="Normal"; $statucbg="priomedium";
						 }else if($child1_task->priority_id==3){
							 $statustxt="High"; $statucbg="priohigh";
						 }else if($child1_task->priority_id==4){
							 $statustxt="Urgent"; $statucbg="priourgent";
						 }
			$html .='<div class="for-priority hidden">';
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){
				$html .='<select class="wide selectstatus changepriority changepriority'. $child1_task->id .'"  name="changepriority" data_id="'. $child1_task->id .'" >';
				$html .='<option data-display="Select" value="" >Select</option>';
				foreach($priorities as $priority){
				$html .='<option value="'. $priority->id .'" >'. $priority->name .'</option>';	
				}	
				$html .='</select>';
			} else {
				$html .=(!empty($child1_task->priority->name))?$child1_task->priority->name:"";
			}
			$html .='</div>';
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){
				$html .='<div class="showforpriorities"  data-id="'. $child1_task->id .'">';
				$html .='<div class="selectedoption" id="forprio'. $child1_task->id .'"><div class="'. $statucbg .'">'. $statustxt.' </div> </div>';
				$html .='<div class="myoptions"  >'; 
				$html .='<div class="prioritytoselect Select" data-id="0">Select</div>';
					foreach($priorities as $priority){ 
					$html .='<div class="prioritytoselect '. $priority->name.'" data-id="'. $priority->id .'">'. $priority->name .'</div>';
					} 
				$html .='</div>';
				$html .='</div>';
			} else {
				$html .='<div class="showforpriorities">';
				$html .='<div class="selectedoption" id="forprio'. $child1_task->id .'"><div class="'. $statucbg .'"> '. $statustxt .' </div> </div>';
				$html .='</div>';
			} 
			$html .='</div>';
			// end priority		
			// for start
		$html .='<div class="for-start">';
			$start_date = ($child1_task->start_date != null)?date('M, j', strtotime($child1_task->start_date)):""; /*echo $start_date;*/ 
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){ 
			$html .='<input class="changeStartDate changeStartDate'.$child1_task->id.'" value="'.$start_date.'" data_id="'.$child1_task->id.'" placeholder="Add Start Date" />';
			}else{ 
			  $start_date;
			}   
			$html .='</div>'; 
			// end forstart
			// for due
			$html .='<div class="for-due">';
			$due_date = ($child1_task->due_date != null)?date('M j', strtotime($child1_task->due_date)):""; /* echo $due_date; */
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){ 
			$html .='<input class="changeEndDate changeEndDate'.$child1_task->id.'  '.$overduetask.'" value="'.$due_date.'" data_id="'.$child1_task->id.'" placeholder="Add Due Date" />';
 			}else{ 
			$html .= $due_date;
			} 
			$html .='</div>';
			// end fordue
			$totaltime  = TrakingTime::workingtimeononetaskbyuser($child1_task->id,$currentuser->id); 
			$hours = floor($totaltime / 60);
			$mins = $totaltime%60;
			$html .='<div class="for-due for-logged">';
			$html .='<div class="add-sub-logged">'.$hours.'h '.$mins.'m</div>';
			$html .='</div>';
			// time tracker
			$html .='<div class="for-due for-trakingg">'; 
			$html .='<div class="timetracker timetracker'. $child1_task->id .'">';
			$html .='<div class="displaystart displaystart'. $child1_task->id .'" data-id="'. $child1_task->id .'">';
			$html .='<a href="#" class="clickstart" data-id="'. $child1_task->id .'" data-projid="'.$id.'"><img class="imgstart" src="'. Url::base(true) .'/images/icons/starttimer.svg"></a>';
			$html .='Start</div>';
			$html .='<div class="displaystop displaystop'. $child1_task->id .' hidden">';
			$html .='<a href="#"  class="clickstop" data-id="'. $child1_task->id .'" data-projid="'.$id.'"><img class="imgstop" src="'. Url::base(true) .'/images/icons/stop-btn.svg"></a>';
			$html .='Stop</div>';
			$html .='<div class="displaystime timer'. $child1_task->id .'" >00:00:00</div>'; 
			$html .='</div>';
			$html .='</div>'; 
			// end time tracker

			
			// for action
			$html .='<div class="for-actions">';
				if($clickable == 'clickable'){$html .='<div class="icondetail convicon" data_project_id="'.$id.'"  data_id="'. $child1_task->id .'" servicename="'.$servicename.'"></div>';}
			
			//$html .='<div class="add-sub-icon bottom-sub-add" data-id="'. $child1_task->id .'" data_level="1" data_monthly_service="'.  $data_monthly_service_id .'" data_service_id="'.$data_service_id.'" data_allproject_monthly_service="'. $data_allproject_monthly_service .'" data_project_id="'. $id .'"></div>';
				if($currentuser->role_id == 1 || $currentuser->role_id == 2){
					
					$html .='<div class="remove-task-icon task-remove"  data-id="'. $child1_task->id .'" serviceid="'.$data_service_id.'" data_level="3"></div>';
					 
				}  
			$html .='</div>';
				
			$html .='</div>';	
						// start 4eme child
			$child2_tasks = Task::havechild($child1_task->id,null,null,null);
			if(!empty($child2_tasks)){ 
			$html .='<ul class="datalevel level_six" data_level="4" data_servicetask=" '.  $data_service_id  .' ">';
			foreach($child2_tasks as $key=> $child2_task){
			 $html .='<li class="parentitem'.  $child1_task->id .' isparent " data_id="'. $child2_task->id .'" data_parent="'. $child1_task->id .'" data_servicetask="'. $data_service_id .'" data_order="'. $child1_task->order .'">'; 	
			 $html .='<div class="task-row">';
			 $latestorder = $child2_task->order;					
			$statusdate="";
			$statusoriginale="";
			$overduetask='';
			date_default_timezone_set('Australia/Sydney');
            $time = new \DateTime('now');
            $today = $time->format('Y-m-d');
			if(!empty($child2_task->due_date)){
				if($today > $child2_task->due_date){
				$statusdate="expired";
				$statusoriginale="expired";
				$overduetask='overdue';
				}else{
					$overduetask='';
				}
			}
			if($child2_task->status == 4){ $statusdate="active"; }
			$html .='<div class="'. $statusdate .' for-title '.$clickable.' for-title'. $child2_task->id .' " data_project_id="'. $id .'" data_id="'. $child2_task->id .'"  style="width: calc( 98% - 1170px );" >'; 
			$html .='<span class="t-title">';
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){ 
			    $html .= '<input type="text" class="edittext"  placeholder="ADD TASK"  value="'. $child2_task->title. '" data_id="'. $child2_task->id .'" />';
 			} else {
			$html .= $child2_task->title;
			}
			$html .='</span>';
			$html .='</div>';
			$assignusers  = Task::UserAssignTasks($child2_task->id);
			 
			// show assignees
			$html .='<div class="for-assignees showassignes">';
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){
									$html .='<div class="filter-block forcalendar">';
									$html .='<select class="selecteduser" multiple="multiple">';
									 	   $html .='<optgroup label="All People">';
										   foreach($project_users as $project_user){
										   $url = (!empty($project_user->user->image))?$project_user->user->image:"default.png";
										   if(in_array($project_user->user->id, $assignusers)){
  										    $html .='<option selected="" selected="" value="'.$project_user->user->id.'" data_task_id="'.$child2_task->id.'" data-img="'.$url.'">'.$project_user->user->first_name .' '. $project_user->user->last_name.'</option>'; 
 										   }else {
										    $html .='<option value="'.$project_user->user->id.'" data_task_id="'.$child2_task->id.'" data-img="'.$url.'">'.$project_user->user->first_name .' '. $project_user->user->last_name.'</option>'; 
										   }
 										   //  $html .='<option value="23" selected="" data_task_id="8498" data-img="1575436383.jpg">Abbas A</option>'; 
										   }
									$html .='</select>'; 
			$html .='</div>';
			} else{
			$html .='<div class="users_assign_imagea">'; 
			$assignusers  = Task::ListUserAssignTasks($child2_task->id);
			foreach($assignusers as $listuser){ 
				$html .='<div class="user_assign_image">';
				$url = (!empty($listuser->user->image))?Url::base(true)."/uploads/users/".$listuser->user->image:Url::base(true)."/uploads/users/default.png";
				$html .='<img class="user_assign_image" src="'. $url .'">';
				$html .='</div>';
			} 
			$html .='</div>';
			} 
			$html .='</div>';
			// end assignees
			// show status
			$html .='<div class="for-status">';
			$html .='<select class="hidden selectstatus changestatus changestatus'. $child2_task->id .'" data_id="'. $child2_task->id .'" name="changestatus" style="display: none;">';
			$html .='<option data-display="Select" value="">Select</option>';
			$html .='<option value="0">Select</option>';
			$html .='<option value="1">Working on it</option>';
			$html .='<option value="2">Waiting for review</option>';
			$html .='<option value="3">Stuck</option>';
			$html .='<option value="4">Done</option>';
			$html .='</select>';
			$statustxt="Select"; $statucbg="statusselect";
								 if($child2_task->status==0){
									 $statustxt="Select"; $statucbg="statusselect";
								 }else if($child2_task->status==1){
									 $statustxt="Working on it"; $statucbg="workingonit";
								 }else if($child2_task->status==2){
									 $statustxt="Waiting for review"; $statucbg="Waitingforreview";
								 }else if($child2_task->status==3){
									 $statustxt="Stuck"; $statucbg="statusstuck";
								 }else if($child2_task->status==4){
									 $statustxt="Done"; $statucbg="statusdone";
									 
								 }
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){
				$html .='<div class="showforstatus" data-id="'. $child2_task->id .'">';
				$html .='<div class="selectedoption" id="forstatus'. $child2_task->id .'"><div class="'. $statucbg .'">'. $statustxt .' </div> </div>';
				$html .='<div class="myoptions">';
				$html .='<div class="statustoselect optionselect" data-id="0">Select</div>';
				$html .='<div class="statustoselect optionworking" data-id="1">Working on it</div>';
				$html .='<div class="statustoselect optionwaiting" data-id="2">Waiting for review </div>';
				$html .='<div class="statustoselect  optionstuck" data-id="3">Stuck</div>';
				$html .='<div class="statustoselect optiondone" data-id="4">Done</div>';
				$html .='</div>';
				$html .='</div>';	
			}else {
				$html .='<div class="showforstatus">';
				$html .='<div class="selectedoption" id="forstatus'. $child2_task->id .'"><div class="'. $statucbg .'"> '. $statustxt .' </div> </div>';
				$html .='</div>';
			}		
 			$html .='</div>';
			// end status
			// show priority
			$html .='<div class="for-priority">';
			$statustxt="Select"; $statucbg="statusselect";
                         if($child2_task->priority_id==1){
							 $statustxt="Low"; $statucbg="priolow";
						 }else if($child2_task->priority_id==2){
							 $statustxt="Normal"; $statucbg="priomedium";
						 }else if($child2_task->priority_id==3){
							 $statustxt="High"; $statucbg="priohigh";
						 }else if($child2_task->priority_id==4){
							 $statustxt="Urgent"; $statucbg="priourgent";
						 }
			$html .='<div class="for-priority hidden">';
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){
				$html .='<select class="wide selectstatus changepriority changepriority'. $child2_task->id .'"  name="changepriority" data_id="'. $child2_task->id .'" >';
				$html .='<option data-display="Select" value="" >Select</option>';
				foreach($priorities as $priority){
				$html .='<option value="'. $priority->id .'">'. $priority->name .'</option>';	
				}	
				$html .='</select>';
			} else {
				$html .=(!empty($child2_task->priority->name))?$child2_task->priority->name:"";
			}
			$html .='</div>';
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){
				$html .='<div class="showforpriorities"  data-id="'. $child2_task->id .'">';
				$html .='<div class="selectedoption" id="forprio'. $child2_task->id .'"><div class="'. $statucbg .'">'. $statustxt.' </div> </div>';
				$html .='<div class="myoptions"  >'; 
				$html .='<div class="prioritytoselect Select" data-id="0">Select</div>';
					foreach($priorities as $priority){ 
					$html .='<div class="prioritytoselect '. $priority->name.'" data-id="'. $priority->id .'">'. $priority->name .'</div>';
					} 
				$html .='</div>';
				$html .='</div>';
			} else {
				$html .='<div class="showforpriorities">';
				$html .='<div class="selectedoption" id="forprio'. $child2_task->id .'"><div class="'. $statucbg .'"> '. $statustxt .' </div> </div>';
				$html .='</div>';
			} 
			$html .='</div>';
			// end priority		
			// for start
			$html .='<div class="for-start">';
			$start_date = ($child2_task->start_date != null)?date('Y,m,j', strtotime($child2_task->start_date)):"";
			$startedt_date = ($child2_task->start_date != null)?date('M j', strtotime($child2_task->start_date)):""; 
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){ 
			$html .='<input class="hidden changeStartDate changeStartDate'. $child2_task->id .'" autocomplete="off" value="'. $start_date .'" data_id="'. $child2_task->id .'" placeholder="Add Start Date"/>';
			$html .='<input type="text" class="tochangestartdate" data_id="'. $child2_task->id .'" value="'. $startedt_date .'" id="tochangedatestart'. $child2_task->id .'" placeholder="Add Start Date" >';
			$html .='<span class="cleardate startclear startclear'. $child2_task->id .'" data_id="'. $child2_task->id .'" ></span>';
			}else{ 
			  $startedt_date;
			}   
			$html .='</div>'; 
			// end forstart
			// for due
			$html .='<div class="for-due">';
			$due_date = ($child2_task->due_date != null)?date('M j', strtotime($child2_task->due_date)):""; /* echo $due_date; */
			$end_date = ($child2_task->due_date != null)?date('Y,m,j', strtotime($child2_task->due_date)):""; /* echo $due_date; */ 
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){ 
			$html .='<input class="hidden changeEndDate changeEndDate'. $child2_task->id .' '.$overduetask.'" autocomplete="off" value="'. $end_date .'" data_id="'. $child2_task->id .'" placeholder="Add Due Date" />';
			$html .='<input type="text"  placeholder="Add Due Date" class="tochangeenddate" id="tochangeenddate'. $child2_task->id .'" data_id="'. $child2_task->id .'" value="'. $due_date  .'" >';
			$html .='<span class="cleardate endclear endclear'. $child2_task->id .'" data_id="'. $child2_task->id .'" ></span>';
 			}else{ 
			$html .= $due_date;
			} 
			$html .='</div>';
			// end fordue
			$totaltime  = TrakingTime::workingtimeononetaskbyuser($child2_task->id,$currentuser->id); 
			$hours = floor($totaltime / 60);
			$mins = $totaltime%60;
			$html .='<div class="for-due for-logged">';
			$html .='<div class="add-sub-logged">'.$hours.'h '.$mins.'m</div>';
			$html .='</div>';
			
			// time tracker
			$html .='<div class="for-due for-trakingg">'; 
			$html .='<div class="timetracker timetracker'. $child2_task->id .'">';
			$html .='<div class="displaystart displaystart'. $child2_task->id .'" data-id="'. $child2_task->id .'">';
			$html .='<a href="#" class="clickstart" data-id="'. $child2_task->id .'" data-projid="'.$id.'"><img class="imgstart" src="'. Url::base(true) .'/images/icons/starttimer.svg"></a>';
			$html .='Start</div>';
			$html .='<div class="displaystop displaystop'. $child2_task->id .' hidden">';
			$html .='<a href="#"  class="clickstop" data-id="'. $child2_task->id .'" data-projid="'.$id.'"><img class="imgstop" src="'. Url::base(true) .'/images/icons/stop-btn.svg"></a>';
			$html .='Stop</div>';
			$html .='<div class="displaystime timer'. $child2_task->id .'" >00:00:00</div>'; 
			$html .='</div>';
			$html .='</div>'; 
			// end time tracker
			// for action
			$html .='<div class="for-actions">';
	
			if($clickable == 'clickable'){$html .='<div class="icondetail convicon" data_project_id="'.$id.'"  data_id="'. $child2_task->id .'"  process_cacndar="'.$process_cacndar.'"></div>';}
			
			//$html .='<div class="add-sub-icon bottom-sub-add" data-id="'. $child2_task->id .'" data_level="1" data_monthly_service="'.  $data_monthly_service_id .'"></div>';
				if($currentuser->role_id == 1 || $currentuser->role_id == 2){
					
					$html .='<div class="remove-task-icon task-remove"  data-id="'. $child2_task->id .'" serviceid="'.$data_service_id.'" data_level="1"  process_cacndar="'.$process_cacndar.'"></div>';
				
				}  
			$html .='</div>';
																				
			 
			 $html .='</div>';
			 $html .='</li>';
			}
			$html .='</ul>';
			}
			// end 4eme child
			$html .='</li>';	
			}	
			$html .='</ul>';
			}

			
			// end 3eme child		
			$html .='<li>';// end 2em li	
			}	
            
            $html .='</ul>';			
			}	
			// first li
			$html .='</li>'; 
			}
			$html .='</ol>';
			if($currentuser->role_id == 1 || $currentuser->role_id == 2){
				if($process_cacndar == 0){
				$html .='<div class="toadd-task"><a href="javascript://" class="addtask" data_project_id="'. $id .'"   data-serviceid="'. $data_service_id .'" data_allproject_monthly_service="'.$data_allproject_monthly_service.'" data-id="'. $data_allproject_monthly_service . $project_services_task->id .'" data_monthly_id="'. $data_monthly_service_id .'" data_level="1" data_last_li_order="'. $latestorder .'" monthtext="'.$monthtext.'" servicename="'.$servicename.'"  process_cacndar="'.$process_cacndar.'">+ ADD TASKS</a></div>';
				}
			}  
			$html .='</div>'; 
		} else {
			if($process_cacndar == 0){
		 $html .='<div class="toadd-task"><a href="javascript://" class="addtask" data_project_id="'. $id .'"   data-serviceid="'. $data_service_id .'" data_allproject_monthly_service="'.$data_allproject_monthly_service.'" data-id="'. $data_allproject_monthly_service . $project_services_task->id .'" data_monthly_id="'. $data_monthly_service_id .'" data_level="1" data_last_li_order="'. $latestorder .'" monthtext="'.$monthtext.'" servicename="'.$servicename.'"  process_cacndar="'.$process_cacndar.'">+ ADD TASKS</a></div>';
			}
 		} 	
		$html .='</div>';
		$results=['html'=> $html];
		echo json_encode($results);
        exit();
	}
	
	
	public function actionAddarchivemonth(){
		$id = $_POST['id'];
		$userid=\Yii::$app->user->getId();
		$model = ProjectMonthlyService::find()->where(['id'=> $id])->andWhere(['is_archived'=> 0])->one(); $results= array();
		if($model){
			$tasks = Task::find()->where(['project_monthly_service'=> $model->id ])->andwhere('status!=3')->all();
			if($tasks){
				$results = ["result" => "failed"];
			} else {
				$models = ProjectMonthlyService::find()->where(['month'=> $model->month])->andWhere(['year'=> $model->year ])->andWhere(['is_archived'=> 0])->all();
				foreach($models as $onemodel){
				$onemodel->is_archived=1;
				$onemodel->save(false);	
				} 
 				date_default_timezone_set('Australia/Sydney');
 				$monthNum = $model->month;
				$dateObj = DateTime::createFromFormat('!m', $monthNum);
				$monthName = $dateObj->format('F');
				$activity = new ActivityLogs();
				$activity->user_id= $userid;
				$activity->type= 2; 
				$activity->project_id= $model->projectservice->project_id;
				$projectname = $model->projectservice->project->name; 
				$urltask = \Yii::$app->params['baseurl']."/accounts/archivedmonthlytasks?id=". $model->projectservice->project_id ;
 				$activity->message ='Archived <a href="'. $urltask .'">'.  $monthName .' '. $model->year .'</a>';	
				$activity->save(false);
				$results = ["result" => "success"];
 			}
		}
 		echo json_encode($results);
        exit(); 
	}	
	public function actionUnarchivemonth(){
		$id = $_POST['id']; $userid=\Yii::$app->user->getId();
		$model = ProjectMonthlyService::find()->where(['id'=> $id])->andWhere(['is_archived'=> 1])->one(); $results= array();
		if($model){
			$models = ProjectMonthlyService::find()->where(['month'=> $model->month])->andWhere(['year'=> $model->year ])->andWhere(['is_archived'=> 1])->all();
			foreach($models as $onemodel){
				$onemodel->is_archived=0;
				$onemodel->save(false);	
		    }  
			$model->save(false);
			$results = ["result" => "success"]; 
		}
		date_default_timezone_set('Australia/Sydney');
 				$monthNum = $model->month;
				$dateObj = DateTime::createFromFormat('!m', $monthNum);
				$monthName = $dateObj->format('F');
				$activity = new ActivityLogs();
				$activity->user_id= $userid;
				$activity->type= 2; 
				$activity->project_id= $model->projectservice->project_id;
				$projectname = $model->projectservice->project->name; 
				$urltask = \Yii::$app->params['baseurl']."/accounts/monthlytasks?id=". $model->projectservice->project_id ;
 				$activity->message ='Unarchived <a href="'. $urltask .'">'.  $monthName .' '. $model->year .'</a>';	
				$activity->save(false);
		echo json_encode($results);
        exit(); 
	}
	public function actionArchivedmonthlytasks( $id, $name=null){
 		$sortable=1;
		$where="";
		$data_search="";
		$status="";
		$search="";
		$startdate="";
		$enddate="";
		$typecheckbox =[];
		$userid=\Yii::$app->user->getId();
		$currentuser = User::findOne($userid);
		$traking_task = TrakingTime::find()->where('duration = 0')->andWhere('task_id!=0')->andWhere(['user_id'=>$userid])->one();
		if(isset($_GET['notification_id'])){ 
			$notification_id = $_GET['notification_id'];
			$notification = Notifications::find()->where(['id'=>$notification_id])->one();
			if(!empty($notification)){
				$notification->read =1;
				$notification->save(false);
			}
		}
		if (!empty($_GET['date_search'])  ) { 
			$data_search = $_GET['date_search'];
			$sortable=0;
			$daterangearray = explode('-', $data_search);
			$startdate=date("Y,m,d", strtotime($daterangearray[0]));
			$enddate=date("Y,m,d", strtotime($daterangearray[1]));
	
		}
			if (isset($_GET['assigncheckbox']) && !empty($_GET['assigncheckbox'])  ) {
				$sortable=0;
				$arrayassign = $_GET['assigncheckbox'];
				$str = implode (", ", $_GET['assigncheckbox']);
				if (!empty($str)) {
					if(!empty($where)){
						$where .= ' AND assets.user_id IN ('.$str.')';
					}else{
						$where .= 'assets.user_id IN ('.$str.')';
					}
				}
			}
			if (isset($_GET['selectstatus']) && !empty($_GET['selectstatus']) && $_GET['selectstatus']!="Status"   ) {
				$sortable=0;
				$status = $_GET['selectstatus'];
				/*if(!empty($where)){
					$where .= ' AND task.status = '.$status.'';
				}else{
					$where .= 'task.status = '.$status.'';
				}*/
			}
			
			if (isset($_GET['search']) && !empty($_GET['search'])) {
				$sortable=0;
				$search = $_GET['search'];
				/*if(!empty($where)){
					$where .= ' AND assets.title LIKE "%'.$search.'%"';
				}else{
					$where .= 'assets.title LIKE "%'.$search.'%"';
				}*/
			}
			
			if (isset($_GET['typecheckbox']) && !empty($_GET['typecheckbox'])  ) {
				$typecheckbox = $_GET['typecheckbox'];
				//print_r($arrayassign); die();
				$str = implode (", ", $_GET['typecheckbox']);

				if (!empty($str)) {
					if(!empty($where)){
						$where .= ' AND (project_service.service_id IN ('.$str.'))';
					}else{
						$where .= '(project_service.service_id IN ('.$str.'))';
					}
				}
			}
		$project_user = ProjectUser::find()->where(['project_id'=>$id])->andWhere(['user_id'=>$userid])->one();	
		$project_users =  ProjectUser::find()->joinWith(['user'])->where(['project_user.project_id'=>$id])->andWhere(['project_user.status'=>1])->andWhere(['user.deleted'=>0])->andWhere(['user.active'=>1])->all();
		$project_services =  ProjectService::find()->joinWith(['service'])->where(['project_service.project_id'=>$id])->andWhere(['project_service.type'=>1])->orderBy(['project_service.id'=> SORT_DESC])->all();
		$project =  Project::find()->where(['id'=>$id])->one();
		$priorities = Priority::find()->all();
		
	/*	$project_services_tasks = ProjectService::find()->joinWith(['service','project','project.projectuser','task','projectmonthlyservice'])->where($where)->andWhere(['project_service.type'=>1])->andWhere(['project.id'=>$id])->all();*/

		
		$project_monthly_services = ProjectMonthlyService::find()->joinWith(['projectservice','projectservice.service','projectservice.project','projectservice.project.projectuser','projectservice.task'])->where($where)->andWhere(['project_monthly_service.is_archived'=>1 ])->andWhere(['project_service.project_id'=>$id])->groupBy(['project_monthly_service.month','project_monthly_service.year'])->orderBy([ 'project_monthly_service.year'=>SORT_DESC,'project_monthly_service.month' => SORT_DESC])->all();
		$services = Service::find()->where(['type'=>1])->orderBy(['service.popuporders'=> SORT_ASC])->all();
		return $this->render('archivedmonthlytask', ['project'=>$project,'project_users'=>$project_users,'project_services'=>$project_services,'priorities'=>$priorities,
		'data_search'=>$data_search,'status'=>$status,'search'=>$search,'typecheckbox'=>$typecheckbox,'sortable'=>$sortable,'startdate'=>$startdate,
		'enddate'=>$enddate,'currentuser'=>$currentuser,'services'=>$services,'project_monthly_services'=>$project_monthly_services,'where'=>$where,
		'traking_task' => $traking_task, 'project_user'=> $project_user ]); 

	}
	public function actionAdhoctasks($id, $name=null){
		$sortable=1;
		$where="";
		$data_search="";
		$status="";
		$search="";
		$startdate="";
		$enddate="";
		$typecheckbox =[];
		$userid=\Yii::$app->user->getId();
		$currentuser = User::findOne($userid);
		if($currentuser->deleted > 0){ Yii::$app->user->logout(); return $this->redirect(['site/login']); } 
		if (!empty($_GET['date_search'])  ) { 
			$data_search = $_GET['date_search'];
			$sortable=0;
			$daterangearray = explode('-', $data_search);
			$startdate=date("Y,m,d", strtotime($daterangearray[0]));
			$enddate=date("Y,m,d", strtotime($daterangearray[1]));
			
		}
			if (isset($_GET['assigncheckbox']) && !empty($_GET['assigncheckbox'])  ) {
				$sortable=0;
				$arrayassign = $_GET['assigncheckbox'];
				$str = implode (", ", $_GET['assigncheckbox']);
				if (!empty($str)) {
					if(!empty($where)){
						$where .= ' AND assets.user_id IN ('.$str.')';
					}else{
						$where .= 'assets.user_id IN ('.$str.')';
					}
				}
			}
			if (isset($_GET['selectstatus']) && !empty($_GET['selectstatus']) && $_GET['selectstatus']!="Status"   ) {
				$sortable=0;
				$status = $_GET['selectstatus'];
				/*if(!empty($where)){
					$where .= ' AND task.status = '.$status.'';
				}else{
					$where .= 'task.status = '.$status.'';
				}*/
			}
			
			if (isset($_GET['search']) && !empty($_GET['search'])) {
				$sortable=0;
				$search = $_GET['search'];
				/*if(!empty($where)){
					$where .= ' AND assets.title LIKE "%'.$search.'%"';
				}else{
					$where .= 'assets.title LIKE "%'.$search.'%"';
				}*/
			}
			
			if (isset($_GET['typecheckbox']) && !empty($_GET['typecheckbox'])  ) {
				
					$typecheckbox = $_GET['typecheckbox'];
					//print_r($arrayassign); die();
					$str = implode (", ", $_GET['typecheckbox']);

					if (!empty($str)) {
						if(!empty($where)){
							$where .= ' AND (project_service.service_id IN ('.$str.'))';
						}else{
							$where .= '(project_service.service_id IN ('.$str.'))';
						}
					}
			}
			
		$project_users =  ProjectUser::find()->joinWith(['user'])->where(['project_user.project_id'=>$id])->andWhere(['project_user.status'=>1])->andWhere(['user.deleted'=>0])->andWhere(['user.active'=>1])->all();
		$project_services =  ProjectService::find()->joinWith(['service'])->where(['project_service.project_id'=>$id])->andWhere(['project_service.type'=>2])->all();
		$project =  Project::find()->where(['id'=>$id])->one();
		$priorities = Priority::find()->all();
		$services = Service::find()->all();
		
		$project_services_tasks = ProjectService::find()->joinWith(['service','project','project.projectuser','task'])->where($where)->andWhere(['project_service.type'=>2])->andWhere(['project.id'=>$id])->all();

		//$services = Service::find()->all();
		return $this->render('adhoctask', ['project'=>$project,'project_users'=>$project_users,'project_services'=>$project_services,'priorities'=>$priorities,'project_services_tasks'=>$project_services_tasks,'data_search'=>$data_search,'status'=>$status,'search'=>$search,'typecheckbox'=>$typecheckbox,'sortable'=>$sortable,'startdate'=>$startdate,'enddate'=>$enddate,'currentuser'=>$currentuser,'services'=>$services]); 

	}
	public function actionTasks($id){
		$sortable=1;
		$where="";
		$data_search="";
		$status="";
		$search="";
		$startdate="";
		$enddate="";
		$typecheckbox =[];
		if (!empty($_GET['date_search'])  ) { 
			$data_search = $_GET['date_search'];
			$sortable=0;

			$daterangearray = explode('-', $data_search);

			$startdate=date("Y,m,d", strtotime($daterangearray[0]));
			$enddate=date("Y,m,d", strtotime($daterangearray[1]));
			
			/*
			$daterange = $_GET['date_search'];
			$daterangearray = explode('-', $daterange);
			$fromdate = date("Y-m-d", strtotime($daterangearray[0]));
			$todate = date("Y-m-d", strtotime($daterangearray[1]));
			if(!empty($where)){
				$where .= ' AND task.due_date <= "' . $todate . '"  and task.due_date >= "'. $fromdate . '"';
			}else{
				$where .= 'task.due_date <= "' . $todate . '"  and task.due_date >= "'. $fromdate . '"';
			}*/
		}
			if (isset($_GET['assigncheckbox']) && !empty($_GET['assigncheckbox'])  ) {
				$sortable=0;
				$arrayassign = $_GET['assigncheckbox'];
				$str = implode (", ", $_GET['assigncheckbox']);
				if (!empty($str)) {
					if(!empty($where)){
						$where .= ' AND assets.user_id IN ('.$str.')';
					}else{
						$where .= 'assets.user_id IN ('.$str.')';
					}
				}
			}
			if (isset($_GET['selectstatus']) && !empty($_GET['selectstatus']) && $_GET['selectstatus']!="Status"   ) {
				$sortable=0;
				$status = $_GET['selectstatus'];
				/*if(!empty($where)){
					$where .= ' AND task.status = '.$status.'';
				}else{
					$where .= 'task.status = '.$status.'';
				}*/
			}
			
			if (isset($_GET['search']) && !empty($_GET['search'])) {
				$sortable=0;
				$search = $_GET['search'];
				/*if(!empty($where)){
					$where .= ' AND assets.title LIKE "%'.$search.'%"';
				}else{
					$where .= 'assets.title LIKE "%'.$search.'%"';
				}*/
			}
			
			if (isset($_GET['typecheckbox']) && !empty($_GET['typecheckbox'])  ) {
				
					$typecheckbox = $_GET['typecheckbox'];
					//print_r($arrayassign); die();
					$str = implode (", ", $_GET['typecheckbox']);

					if (!empty($str)) {
						if(!empty($where)){
							$where .= ' AND (project_service.service_id IN ('.$str.'))';
						}else{
							$where .= '(project_service.service_id IN ('.$str.'))';
						}
					}
			}
			
		$project_users =  ProjectUser::find()->joinWith(['user'])->where(['project_user.project_id'=>$id])->andWhere(['project_user.status'=>1])->andWhere(['user.deleted'=>0])->andWhere(['user.active'=>1])->all();
		$project_services =  ProjectService::find()->joinWith(['service'])->where(['project_service.project_id'=>$id])->all();
		$project =  Project::find()->where(['id'=>$id])->one();
		$priorities = Priority::find()->all();
		
		$project_services_tasks = ProjectService::find()->joinWith(['project','project.projectuser','task'])->where($where)->andWhere(['project.id'=>$id])->all();
		//$services = Service::find()->all();
		return $this->render('task', ['project'=>$project,'project_users'=>$project_users,'project_services'=>$project_services,'priorities'=>$priorities,'project_services_tasks'=>$project_services_tasks,'data_search'=>$data_search,'status'=>$status,'search'=>$search,'typecheckbox'=>$typecheckbox,'sortable'=>$sortable,'startdate'=>$startdate,'enddate'=>$enddate]); 

	}
	
		public function actionTaskdetail(){
			$model = new Project();
			return $this->render('detail', [ 'model' => $model ]);
		}
		
		public function actionProjectcalendar(){
			return $this->render('calendar');
		}
		public function actionDashboard($id=null, $name=null){
			if(isset($_GET['notification_id'])){
				$notification_id = $_GET['notification_id'];
				$notification = Notifications::find()->where(['id'=>$notification_id])->one();
				if(!empty($notification)){
					$notification->read =1;
					$notification->save(false);
				}
			}
			$time = new \DateTime('now');
			$today = $time->format('Y-m-d');
			if (!Yii::$app->user->isGuest) {
			$userid=\Yii::$app->user->getId();
			//$user = User::findOne($userid);
			$currentuser = User::findOne($userid);
			if($currentuser->deleted > 0){ Yii::$app->user->logout(); return $this->redirect(['site/login']); }
			//$posts = Post::find()->joinWith(['user'=> function ($q){ $q->from('user u'); },'task.projectservice.project','comment'])->andWhere(['project.id'=>$id])->groupBy(['post.id'])->orderBy("greatest(`post`.`created_date`, coalesce(max(`comment`.`created_date`), `post`.`created_date`)) DESC")->all();
//			$posts = Post::find()->joinWith(['task.projectservice.project'])->andWhere(['project.id'=>$id])->orderBy("`post`.`created_date` DESC")->limit(60)->all();
			$posts = Post::find()
				->joinWith(['task.projectservice.project'], true, 'INNER JOIN')
				->with(['user'=> function ($q){ $q->from('user u'); }, 'task', 'task.projectservice', 'task.projectservice.service', 'task.projectservice.project', 'postfile', 'comment', 'comment.user', 'comment.commentfile'])
				->andWhere(['project.id'=>$id])
				->orderBy("`post`.`created_date` DESC")
				->limit(60)
				->all();
			$project =  Project::find()->where(['id'=>$id])->one();

			return $this->render('dashboard', ['project'=>$project, 'posts'=>$posts, 'currentuser'=>$currentuser ]);
			}else{
				$this->redirect(['site/login']);
			}
		
		}

		public function actionActivity($id, $name=null ){
			if(isset($_GET['notification_id'])){
				$notification_id = $_GET['notification_id'];
				$notification = Notifications::find()->where(['id'=>$notification_id])->one();
				if(!empty($notification)){
					$notification->read =1;
					$notification->save(false);
				}
			}
			$time = new \DateTime('now');
			$today = $time->format('Y-m-d');
			if (!Yii::$app->user->isGuest) {
			$userid=\Yii::$app->user->getId();
			//$user = User::findOne($userid);
			$currentuser = User::findOne($userid);
			if($currentuser->deleted > 0){ Yii::$app->user->logout(); return $this->redirect(['site/login']); }
			//$posts = Post::find()->joinWith(['user'=> function ($q){ $q->from('user u'); },'task.projectservice.project','comment'])->andWhere(['project.id'=>$id])->groupBy(['post.id'])->orderBy("greatest(`post`.`created_date`, coalesce(max(`comment`.`created_date`), `post`.`created_date`)) DESC")->all();
//			$posts = Post::find()->joinWith(['task.projectservice.project'])->andWhere(['project.id'=>$id])->orderBy("`post`.`created_date` DESC")->limit(60)->all();
			$posts = Post::find()
				->joinWith(['task.projectservice.project'], true, 'INNER JOIN')
				->with(['user'=> function ($q){ $q->from('user u'); }, 'task', 'task.projectservice', 'task.projectservice.service', 'task.projectservice.project', 'postfile', 'comment', 'comment.user', 'comment.commentfile'])
				->andWhere(['project.id'=>$id])
				->orderBy("`post`.`created_date` DESC")
				->limit(60)
				->all();
			$project =  Project::find()->where(['id'=>$id])->one();

			return $this->render('activities', ['project'=>$project, 'posts'=>$posts, 'currentuser'=>$currentuser ]);
			}else{
				$this->redirect(['site/login']);
			}
		}
	    public function actionShowteamsection(){
		$id= $_POST['id'];
		$userid=\Yii::$app->user->getId();
	    $currentuser = User::findOne($userid);	
		$project_users =  ProjectUser::find()->joinWith(['user'])->where(['project_user.project_id'=>$id])->andWhere(['project_user.status'=>1])->andWhere(['user.deleted'=>0])->andWhere(['user.active'=>1])->all();
	    $project =  Project::find()->where(['id'=>$id])->one();
		$html ='';
		// header
		
		// showing users
		$html .='<div class="team-section" id="team">';
		$html .='<div class="list-members">';
		$html .='<div class="textheader">People ';
		if($currentuser->role_id == 1 || $currentuser->role_id == 2){
		$html .='<div class="buttoninvite"><a href="#" class="button_inv" >+ Add</a></div>';	
		}
		$html .= '</div>';
		foreach($project_users as $project_user){
		$url = (!empty($project_user->user->image))?Url::base(true)."/uploads/users/".$project_user->user->image:Url::base(true)."/uploads/users/default.png"; 
	    $name = "";			
	    $name .= (!empty($project_user->user->first_name)?$project_user->user->first_name." ":"");
	    $name .= (!empty($project_user->user->last_name)?$project_user->user->last_name:"");	
		$html .='<div class="combination-one combination'. $project_user->user->id .'" >';
		$html .='<div class="post-left"><img class="user-profile" src="'. $url .'"> <span class="name-user">'. $name .'</span></div>';
		$html .='<div class="post-right">';
		$html .='<div class="top-info styleofname"></div>';
		 if($currentuser->role_id == 1){
		 $html .='<div class="delete_user" ><a href="javascript://" class="icon_delete_user" data_id="'. $project_user->user->id .'"></a></div>';
		 }
		$html .='</div>';
		$html .='</div>';
		}
		$html .='</div>';
			
		$html .='</div>';
		// oneoff budget
		$html .='<div class="team-section" id="oneoffbudget">';
		$html .='<div class="buggetdetail"> ';
		$html .='<div class="buggetdetail-left">';
		$html .='<div class="buggetdetailtitle">ONE-OFF ACTUAL FEES TO DATE</div>';
		$actualfees = Project::oneoffactualfees($project->id);
		$html .='<div class="actual">$'. number_format((float)$actualfees, 2, '.', '') .'  </div>';
		$html .='</div>';
		$html .='<div class="buggetdetail-right">';
		$html .='<div class="buggetdetailtitle">ONE- OFF REMAINING</div>';
		$remainingactualfees = $project->budget -  $actualfees;
		$perc = 0;
		if($project->budget == 0){
			$perc = 0;
		}else if($remainingactualfees < 0){$perc = 100; 
		
		}else if($remainingactualfees >= 0 && $actualfees > 0){
			$perc = (int)($project->budget / $actualfees) *100;
		}
		$html .='<div class="remaining '. ($remainingactualfees < 0)?'negative':'' .'">$'. number_format((float)$remainingactualfees, 2, '.', '')  .'</div>';
		$html .='</div>';
		$html .='<div class="displaybar"> <div class="filledbar '. ($remainingactualfees < 0)?'negative':'' .'" style="width: '. $perc .'%"></div>  </div>';
		$html .='</div>';
		$html .='</div>';
		// 
		$html .='<div class="team-section" id="monthlybudget">';
		$html .='<div class="monthlybudgettop">';
		$html .='<div class="monthlybudgettoptitle">Monthly Budget: $'. $project->monthly_budget .'</div>';
		       $countmonthly = ProjectMonthlyService::countmonthly($project->id);
			   $totalmonthlybudget = $countmonthly * $project->monthly_budget;
		$html .='<div class="monthlytitles">Total Budget: <span class="budgetvalue">$'. number_format((float)$totalmonthlybudget, 2, '.', '') .'</span></div>';	
        $totalmonthlyactualfees = Project::totalmonthlyactualfees($project->id);
		$html .='<div class="monthlytitles">Total Actual Fees: <span class="budgetvalue">$'. number_format((float)$totalmonthlyactualfees, 2, '.', '') .'</span></div>';
		$remainingactualfeestotalmonthly = $project->monthly_budget -  $totalmonthlyactualfees;
		$html .='<div class="monthlytitles">Total Remaining: <span class="budgetvalue '. ($remainingactualfeestotalmonthly < 0)?'negative':'' .'>"> $'. number_format((float)$remainingactualfeestotalmonthly, 2, '.', '') .'</span></div>';
		$html .='</div>';

		$allmonthlybudgetdetails = ProjectMonthlyService::allmonthlybudgetdetails($project->id,$project->monthly_budget);
 		$html .='<div class="displaymonths">'. $allmonthlybudgetdetails .'</div>'; 
		$html .='</div>';
		$results = [
            "html" => $html, 
        ];
        echo json_encode($results);
        exit(); 
		}
		public function actionShowoverduetaskbyuser(){
 		$id= $_POST['id'];
		$userid=\Yii::$app->user->getId();
	    $user = User::findOne($userid);	
	    $time = new \DateTime('now');
		$today = $time->format('Y-m-d');
		$priorities = Priority::find()->all(); $html="";
		$overduetasks = Task::find()->joinWith(['projectservice.project','taskuser'])->where(['project.id'=>$id])->andWhere('task.status != 3')->andWhere(['<', 'task.due_date', $today])->andWhere(['task_user.user_id'=>$userid])->orderBy(['task.status_update' => SORT_DESC])->all();
	     
		foreach($overduetasks as $task){ 
		if($task->projectservice->type == 0){
				$url = Url::to(['accounts/oneofftasks/','id'=>$task->projectservice->project_id, 'name'=> $task->projectservice->project->name ,'task'=>$task->id]);
				}else if($task->projectservice->type == 1){
					$url = Url::to(['accounts/monthlytasks/','id'=>$task->projectservice->project_id, 'name'=> $task->projectservice->project->name ,'task'=>$task->id]);
				}else{
					$url = Url::to(['accounts/adhoctasks/','id'=>$task->projectservice->project_id, 'name'=> $task->projectservice->project->name ,'task'=>$task->id]);
				}
				$statustxt="Pending"; 
				 if($task->status==0){
					 $statustxt="Pending"; 
				 }else if($task->status==1){
					 $statustxt="Working on it";
				 }else if($task->status==2){
					 $statustxt="Waiting for review";
				 }else if($task->status==3){
					 $statustxt="Stuck";
				 }else if($task->status==4){
					 $statustxt="Done";
				 }
		
		$html .='<tr>';
		// show title
		$html .='<td class="project-title">';
		$html .='<a class="aoverdue-title" href="'. $url .'">'. $task->projectservice->project->name .' - '. $task->title .'</a>';
		$html .='</td>';
		// show status
		$html .='<td>';
		$html .='<div class="for-status">';
		    $statustxt="Select"; $statucbg="statusselect";
			if($task->status==0){
				$statustxt="Select"; $statucbg="statusselect";
			}else if($task->status==1){
				$statustxt="Working on it"; $statucbg="workingonit";
			}else if($task->status==2){
				$statustxt="Waiting for review"; $statucbg="Waitingforreview";
			}else if($task->status==3){
				$statustxt="Stuck"; $statucbg="statusstuck";
			}else if($task->status==4){
				$statustxt="Done"; $statucbg="statusdone";
				
			}
		$html .='<div class="showforstatus" data-id="'. $task->id .'">';
		$html .='<div class="selectedoption" id="forstatus'. $task->id .'"><div class="'. $statucbg .'">'. $statustxt .' </div> </div>';
		$html .='<div class="myoptions">';
		$html .='<div class="statustoselect optionselect" data-id="0">Select</div>';
		$html .='<div class="statustoselect optionworking" data-id="1">Working on it</div>';
		$html .='<div class="statustoselect optionwaiting" data-id="2">Waiting for review </div>';
		$html .='<div class="statustoselect optionstuck" data-id="3">Stuck</div>';
		$html .='<div class="statustoselect optiondone" data-id="4">Done</div>';
		
		$html .='</div>';
 		$html .='</div>';
 		$html .='</div>';
		$html .='</td>';
		// show priotity
		$html .='<td>';
		$html .='<div class="for-priority">';
		$statustxt="Select"; $statucbg="statusselect";
            if($task->priority_id==1){
				$statustxt="Low"; $statucbg="priolow";
		    }else if($task->priority_id==2){
				$statustxt="Normal"; $statucbg="priomedium";
			}else if($task->priority_id==3){
				$statustxt="High"; $statucbg="priohigh";
			}else if($task->priority_id==4){
				$statustxt="Urgent"; $statucbg="priourgent";
			}
		$html .='<select class="hidden selectstatus changepriority changepriority'. $task->id .'"  name="changepriority" data_id="'. $task->id .'" >';
		$html .='<option data-display="Select" value="" >Select</option>';
		foreach($priorities as $priority){
			$html .='<option value="'. $priority->id .'" '. ($task->priority_id == $priority->id)?"selected":"" .'>'. $priority->name .'</option>';
		}	
		$html .='</select>';
		$html .='<div class="showforpriorities"  data-id="'. $task->id .'">';
		$html .='<div class="selectedoption" id="forprio'. $task->id .'"><div class="'. $statucbg .'"> '. $statustxt .'</div> </div>';
		$html .='<div class="myoptions">';
		$html .='<div class="prioritytoselect Select" data-id="0">Select</div>';
		foreach($priorities as $priority){
			$html .='<div class="prioritytoselect '. $priority->name .'" data-id="'. $priority->id .'">'. $priority->name .'</div>';
		}	
		$html .='</div>';
 		$html .='</div>';
 		$html .='</div>';
		$html .='</td>';
		
		// show start
		$start_date = date('M j', strtotime($task->start_date));
		$html .='<td>'. $start_date . '</td>';
		$due_date = date('M j', strtotime($task->due_date));
		$html .='<td>'. $due_date . '</td>';
		$html .='</tr>'; 
		}
		
		$html .="<script type='text/javascript'>
        var tablehours;
	    tablehours= $('#tasks').DataTable({
        'aaSorting': [],
		'searching': false,
		'responsive' : true,
        'paging': false,  
		'bInfo': false,
        },
	    );
        </script>";

		$results = [
            "html" => $html, 
        ];
        echo json_encode($results);
        exit(); 
		}
        public function actionShowalloverduetasks(){
 		$id= $_POST['id'];
 	    $time = new \DateTime('now');
		$today = $time->format('Y-m-d');
		$priorities = Priority::find()->all(); $html="";
		$alloverduetasks = Task::find()->joinWith(['projectservice.project'])->where(['project.id'=>$id])->andWhere('task.status != 3')->andWhere(['<', 'task.due_date', $today])->orderBy(['task.status_update' => SORT_DESC])->all();
		$userid=\Yii::$app->user->getId();
		$currentuser = User::findOne($userid);
		$project_users =  ProjectUser::find()->joinWith(['user'])->where(['project_user.project_id'=>$id])->andWhere(['project_user.status'=>1])->andWhere(['user.deleted'=>0])->andWhere(['user.active'=>1])->all();
		
	    foreach($alloverduetasks as $task){ 
		if($task->projectservice->type == 0){
				$url = Url::to(['accounts/oneofftasks/','id'=>$task->projectservice->project_id, 'name'=> $task->projectservice->project->name ,'task'=>$task->id]);
				}else if($task->projectservice->type == 1){
					$url = Url::to(['accounts/monthlytasks/','id'=>$task->projectservice->project_id, 'name'=> $task->projectservice->project->name ,'task'=>$task->id]);
				}else{
					$url = Url::to(['accounts/adhoctasks/','id'=>$task->projectservice->project_id, 'name'=> $task->projectservice->project->name ,'task'=>$task->id]);
				}
				$statustxt="Pending";
				 if($task->status==0){
					 $statustxt="Pending"; 
				 }else if($task->status==1){
					 $statustxt="Working on it";
				 }else if($task->status==2){
					 $statustxt="Waiting for review";
				 }else if($task->status==3){
					 $statustxt="Stuck";
				 }else if($task->status==4){
					 $statustxt="Done";
				 }
		
		$html .='<tr>';
		// show title
		$html .='<td class="project-title">';
		$html .='<a class="aoverdue-title" href="'. $url .'">'. $task->projectservice->project->name .' - '. $task->title .'</a>';
		$html .='</td>';


		$assignusers  = Task::UserAssignTasks($task->id);
			 
		// show assignees
		$html .='<td>';
		$html .='<div class="for-assignees showassignes ">';
		if($currentuser->role_id == 1 || $currentuser->role_id == 2){
								$html .='<div class="filter-block forcalendar">';
								$html .='<select class="selecteduser" multiple="multiple">';
										$html .='<optgroup label="All People">';
									   foreach($project_users as $project_user){
									   $url = (!empty($project_user->user->image))?$project_user->user->image:"default.png";
									   if(in_array($project_user->user->id, $assignusers)){
										  $html .='<option selected="" selected="" value="'.$project_user->user->id.'" data_task_id="'.$task->id.'" data-img="'.$url.'">'.$project_user->user->first_name .' '. $project_user->user->last_name.'</option>'; 
										}else {
										$html .='<option value="'.$project_user->user->id.'" data_task_id="'.$task->id.'" data-img="'.$url.'">'.$project_user->user->first_name .' '. $project_user->user->last_name.'</option>'; 
									   }
										//  $html .='<option value="23" selected="" data_task_id="8498" data-img="1575436383.jpg">Abbas A</option>'; 
									   }
								$html .='</select>'; 
		$html .='</div>';
		} else{
		$html .='<div class="users_assign_imagea">'; 
		$assignusers  = Task::ListUserAssignTasks($task->id);
		foreach($assignusers as $listuser){ 
			$html .='<div class="user_assign_image">';
			$url = (!empty($listuser->user->image))?Url::base(true)."/uploads/users/".$listuser->user->image:Url::base(true)."/uploads/users/default.png";
			$html .='<img class="user_assign_image" src="'. $url .'">';
			$html .='</div>';
		} 
		$html .='</div>';
		} 
		$html .='</div>';
		$html .='</td>';
		// end assignees
			// show status
		$html .='<td>';
		$html .='<div class="for-status">'; 
		    $statustxt="Select"; $statucbg="statusselect";
			if($task->status==0){
				$statustxt="Select"; $statucbg="statusselect";
			}else if($task->status==1){
				$statustxt="Working on it"; $statucbg="workingonit";
			}else if($task->status==2){
				$statustxt="Waiting for review"; $statucbg="Waitingforreview";
			}else if($task->status==3){
				$statustxt="Stuck"; $statucbg="statusstuck";
			}else if($task->status==4){
				$statustxt="Done"; $statucbg="statusdone";
				
			}
		$html .='<div class="showforstatus" data-id="'. $task->id .'">';
		$html .='<div class="selectedoption" id="forstatus'. $task->id .'"><div class="'. $statucbg .'">'. $statustxt .' </div> </div>';
		$html .='<div class="myoptions">';
		$html .='<div class="statustoselect optionselect" data-id="0">Select</div>';
		$html .='<div class="statustoselect optionworking" data-id="1">Working on it</div>';
		$html .='<div class="statustoselect optionwaiting" data-id="2">Waiting for review </div>';
		$html .='<div class="statustoselect optionstuck" data-id="3">Stuck</div>';
		$html .='<div class="statustoselect optiondone" data-id="4">Done</div>';
		$html .='</div>';
 		$html .='</div>';
 		$html .='</div>';
		$html .='</td>';
		
		// show priotity
		$html .='<td>';
		$html .='<div class="for-priority">';
		$statustxt="Select"; $statucbg="statusselect";
            if($task->priority_id==1){
				$statustxt="Low"; $statucbg="priolow";
		    }else if($task->priority_id==2){
				$statustxt="Normal"; $statucbg="priomedium";
			}else if($task->priority_id==3){
				$statustxt="High"; $statucbg="priohigh";
			}else if($task->priority_id==4){
				$statustxt="Urgent"; $statucbg="priourgent";
			}
		$html .='<select class="hidden selectstatus changepriority changepriority'. $task->id .'"  name="changepriority" data_id="'. $task->id .'" >';
		$html .='<option data-display="Select" value="" >Select</option>';
		foreach($priorities as $priority){
			$html .='<option value="'. $priority->id .'" '. ($task->priority_id == $priority->id)?"selected":"" .'>'. $priority->name .'</option>';
		}	
		$html .='</select>';
		$html .='<div class="showforpriorities"  data-id="'. $task->id .'">';
		$html .='<div class="selectedoption" id="forprio'. $task->id .'"><div class="'. $statucbg .'"> '. $statustxt .'</div> </div>';
		$html .='<div class="myoptions">';
		$html .='<div class="prioritytoselect Select" data-id="0">Select</div>';
		foreach($priorities as $priority){
			$html .='<div class="prioritytoselect '. $priority->name .'" data-id="'. $priority->id .'">'. $priority->name .'</div>';
		}	
		$html .='</div>';
 		$html .='</div>';
 		$html .='</div>';
		$html .='</td>';
	
		// show start
		$start_date = date('M j', strtotime($task->start_date));
		$html .='<td>'. $start_date . '</td>';
		$due_date = date('M j', strtotime($task->due_date));
		$html .='<td>'. $due_date . '</td>';
		$html .='</tr>';
		}
 		$results = [
            "html" => $html,
        ];
        echo json_encode($results);
        exit(); 
		}
		
		public function actionTimelineview($id){
			if (!Yii::$app->user->isGuest) {
				$userid=\Yii::$app->user->getId();
				$user = User::findOne($userid);
				if($user->deleted > 0){ Yii::$app->user->logout(); return $this->redirect(['login']); }
				$where1 = '';
				$where2 = '';
				$where3 = '';
				$where4 = '';
				$where5 = '';
				$where = '';
				$time = new \DateTime('now');
				$today = $time->format('Y-m-d');
				$fromdate="";
				$todate="";
				$userselected = 0;
				$project_id = 0;
				$from_to1="";
				$from_to2="";
				$from_to3="";
				$from_to4="";
				$from_to5="";
				$order="";
				$startdate="";
				$enddate="";
				$typecheckbox =[];
				$endquery =0;
				$endquery1 =0;
				$endquery2 =0;
				$endquery3 =0;
				$endquery4 =0;
				$endquery5 =0;
	
			
				if (!empty($_GET['date_search'])  ) {
					$daterange = $_GET['date_search'];
					$daterangearray = explode('-', $daterange);
					$startdate=date("Y,m,d", strtotime($daterangearray[0]));
					$enddate=date("Y,m,d", strtotime($daterangearray[1]));
					$enddatesearch=date("Y-m-d", strtotime($daterangearray[1]));
					$fromdate = date("Y-m-d", strtotime($daterangearray[0]));
					//$todate = date("Y-m-d", strtotime($daterangearray[1]));
					$todate = date("Y-m-d", strtotime($fromdate. "+14 day"));
					$enddate1 = $todate;
					//$where .= 'task.due_date <= "' . $todate . '"  and task.due_date >= "'. $fromdate . '"';
					$fromdate_text = date('M j', strtotime($fromdate));
					$todate_text = date('M j', strtotime($todate));
					$from_to1=$fromdate_text." - ".$todate_text;
		 
					if($todate >= $enddatesearch ){ 
						if($endquery == 1){
							$endquery1 = 1;
						}
						$where1 .= 'task.due_date <= "' . $enddate . '"  and task.due_date >= "'. $fromdate . '"';
						$endquery=1;
					}else{
						$where1 .= 'task.due_date <= "' . $todate . '"  and task.due_date >= "'. $fromdate . '"';
					}
	
					
					$fromdate =  date("Y-m-d", strtotime($todate. "+1 day"));
					$todate = date("Y-m-d", strtotime($todate. "+14 day"));
					$enddate2 = $todate;
					if($todate >= $enddatesearch ){ 
						if($endquery == 1){
							$endquery2 = 1;
						}
						$where2 .= 'task.due_date <= "' . $enddatesearch . '"  and task.due_date >= "'. $fromdate . '"';
						$endquery=1;
					}else{
						$where2 .= 'task.due_date <= "' . $todate . '"  and task.due_date >= "'. $fromdate . '"';
					}

					$fromdate_text = date('M j', strtotime($fromdate));
					$todate_text = date('M j', strtotime($todate));
					$from_to2=$fromdate_text." - ".$todate_text;
					
					$fromdate = date("Y-m-d", strtotime($todate. "+1 day"));
					$todate = date("Y-m-d", strtotime($todate. "+14 day"));
					$enddate3 = $todate;
					if($todate >= $enddatesearch ){
						if($endquery == 1){
							$endquery3 = 1;
						}
						$where3 .= 'task.due_date <= "' . $enddatesearch . '"  and task.due_date >= "'. $fromdate . '"';
						$endquery=1;
					}else{
						$where3 .= 'task.due_date <= "' . $todate . '"  and task.due_date >= "'. $fromdate . '"';
					}


					$fromdate_text = date('M j', strtotime($fromdate));
					$todate_text = date('M j', strtotime($todate));
					$from_to3=$fromdate_text." - ".$todate_text;
					
					$fromdate = date("Y-m-d", strtotime($todate. "+1 day"));
					$todate = date("Y-m-d", strtotime($todate. "+14 day"));
					$enddate4 = $todate;
					if($todate >= $enddatesearch ){
						if($endquery == 1){
							$endquery4 = 1;
						}
						$where4 .= 'task.due_date <= "' . $enddatesearch . '"  and task.due_date >= "'. $fromdate . '"';
						$endquery=1;
					}else{
						$where4 .= 'task.due_date <= "' . $todate . '"  and task.due_date >= "'. $fromdate . '"';
					}

					$fromdate_text = date('M j', strtotime($fromdate));
					$todate_text = date('M j', strtotime($todate));
					$from_to4=$fromdate_text." - ".$todate_text;
					
					$fromdate = date("Y-m-d", strtotime($todate. "+1 day"));
					$todate = date("Y-m-d", strtotime($todate. "+14 day"));
					$enddate5 = $todate;
					if($todate >= $enddatesearch ){ 
						if($endquery == 1){
							$endquery5 = 1;
						}
						$where5 .= 'task.due_date <= "' . $enddatesearch . '"  and task.due_date >= "'. $fromdate . '"';
						$endquery=1;
					}else{
						$where5 .= 'task.due_date <= "' . $todate . '"  and task.due_date >= "'. $fromdate . '"';
					}

					
					$fromdate_text = date('M j', strtotime($fromdate));
					$todate_text = date('M j', strtotime($todate));
					$from_to5=$fromdate_text." - ".$todate_text;
					
				}else{
					$startdate=date("Y-m-d", strtotime($today));
					$enddate=date("Y,m,d", strtotime($today. "+70 day"));
					
					
					$fromdate = date("Y-m-d", strtotime($today));
					$todate = date("Y-m-d", strtotime($fromdate. "+14 day"));
					$enddate1 = $todate;
					$where1 .= 'task.due_date <= "' . $todate . '"  and task.due_date >= "'. $fromdate . '"';
					$fromdate_text = date('M j', strtotime($fromdate));
					$todate_text = date('M j', strtotime($todate));
					$from_to1=$fromdate_text." - ".$todate_text;
					
					
					
					$fromdate = $todate;
					$todate = date("Y-m-d", strtotime($fromdate. "+14 day"));
					$enddate2 = $todate;
					$where2 .= 'task.due_date <= "' . $todate . '"  and task.due_date >= "'. $fromdate . '"';
					$fromdate_text = date('M j', strtotime($fromdate));
					$todate_text = date('M j', strtotime($todate));
					$from_to2=$fromdate_text." - ".$todate_text;
					
										
					
					$fromdate = $todate;
					$todate = date("Y-m-d", strtotime($fromdate. "+14 day"));
					$enddate3 = $todate;
					$where3 .= 'task.due_date <= "' . $todate . '"  and task.due_date >= "'. $fromdate . '"';
					$fromdate_text = date('M j', strtotime($fromdate));
					$todate_text = date('M j', strtotime($todate));
					$from_to3=$fromdate_text." - ".$todate_text;

					
					$fromdate = $todate;
					$todate = date("Y-m-d", strtotime($fromdate. "+14 day"));
					$enddate4 = $todate;
					$where4 .= 'task.due_date <= "' . $todate . '"  and task.due_date >= "'. $fromdate . '"';
					$fromdate_text = date('M j', strtotime($fromdate));
					$todate_text = date('M j', strtotime($todate));
					$from_to4=$fromdate_text." - ".$todate_text;
					
					
					
					$fromdate = $todate;
					$todate = date("Y-m-d", strtotime($fromdate. "+14 day"));
					$enddate5 = $todate;
					$where5 .= 'task.due_date <= "' . $todate . '"  and task.due_date >= "'. $fromdate . '"';
					$fromdate_text = date('M j', strtotime($fromdate));
					$todate_text = date('M j', strtotime($todate));
					$from_to5=$fromdate_text." - ".$todate_text;
					


					
					

					

					/*
					$startdate=date("Y-m-d", strtotime("-70 day"));
					$enddate=date("Y,m,d", strtotime($today));
					
					
					$fromdate = date("Y-m-d", strtotime("-14 day"));
					$todate = $today;
					

					
					$enddate5 = $todate;
					$where5 .= 'task.due_date <= "' . $todate . '"  and task.due_date >= "'. $fromdate . '"';
					$fromdate_text = date('M j', strtotime($fromdate));
					$todate_text = date('M j', strtotime($todate));
					$from_to5=$fromdate_text." - ".$todate_text;
					
					$todate = date("Y-m-d", strtotime($fromdate. "-1 day"));
					$fromdate = date("Y-m-d", strtotime($fromdate. "-14 day"));
					$enddate4 = $todate;
					$where4 .= 'task.due_date <= "' . $todate . '"  and task.due_date >= "'. $fromdate . '"';
					$fromdate_text = date('M j', strtotime($fromdate));
					$todate_text = date('M j', strtotime($todate));
					$from_to4=$fromdate_text." - ".$todate_text;
					
					
					$todate = date("Y-m-d", strtotime($fromdate. "-1 day"));
					$fromdate = date("Y-m-d", strtotime($fromdate. "-14 day"));
					$enddate3 = $todate;
					$where3 .= 'task.due_date <= "' . $todate . '"  and task.due_date >= "'. $fromdate . '"';
					$fromdate_text = date('M j', strtotime($fromdate));
					$todate_text = date('M j', strtotime($todate));
					$from_to3=$fromdate_text." - ".$todate_text;
					
					
					$todate = date("Y-m-d", strtotime($fromdate. "-1 day"));
					$fromdate = date("Y-m-d", strtotime($fromdate. "-14 day"));
					$enddate2 = $todate;
					$where2 .= 'task.due_date <= "' . $todate . '"  and task.due_date >= "'. $fromdate . '"';
					$fromdate_text = date('M j', strtotime($fromdate));
					$todate_text = date('M j', strtotime($todate));
					$from_to2=$fromdate_text." - ".$todate_text;
					
					$todate = date("Y-m-d", strtotime($fromdate. "-1 day"));
					$fromdate = date("Y-m-d", strtotime($fromdate. "-14 day"));
					$enddate1 = $todate;
					$where1 .= 'task.due_date <= "' . $todate . '"  and task.due_date >= "'. $fromdate . '"';
					$fromdate_text = date('M j', strtotime($fromdate));
					$todate_text = date('M j', strtotime($todate));
					$from_to1=$fromdate_text." - ".$todate_text;*/
				}	
				
				// 7a jib 5 queries kel wehde betjeble la 2 weeks
			
				$project_users =  ProjectUser::find()->joinWith(['user'])->where(['project_user.project_id'=>$id])->andWhere(['project_user.status'=>1])->andWhere(['user.deleted'=>0])->andWhere(['user.active'=>1])->all();
				$project_services =  ProjectService::find()->joinWith(['service'])->where(['project_service.project_id'=>$id])->all();
				$project =  Project::find()->where(['id'=>$id])->one();
				$priorities = Priority::find()->all();


				$status="";
				if (isset($_GET['selectstatus']) && !empty($_GET['selectstatus'])  ) {
					$status = $_GET['selectstatus']; 
					$statuscondition =0;
					if($status == 100){
						$statuscondition = 0 ;
					}else{
						$statuscondition =$status;
					}
					
					if(!empty($where1)){
						$where1 .= ' AND task.status = '.$statuscondition.'';
					}else{
						$where1 .= 'task.status = '.$statuscondition.'';
					}
					if(!empty($where2)){
						$where2 .= ' AND task.status = '.$statuscondition.'';
					}else{
						$where2 .= 'task.status = '.$statuscondition.'';
					}
					if(!empty($where3)){
						$where3 .= ' AND task.status = '.$statuscondition.'';
					}else{
						$where3 .= 'task.status = '.$statuscondition.'';
					}
					if(!empty($where4)){
						$where4 .= ' AND task.status = '.$statuscondition.'';
					}else{
						$where4 .= 'task.status = '.$statuscondition.'';
					}
					if(!empty($where5)){
						$where5 .= ' AND task.status = '.$statuscondition.'';
					}else{
						$where5 .= 'task.status = '.$statuscondition.'';
					}
				}
					
				if (isset($_GET['typecheckbox']) && !empty($_GET['typecheckbox'])  ) {
					$typecheckbox = $_GET['typecheckbox'];
					$str = implode (", ", $_GET['typecheckbox']);

					if (!empty($str)) {
						if(!empty($where1)){
							$where1 .= ' AND (project_service.service_id IN ('.$str.'))';
						}else{
							$where1 .= '(project_service.service_id IN ('.$str.'))';
						}
						if(!empty($where2)){
							$where2 .= ' AND (project_service.service_id IN ('.$str.'))';
						}else{
							$where2 .= '(project_service.service_id IN ('.$str.'))';
						}
						if(!empty($where3)){
							$where3 .= ' AND (project_service.service_id IN ('.$str.'))';
						}else{
							$where3 .= '(project_service.service_id IN ('.$str.'))';
						}
						if(!empty($where4)){
							$where4 .= ' AND (project_service.service_id IN ('.$str.'))';
						}else{
							$where4 .= '(project_service.service_id IN ('.$str.'))';
						}
						if(!empty($where5)){
							$where5 .= ' AND (project_service.service_id IN ('.$str.'))';
						}else{
							$where5 .= '(project_service.service_id IN ('.$str.'))';
						}
					}
				}
				

				
				if (isset($_GET['order']) && !empty($_GET['order'])  ) {
					$order=$_GET['order'];
					if($order == "startdateasc"){
						if($endquery1 == 1){ $tasks1 = "";}else{
							$tasks1 = Task::find()->joinWith(['trakingtime','projectservice','projectservice.service','projectservice.project','projectservice.project.projectuser'])->where($where1)->andWhere(['project.id'=>$id])->orderBy(['task.start_date' => SORT_ASC])->all();}
						if($endquery2 == 1){	$tasks2 = "";
						}else{	$tasks2 = Task::find()->joinWith(['trakingtime','projectservice','projectservice.service','projectservice.project','projectservice.project.projectuser'])->where($where2)->andWhere(['project.id'=>$id])->orderBy(['task.start_date' => SORT_ASC])->all();
						}
						if($endquery3 == 1){	$tasks3 = "";
						}else{ $tasks3 = Task::find()->joinWith(['trakingtime','projectservice','projectservice.service','projectservice.project','projectservice.project.projectuser'])->where($where3)->andWhere(['project.id'=>$id])->orderBy(['task.start_date' => SORT_ASC])->all(); }
						if($endquery4 == 1){
						$tasks4 = "";
						}else{	$tasks4 = Task::find()->joinWith(['trakingtime','projectservice','projectservice.service','projectservice.project','projectservice.project.projectuser'])->where($where4)->andWhere(['project.id'=>$id])->orderBy(['task.start_date' => SORT_ASC])->all();}
						if($endquery5 == 1){
							$tasks5 = "";
						}else{	$tasks5 = Task::find()->joinWith(['trakingtime','projectservice','projectservice.service','projectservice.project','projectservice.project.projectuser'])->where($where5)->andWhere(['project.id'=>$id])->orderBy(['task.start_date' => SORT_ASC])->all();}
					}else if($order == "startdatedesc"){
						if($endquery1 == 1){ $tasks1 = "";}else{
							$tasks1 = Task::find()->joinWith(['trakingtime','projectservice','projectservice.service','projectservice.project','projectservice.project.projectuser'])->where($where1)->andWhere(['project.id'=>$id])->orderBy(['task.start_date' => SORT_DESC])->all();}
						if($endquery2 == 1){	$tasks2 = "";
						}else{	$tasks2 = Task::find()->joinWith(['trakingtime','projectservice','projectservice.service','projectservice.project','projectservice.project.projectuser'])->where($where2)->andWhere(['project.id'=>$id])->orderBy(['task.start_date' => SORT_DESC])->all();
						}
						if($endquery3 == 1){	$tasks3 = "";
						}else{ $tasks3 = Task::find()->joinWith(['trakingtime','projectservice','projectservice.service','projectservice.project','projectservice.project.projectuser'])->where($where3)->andWhere(['project.id'=>$id])->orderBy(['task.start_date' => SORT_DESC])->all(); }
						if($endquery4 == 1){
						$tasks4 = "";
						}else{	$tasks4 = Task::find()->joinWith(['trakingtime','projectservice','projectservice.service','projectservice.project','projectservice.project.projectuser'])->where($where4)->andWhere(['project.id'=>$id])->orderBy(['task.start_date' => SORT_DESC])->all();}
						if($endquery5 == 1){
							$tasks5 = "";
						}else{	$tasks5 = Task::find()->joinWith(['trakingtime','projectservice','projectservice.service','projectservice.project','projectservice.project.projectuser'])->where($where5)->andWhere(['project.id'=>$id])->orderBy(['task.start_date' => SORT_DESC])->all();}
					}else if($order == "duedateasc"){
						if($endquery1 == 1){ $tasks1 = "";}else{
							$tasks1 = Task::find()->joinWith(['trakingtime','projectservice','projectservice.service','projectservice.project','projectservice.project.projectuser'])->where($where1)->andWhere(['project.id'=>$id])->orderBy(['task.due_date' => SORT_ASC])->all();}
						if($endquery2 == 1){	$tasks2 = "";
						}else{	$tasks2 = Task::find()->joinWith(['trakingtime','projectservice','projectservice.service','projectservice.project','projectservice.project.projectuser'])->where($where2)->andWhere(['project.id'=>$id])->orderBy(['task.due_date' => SORT_ASC])->all();
						}
						if($endquery3 == 1){	$tasks3 = "";
						}else{ $tasks3 = Task::find()->joinWith(['trakingtime','projectservice','projectservice.service','projectservice.project','projectservice.project.projectuser'])->where($where3)->andWhere(['project.id'=>$id])->orderBy(['task.due_date' => SORT_ASC])->all(); }
						if($endquery4 == 1){
						$tasks4 = "";
						}else{	$tasks4 = Task::find()->joinWith(['trakingtime','projectservice','projectservice.service','projectservice.project','projectservice.project.projectuser'])->where($where4)->andWhere(['project.id'=>$id])->orderBy(['task.due_date' => SORT_ASC])->all();}
						if($endquery5 == 1){
							$tasks5 = "";
						}else{	$tasks5 = Task::find()->joinWith(['trakingtime','projectservice','projectservice.service','projectservice.project','projectservice.project.projectuser'])->where($where5)->andWhere(['project.id'=>$id])->orderBy(['task.due_date' => SORT_ASC])->all();}
					}else if($order == "duedatedesc"){
						if($endquery1 == 1){ $tasks1 = "";}else{
							$tasks1 = Task::find()->joinWith(['trakingtime','projectservice','projectservice.service','projectservice.project','projectservice.project.projectuser'])->where($where1)->andWhere(['project.id'=>$id])->orderBy(['task.due_date' => SORT_DESC])->all();}
						if($endquery2 == 1){	$tasks2 = "";
						}else{	$tasks2 = Task::find()->joinWith(['trakingtime','projectservice','projectservice.service','projectservice.project','projectservice.project.projectuser'])->where($where2)->andWhere(['project.id'=>$id])->orderBy(['task.due_date' => SORT_DESC])->all();
						}
						if($endquery3 == 1){	$tasks3 = "";
						}else{ $tasks3 = Task::find()->joinWith(['trakingtime','projectservice','projectservice.service','projectservice.project','projectservice.project.projectuser'])->where($where3)->andWhere(['project.id'=>$id])->orderBy(['task.due_date' => SORT_DESC])->all(); }
						if($endquery4 == 1){
						$tasks4 = "";
						}else{	$tasks4 = Task::find()->joinWith(['trakingtime','projectservice','projectservice.service','projectservice.project','projectservice.project.projectuser'])->where($where4)->andWhere(['project.id'=>$id])->orderBy(['task.due_date' => SORT_DESC])->all();}
						if($endquery5 == 1){
							$tasks5 = "";
						}else{	$tasks5 = Task::find()->joinWith(['trakingtime','projectservice','projectservice.service','projectservice.project','projectservice.project.projectuser'])->where($where5)->andWhere(['project.id'=>$id])->orderBy(['task.due_date' => SORT_DESC])->all();}
					}else{
						if($endquery1 == 1){ $tasks1 = "";}else{
							$tasks1 = Task::find()->joinWith(['trakingtime','projectservice','projectservice.service','projectservice.project','projectservice.project.projectuser'])->where($where1)->andWhere(['project.id'=>$id])->orderBy(['task.order' => SORT_ASC])->all();}
						if($endquery2 == 1){	$tasks2 = "";
						}else{	$tasks2 = Task::find()->joinWith(['trakingtime','projectservice','projectservice.service','projectservice.project','projectservice.project.projectuser'])->where($where2)->andWhere(['project.id'=>$id])->orderBy(['task.order' => SORT_ASC])->all();
						}
						if($endquery3 == 1){	$tasks3 = "";
						}else{ $tasks3 = Task::find()->joinWith(['trakingtime','projectservice','projectservice.service','projectservice.project','projectservice.project.projectuser'])->where($where3)->andWhere(['project.id'=>$id])->orderBy(['task.order' => SORT_ASC])->all(); }
						if($endquery4 == 1){
						$tasks4 = "";
						}else{	$tasks4 = Task::find()->joinWith(['trakingtime','projectservice','projectservice.service','projectservice.project','projectservice.project.projectuser'])->where($where4)->andWhere(['project.id'=>$id])->orderBy(['task.order' => SORT_ASC])->all();}
						if($endquery5 == 1){
							$tasks5 = "";
						}else{	$tasks5 = Task::find()->joinWith(['trakingtime','projectservice','projectservice.service','projectservice.project','projectservice.project.projectuser'])->where($where5)->andWhere(['project.id'=>$id])->orderBy(['task.order' => SORT_ASC])->all();}
					}

					
				}else{
					if($endquery1 == 1){ $tasks1 = "";}else{
						$tasks1 = Task::find()->joinWith(['trakingtime','projectservice','projectservice.service','projectservice.project','projectservice.project.projectuser'])->where($where1)->andWhere(['project.id'=>$id])->orderBy(['task.order' => SORT_ASC])->all();}
					if($endquery2 == 1){	$tasks2 = "";
					}else{	$tasks2 = Task::find()->joinWith(['trakingtime','projectservice','projectservice.service','projectservice.project','projectservice.project.projectuser'])->where($where2)->andWhere(['project.id'=>$id])->orderBy(['task.order' => SORT_ASC])->all();
					}
					if($endquery3 == 1){	$tasks3 = "";
					}else{ $tasks3 = Task::find()->joinWith(['trakingtime','projectservice','projectservice.service','projectservice.project','projectservice.project.projectuser'])->where($where3)->andWhere(['project.id'=>$id])->orderBy(['task.order' => SORT_ASC])->all(); }
					if($endquery4 == 1){
					$tasks4 = "";
					}else{	$tasks4 = Task::find()->joinWith(['trakingtime','projectservice','projectservice.service','projectservice.project','projectservice.project.projectuser'])->where($where4)->andWhere(['project.id'=>$id])->orderBy(['task.order' => SORT_ASC])->all();}
					if($endquery5 == 1){
						$tasks5 = "";
					}else{	$tasks5 = Task::find()->joinWith(['trakingtime','projectservice','projectservice.service','projectservice.project','projectservice.project.projectuser'])->where($where5)->andWhere(['project.id'=>$id])->orderBy(['task.order' => SORT_ASC])->all();}
					
				}

			
				return $this->render('timelineview', ['project'=>$project,'project_users'=>$project_users,'project_services'=>$project_services,'priorities'=>$priorities,'tasks1'=>$tasks1,'tasks2'=>$tasks2,'tasks3'=>$tasks3,'tasks4'=>$tasks4,'tasks5'=>$tasks5,'from_to1'=>$from_to1,'from_to2'=>$from_to2,'from_to3'=>$from_to3,'from_to4'=>$from_to4,'from_to5'=>$from_to5,'enddate1'=>$enddate1,'enddate2'=>$enddate2,'enddate3'=>$enddate3,'enddate4'=>$enddate4,'enddate5'=>$enddate5,'status'=>$status,'typecheckbox'=>$typecheckbox,'order'=>$order,'startdate'=>$startdate,'enddate'=>$enddate,'currentuser'=>$user]); 
			}else{
					$this->redirect(['site/login']);
			}
		}
		
	public function actionCalendar($id, $name=null){ 
		if(isset($_GET['notification_id'])){ 
			$notification_id = $_GET['notification_id'];
			$notification = Notifications::find()->where(['id'=>$notification_id])->one();
			if(!empty($notification)){
				$notification->read =1;
				$notification->save(false);
			}
		}
		if (!Yii::$app->user->isGuest) {
		$userid=\Yii::$app->user->getId();
		$currentuser = User::findOne($userid);
		if($currentuser->deleted > 0){ Yii::$app->user->logout(); return $this->redirect(['site/login']); } 
		$project =  Project::find()->andWhere(['id'=>$id])->one();
		$allusers = ProjectUser::find()->joinWith(['user'])->andWhere(['project_user.project_id'=>$id])->andWhere(['user.deleted'=>0])->andWhere(['user.active'=>1])->groupBy(['project_user.user_id'])->all();
		$priorities = Priority::find()->all();
		return $this->render('calendar', ['project'=>$project,'allusers'=>$allusers,'priorities'=>$priorities,'currentuser'=>$currentuser]); 
		}else{
			$this->redirect(['site/login']);
		}
	}
	
	


	
	public function actionDetails($id, $name=null){
		$categories = Category::find()->all();
		$services = Service::find()->all();
		$model =  Project::find()->andWhere(['id'=>$id])->one();
		$arraydata = array();
		$month = date('m');
		$year = date('Y');
		$time = new \DateTime('now');
		$today = $time->format('Y-m-d');
		$firstdate =  date('Y-m-01', strtotime($today));

		$lastdate =  date('Y-m-t', strtotime($today));
		$userid=\Yii::$app->user->getId();
		$currentuser = User::findOne($userid);
		if($currentuser->deleted > 0){ Yii::$app->user->logout(); return $this->redirect(['site/login']); } 
	   if ($model->load(Yii::$app->request->post())) {
			if($model->agency_id == null || empty($model->agency_id )){
				$model->agency_id  =0;
			}
		   $projectservices="";
			if(isset($_POST['services']) && count($_POST['services']) > 0){
				
				$projectservices = $_POST['services'];
				
				$checkservice = Project::isAvailableProjectServices($id,$projectservices);
				if($checkservice){
					$oldprojectservices = ProjectService::find()->where(['project_id'=>$id])->all();
					// if checkservice == true taht mean i can remove project sevices that not include in the array $projectservices
					if(!empty($projectservices)){
						// hon bade e3mol delete la kel l services cz mafi wala service checked
						foreach($oldprojectservices as $oldprojectservice){
							// iza l l service moch mawjoude bade em7e l tasks l related 3laya w em7i l service products
							if (!in_array($oldprojectservice->service_id, $projectservices)){   
								Task::deleteAll(['project_service_id' => $oldprojectservice->id]);
								ProjectMonthlyService::deleteAll(['project_service_id' => $oldprojectservice->id]);
								$oldprojectservice->delete(false);
							}
						}
					}else{
						if(!empty($oldprojectservices)){
							foreach($oldprojectservices as $oldprojectservice){
								if (!in_array($oldprojectservice->service_id, $projectservices)){
									// iza l l service moch mawjoude bade em7e l tasks l related 3laya w em7i l service products
									Task::deleteAll(['project_service_id' => $oldprojectservice->id]);
									ProjectMonthlyService::deleteAll(['project_service_id' => $oldprojectservice->id]);
									$oldprojectservice->delete(false);
								}
							}
						}
					}
				}else{
					$model->addError('errormessage', 'You should remove tasks before remove an active service');
					return $this->render('detail', [ 'model' => $model,'services'=>$services,'currentuser'=>$currentuser,'categories'=>$categories ]);
				}
				
				// hon 3am erja3 7ett l data b array, w ta erja3 chouf bel projectservices yalli 3emelloun check chou fi services na2sin zidoun 3al project services
				$oldprojectservicesafterdelete = ProjectService::find()->where(['project_id'=>$id])->all();
				foreach($oldprojectservicesafterdelete as $oldprojectservice){
					array_push($arraydata, $oldprojectservice->service_id);
				}
				
				for($i=0; $i < count($projectservices); $i++){
					// 3am chouf l services yalli 3emelloun check iza ma mawjoudin bel array yalli 7atet fiya l project service tab3oune kirmel zido
					if (!in_array($projectservices[$i], $arraydata)){
						$project_monthly_service=0;
						
						$service = Service::findOne($projectservices[$i]);
						// hon ebade zid l project service ma3 l task template
						// bade chouf iza hayde monthly service or no
						if(!empty($service) && $service->type==1){
							$projservice = new ProjectService();
							$projservice->project_id = $id;
							$projservice->service_id = $projectservices[$i];
							$projservice->type = $service->type;
							$projservice->save(false);
							
							$projmonthservice = new ProjectMonthlyService();
							$projmonthservice->project_service_id = $projservice->id;
							$projmonthservice->month = $month;
							$projmonthservice->year = $year;
							$projmonthservice->start_date = $firstdate;
							$projmonthservice->due_date = $lastdate;
							
							$projmonthservice->save(false);
							$project_monthly_service = $projmonthservice->id;
						}else{
							$projservice = new ProjectService();
							$projservice->project_id = $id;
							$projservice->service_id = $projectservices[$i];
							$projservice->type = $service->type;
							$projservice->save(false);
						}
						$templates = TemplateTask::find()->andWhere(['service_id'=>$projservice->service_id])->andWhere(['template_task_id'=>0])->all();
						if(!empty($templates)){
							foreach($templates as $template){
								
								$task = new Task();
								$task->project_service_id = $projservice->id;
								$task->project_monthly_service = $project_monthly_service;
								$task->title = $template->title;
								//$task->start_date = $firstdate;
								//$task->due_date = $lastdate;
								$task->start_date = null;
								$task->due_date = null;
								$task->order = $template->order;
								$task->level =$template->level;
								$task->priority_id =0;
								$task->status = 0;
								$task->parent_id = 0;
								$task->save(false);
								
								$childtemplates = TemplateTask::find()->where(['service_id'=>$projservice->service_id])->andWhere(['template_task_id'=>$template->id])->all();
								if(!empty($childtemplates)){
									foreach($childtemplates as $childtemplate){
										$childtask = new Task();
										$childtask->project_service_id = $projservice->id;
										$childtask->project_monthly_service = $project_monthly_service;
										$childtask->title = $childtemplate->title;
										//$childtask->start_date = $firstdate;
										$childtask->start_date = null;
										//$childtask->due_date = $lastdate;
										$childtask->due_date = null;
										$childtask->order = $childtemplate->order;
										$childtask->level =$childtemplate->level;
										$childtask->priority_id =0;
										$childtask->status = 0;
										$childtask->parent_id = $task->id;
										$childtask->save(false);
									}				
								}	
							}
						}
					}
				}
			}else{
				//hon bade e3mol delete la kel l services	
				$checkservice = Project::isAvailableProjectServices($id,$projectservices);
				if($checkservice){
					$oldprojectservices = ProjectService::find()->where(['project_id'=>$id])->all();
					// if checkservice == true taht mean i can remove project sevices that not include in the array $projectservices
					if(!empty($oldprojectservices)){
						foreach($oldprojectservices as $oldprojectservice){
							// iza l l service moch mawjoude bade em7e l tasks l related 3laya w em7i l service products
							Task::deleteAll(['project_service_id' => $oldprojectservice->id]);
							$oldprojectservice->delete(false);
						}
					}
				}else{
					$model->addError('errormessage', 'You should remove tasks before remove an active service');
					return $this->render('detail', [ 'model' => $model,'services'=>$services,'currentuser'=>$currentuser,'categories'=>$categories ]);
				}
				
			}
			if(isset($_POST['start_date']) && !empty($_POST['start_date'])){
				$start_date = date('Y-m-d', strtotime($_POST['start_date']));
				$model->start_date =$start_date;
			}
			if(isset($_POST['end_date']) && !empty($_POST['end_date'])){
				$end_date = date('Y-m-d', strtotime($_POST['end_date']));
				$model->end_date =$end_date;
			}
			if(isset($_POST['currency']) && !empty($_POST['currency'])){
				$model->currency =$_POST['currency'];
			} 
			 
			if(isset($_POST['expences']) && !empty($_POST['expences'])){
				$model->include_expences =1;
			} else {
				$model->include_expences =0;
			}
			$model->save(false); 
			ProjectCategory::deleteAll(['project_id' => $model->id]);
			//if($model->agency_id == null || empty($model->agency_id ) || $model->agency_id == 0){
				if(isset($_POST['categories']) && count($_POST['categories']) > 0){
					$categorieslist = $_POST['categories'];
					if(!empty($categorieslist)){
						for($i=0; $i < count($categorieslist); $i++){
							$projcategory = new ProjectCategory();
							$projcategory->project_id = $model->id;
							$projcategory->category_id = $categorieslist[$i];
							$projcategory->save(false);
						}
					}
				}
			//}
		
	   }
	  // $model->addError('errormessage', 'Email already exists!');
	   return $this->render('detail', [ 'model' => $model,'services'=>$services,'currentuser'=>$currentuser,'categories'=>$categories ]);
	}
	
	 

 
	public function actionDeleteuser()
	{
		$user_id = $_POST["user_id"];
		$project_id = $_POST["project_id"];
		$project_user =ProjectUser::find()->where(['user_id' => $user_id])->andWhere(['project_id' => $project_id])->one();
		if(!empty($project_user)){
			$project_user->delete(false);
			return "success";
		}else{
			return "error";
		}

		return "error";
	}
	
	public function actionAssets($id, $name=null){
		
			$userid=\Yii::$app->user->getId();
			$user = User::findOne($userid);
 			if($user->deleted > 0){ Yii::$app->user->logout(); return $this->redirect(['site/login']); } 
			$where = '';
			$time = new \DateTime('now');
			$today = $time->format('Y-m-d');
			$fromdate="";
			$todate="";
			$userselected = 0;
			$project_id = 0;
			$arrayassign =[];
			$status="";
			$startdate="";
			$enddate="";
			if (isset($_GET['date_search']) && !empty($_GET['date_search'])  ) {
				$daterange = $_GET['date_search'];
				$daterangearray = explode('-', $daterange);
				$fromdate = date("Y-m-d", strtotime($daterangearray[0]));
				$todate = date("Y-m-d", strtotime($daterangearray[1]));
				$startdate=date("Y,m,d", strtotime($daterangearray[0]));
				$enddate=date("Y,m,d", strtotime($daterangearray[1]));
				if(!empty($where)){
					$where .= ' AND assets.end_date <= "' . $todate . '"  and assets.end_date >= "'. $fromdate . '"';
				}else{
					$where .= 'assets.end_date <= "' . $todate . '"  and assets.end_date >= "'. $fromdate . '"';
				}
			}else{
				/*$fromdate = date("Y-m-d", strtotime("-6 day"));
				$todate = $today;
				$startdate="";
				$enddate="";
				if(!empty($where)){
					$where .= ' AND assets.end_date <= "' . $todate . '"  and assets.end_date >= "'. $fromdate . '"';
				}else{
					$where .= 'assets.end_date <= "' . $todate . '"  and assets.end_date >= "'. $fromdate . '"';
				}*/
			}	
			if (isset($_GET['assigncheckbox']) && !empty($_GET['assigncheckbox'])  ) {
				$arrayassign = $_GET['assigncheckbox'];
				$str = implode (", ", $_GET['assigncheckbox']);
				if (!empty($str)) {
					if(!empty($where)){
						$where .= ' AND assets.user_id IN ('.$str.')';
					}else{
						$where .= 'assets.user_id IN ('.$str.')';
					}
				}
			}
			if (isset($_GET['selectstatus']) && !empty($_GET['selectstatus'])  ) {
				$status = $_GET['selectstatus'];
				$statuscondition =0;
				if($status == 100){
					$statuscondition = 0 ;
				}else{
					$statuscondition =$status;
				}
				if(!empty($where)){
					$where .= ' AND assets.status = '.$statuscondition.'';
				}else{
					$where .= 'assets.status = '.$statuscondition.'';
				}
			}
			
			if (isset($_GET['search']) && !empty($_GET['search'])) {
				$search = $_GET['search'];
				if(!empty($where)){
					$where .= ' AND assets.title LIKE "%'.$search.'%"';
				}else{
					$where .= 'assets.title LIKE "%'.$search.'%"';
				}
			}
			
			
						
		if(isset($_GET['orders']) && !empty($_GET['orders'])){
			$order=$_GET['orders'];
			if($order == "startdateasc"){
				$assets = Assets::find()->joinWith(['assetsfile'])->where($where)->andWhere(['project_id'=>$id])->orderBy(['assets.start_date' => SORT_ASC])->all();
			}else if($order == "startdatedesc"){
				$assets = Assets::find()->joinWith(['assetsfile'])->where($where)->andWhere(['project_id'=>$id])->orderBy(['assets.start_date' => SORT_DESC])->all();
			}else if($order == "enddateasc"){
				$assets = Assets::find()->joinWith(['assetsfile'])->where($where)->andWhere(['project_id'=>$id])->orderBy(['assets.end_date' => SORT_ASC])->all();
			}else if($order == "enddatsdesc"){
				$assets = Assets::find()->joinWith(['assetsfile'])->where($where)->andWhere(['project_id'=>$id])->orderBy(['assets.end_date' => SORT_DESC])->all();
			}else if($order == "nameasc"){
				$assets = Assets::find()->joinWith(['assetsfile'])->where($where)->andWhere(['project_id'=>$id])->orderBy(['assets.title' => SORT_ASC])->all();
			}else if($order == "namedesc"){
				$assets = Assets::find()->joinWith(['assetsfile'])->where($where)->andWhere(['project_id'=>$id])->orderBy(['assets.title' => SORT_DESC])->all();
			}else{
				$assets = Assets::find()->joinWith(['assetsfile'])->where($where)->andWhere(['project_id'=>$id])->all();
			}
		}else{
			$assets = Assets::find()->joinWith(['assetsfile'])->where($where)->andWhere(['project_id'=>$id])->all();
		}

			
		$project_services =  ProjectService::find()->joinWith(['service'])->where(['project_service.project_id'=>$id])->all();
		$project_users =  ProjectUser::find()->joinWith(['user'])->where(['project_user.project_id'=>$id])->andWhere(['project_user.status'=>1])->all();

		$project =  Project::find()->andWhere(['id'=>$id])->one();
		
		 return $this->render('assets', ['assets' => $assets,'project'=>$project,'project_users'=>$project_users,'project_services'=>$project_services,'arrayassign'=>$arrayassign,'status'=>$status,'startdate'=>$startdate,'enddate'=>$enddate,'currentuser'=>$user]);
		 
	}
	
	public function actionFiles($id, $name=null){ 
			$userid=\Yii::$app->user->getId();
			$user = User::findOne($userid);
			$where = '';
			$where2 = '';
			$time = new \DateTime('now');
			$today = $time->format('Y-m-d');
			$fromdate="";
			$todate="";
			$userselected = 0;
			$project_id = 0;
			$arrayassign =[];
			$type =[];
			$status="";
			$userid=\Yii::$app->user->getId();
			$currentuser = User::findOne($userid);
			if (isset($_GET['date_search']) && !empty($_GET['date_search'])  ) {

				
				$daterange = $_GET['date_search'];
				$daterangearray = explode('-', $daterange);
				$fromdate = date("Y-m-d", strtotime($daterangearray[0]));
				$todate = date("Y-m-d", strtotime($daterangearray[1]));
				
					$startdate=date("Y,m,d", strtotime($daterangearray[0]));
					$enddate=date("Y,m,d", strtotime($daterangearray[1]));
				if(!empty($where)){
					$where .= ' AND DATE(post_file.created_date) <= "' . $todate . '"  and DATE(post_file.created_date) >= "'. $fromdate . '"';
				}else{
					$where .= 'DATE(post_file.created_date) <= "' . $todate . '"  and DATE(post_file.created_date) >= "'. $fromdate . '"';
				}
				if(!empty($where2)){
					$where2 .= ' AND DATE(comment_file.created_date) <= "' . $todate . '"  and DATE(comment_file.created_date) >= "'. $fromdate . '"';
				}else{
					$where2 .= 'DATE(comment_file.created_date) <= "' . $todate . '"  and DATE(comment_file.created_date) >= "'. $fromdate . '"';
				}
			}else{
				
			$startdate="";
			$enddate="";
				$fromdate = date("Y-m-d", strtotime("-30 day"));
				$todate = $today;
				if(!empty($where)){
					$where .= ' AND DATE(post_file.created_date) <= "' . $todate . '"  and DATE(post_file.created_date) >= "'. $fromdate . '"';
				}else{
					$where .= 'DATE(post_file.created_date) <= "' . $todate . '"  and DATE(post_file.created_date) >= "'. $fromdate . '"';
				}
				if(!empty($where2)){
					$where2 .= ' AND DATE(comment_file.created_date) <= "' . $todate . '"  and DATE(comment_file.created_date) >= "'. $fromdate . '"';
				}else{
					$where2 .= 'DATE(comment_file.created_date) <= "' . $todate . '"  and DATE(comment_file.created_date) >= "'. $fromdate . '"';
				}
			}
			
			/*if (isset($_GET['assigncheckbox']) && !empty($_GET['assigncheckbox'])  ) {
				$arrayassign = $_GET['assigncheckbox'];
				//print_r($arrayassign); die();
				$str = implode (", ", $_GET['assigncheckbox']);

				if (!empty($str)) {
					if(!empty($where)){
						$where .= ' AND ((post.user_id IN ('.$str.')) OR (comment.user_id IN ('.$str.')))';
					}else{
						$where .= '((post.user_id IN ('.$str.')) OR (comment.user_id IN ('.$str.')))';
					}
				}
			}*/
			
			/*if (isset($_GET['type']) && !empty($_GET['type'])  ) {
				$type = $_GET['type'];
				//print_r($arrayassign); die();
				$strtype = implode (", ", $_GET['type']);

				if (!empty($str)) {
					if(!empty($where)){
						$where .= ' AND project_service.service_id IN ('.$strtype.')';
					}else{
						$where .= 'project_service.service_id IN ('.$strtype.')';
					}
				}
			}*/
			
			
		/*	if (isset($_GET['selectstatus']) && !empty($_GET['selectstatus'])) {
				$status = $_GET['selectstatus'];
				
				if(!empty($where)){
					$where .= ' AND task.status = '.$status.'';
				}else{
					$where .= 'task.status = '.$status.'';
				}
			}
			*/
		/*	if (isset($_GET['search']) && !empty($_GET['search'])) {
				$search = $_GET['search'];
				if(!empty($where)){
					$where .= ' AND task.title LIKE "%'.$search.'%"';
				}else{
					$where .= 'task.title LIKE "%'.$search.'%"';
				}
			}*/
			
			
			
		/*if(isset($_GET['orderfiles']) && !empty($_GET['orderfiles'])){
			$order=$_GET['orderfiles'];

			if($order == "startasc"){
				$tasks = Task::find()->joinWith(['projectservice','post','post.postfile','post.comment','post.comment.commentfile'])->where($where)->andWhere(['project_service.project_id'=> $id])->groupBy(['task.id'])->orderBy(['task.start_date' => SORT_ASC])->all();
			}else if($order == "startdesc"){
				$tasks = Task::find()->joinWith(['projectservice','post','post.postfile','post.comment','post.comment.commentfile'])->where($where)->andWhere(['project_service.project_id'=> $id])->groupBy(['task.id'])->orderBy(['task.start_date' => SORT_DESC])->all();
			}else if($order == "endasc"){
				$tasks = Task::find()->joinWith(['projectservice','post','post.postfile','post.comment','post.comment.commentfile'])->where($where)->andWhere(['project_service.project_id'=> $id])->groupBy(['task.id'])->orderBy(['task.due_date' => SORT_ASC])->all();
			}else if($order == "enddesc"){
				$tasks = Task::find()->joinWith(['projectservice','post','post.postfile','post.comment','post.comment.commentfile'])->where($where)->andWhere(['project_service.project_id'=> $id])->groupBy(['task.id'])->orderBy(['task.due_date' => SORT_DESC])->all();
			}else{
				$tasks = Task::find()->joinWith(['projectservice','post','post.postfile','post.comment','post.comment.commentfile'])->where($where)->andWhere(['project_service.project_id'=> $id])->groupBy(['task.id'])->orderBy(['task.status_update' => SORT_DESC])->all();
			}
				
		}else{
			$tasks = Task::find()->joinWith(['projectservice','post','post.postfile','post.comment','post.comment.commentfile'])->where($where)->andWhere(['project_service.project_id'=> $id])->groupBy(['task.id'])->orderBy(['task.status_update' => SORT_DESC])->all();
		}*/
		
		$postfiles = PostFile::find()->joinWith(['post','post.task','post.task.projectservice'])->where($where)->andWhere(['project_service.project_id'=> $id])->orderBy(['post_file.created_date' => SORT_DESC])->all();
		$commentfiles = CommentFile::find()->joinWith(['comment','comment.post','comment.post.task','comment.post.task.projectservice'])->where($where2)->andWhere(['project_service.project_id'=> $id])->orderBy(['comment_file.created_date' => SORT_DESC])->all();

		
		$project =  Project::find()->andWhere(['id'=>$id])->one();
		$project_services =  ProjectService::find()->joinWith(['service'])->where(['project_service.project_id'=>$id])->all();
		$project_users =  ProjectUser::find()->joinWith(['user'])->where(['project_user.project_id'=>$id])->andWhere(['project_user.status'=>1])->andWhere(['user.deleted'=>0])->andWhere(['user.active'=>1])->all();
		$priorities = Priority::find()->all();
		return $this->render('files', ['postfiles'=>$postfiles,'commentfiles'=>$commentfiles,'project'=>$project,'project_users'=>$project_users,'project_services'=>$project_services,'arrayassign'=>$arrayassign,'status'=>$status,'type'=>$type,'priorities'=>$priorities,'startdate'=>$startdate,'enddate'=>$enddate,"currentuser"=>$currentuser]);
	}
	
	public function actionAllproject(){
		$where="";
		$managersseletced= [];
		$dateselected="";
		$dateselected="";
		$project_archive=0;
		$agencyselected=0;
		$userid=\Yii::$app->user->getId();
		$currentuser = User::findOne($userid);$type=0;
		$agencies = Agency::find()->where(['active'=>0])->orderBy(['ordering' => SORT_ASC ])->all();
		$categories = Category::find()->all();

		if (isset($_GET['project_archive']) && !empty($_GET['project_archive'])  ) {
			$project_archive = $_GET['project_archive'];
		}
		if (isset($_GET['managers']) && !empty($_GET['managers'])  ) {
			$managersseletced = $_GET['managers'];
			$str = implode (", ", $_GET['managers']);
			if (!empty($str)) {
				if(!empty($where)){
					$where .= ' AND account_manager_id IN ('.$str.')';
				}else{
					$where .= 'account_manager_id IN ('.$str.')';
				}
			}
		}
		
		/*if (isset($_GET['date']) && !empty($_GET['date'])  ) {
			$dateselected = $_GET['date'];
			$date = str_replace('/', '-', $dateselected);
			$date = date("Y-m-d", strtotime($date));
			if(!empty($where)){
				$where .= ' AND project.start_date <= "' . $date . '"  and project.end_date >= "'. $date . '"';
			}else{
				$where .= 'project.start_date <= "' . $date . '"  and project.end_date >= "'. $date . '"';
			}
		}*/
		if (isset($_GET['date']) && !empty($_GET['date'])  ) {
			$dateselected = $_GET['date'];
			$date = str_replace('/', '-', $dateselected);
			$date = date("Y-m-d", strtotime($date));
			if(!empty($where)){
				$where .= ' AND project.start_date = "' . $date . '"';
			}else{
				$where .= 'project.start_date = "' . $date . '"';
			}
		}
		if (isset($_GET['search']) && !empty($_GET['search'])) {
			$search = $_GET['search'];
			if(!empty($where)){
				$where .= ' AND project.name LIKE "%'.$search.'%"';
			}else{
				$where .= 'project.name LIKE "%'.$search.'%"';
			}
		}
		if (isset($_GET['type']) && !empty($_GET['type'])  ) {
			$type = $_GET['type']; 
			if(!empty($where)){
				$where .= ' AND project_category.category_id = ' . $type ;
			}else{
				$where .= ' project_category.category_id = ' . $type ;
			}
		}
		if (isset($_GET['agency']) && !empty($_GET['agency'])  ) {
			$agencyselected = $_GET['agency']; 
			if(!empty($where)){
				$where .= ' AND project.agency_id = ' . $agencyselected ;
			}else{
				$where .= ' project.agency_id = ' . $agencyselected ;
			}
		}
		
		$users_managers = User::find()->where(['role_id'=>2])->all();

		if($currentuser->role_id == 1){
			$projects =  Project::find()
				->joinWith(['agency','projectcategory','accountmanager'], true, 'INNER JOIN')
				->with('companyContact')
				->where($where)
				->andWhere(['project.archive'=>$project_archive])
				->orderBy(['project.created_date' => SORT_DESC])
				->all();
		}else{
			$projects =  Project::find()
				->joinWith(['agency', 'projectuser','projectcategory','accountmanager'], true, 'INNER JOIN')
				->with('companyContact')
				->where($where)
				->andWhere(['project.archive'=>$project_archive])
				->andWhere(['project_user.user_id'=>$currentuser->id])
				->orderBy(['project.created_date' => SORT_DESC])
				->all();
		}
		return $this->render('allproject', ['projects'=>$projects,'users_managers'=>$users_managers,'managersseletced'=>$managersseletced,'dateselected'=>$dateselected,'currentuser'=>$currentuser,'project_archive'=>$project_archive,'type'=> $type,'agencies' =>$agencies,'agencyselected' =>$agencyselected,'categories' =>$categories]);
	}
	
	public function actionTaskfiles(){
		$id = $_POST["id"];
		$posts = Post::find()->joinWith(['postfile','task','comment','comment.commentfile'])->groupBy(['post.id'])->andWhere(['task.id'=>$id])->orderBy(['post.created_date' => SORT_DESC])->all();
		$data ="";
		if(!empty($posts)){
			foreach($posts as $post){
				if(!empty($post->postfile)){
					foreach($post->postfile as $postfile){
					$urlfile = (!empty($postfile->file))?Url::base(true)."/uploads/files/". $postfile->file:"#"; 
							$data .='<div class="row-file">';
								$data .='<div class="row-file1"><div class="divfile ext-txt"></div><span class="txt-file-name">'.$postfile->file.'</span></div>';
								$data .='<div class="row-file2"><a href="'.$urlfile.'" class="downloadfile" target="_blank" download="'.$postfile->file.'" title="'.$postfile->file.'">Download File</a></div>';
							$data .='</div>';

							if(!empty($post->comment)){
								foreach($post->comment as $comment){
								if(!empty($comment->commentfile)){
									foreach($comment->commentfile as $commentfile){
										$urlfile = (!empty($commentfile->file))?Url::base(true)."/uploads/files/". $commentfile->file:"#"; 
											$data .='<div class="row-file">';
												$data .='<div class="row-file1"><div class="divfile ext-txt"></div><span class="txt-file-name">'.$commentfile->file.'</span></div>';
												$data .='<div class="row-file2"><a href="'.$urlfile.'" class="downloadfile" target="_blank" download="'.$commentfile->file.'" title="'.$commentfile->file.'">Download File</a></div>';
										}						
									}
								}
							}
					}						
				}
			}
		}
		return $data;
	}
	 
	public function actionAssetsdata(){
		
		$id = $_POST["id"];
		$asset = Assets::find()->joinWith(['assetsfile'])->andWhere(['assets.id'=>$id])->one();
		$data ="";
		if($asset->type ==0 ){
			$data .='<div class="section sectiontext">';
				$data .='<div class="label">Description</div>';
				$data .='<textarea class="textareadetails" readonly>'.$asset->text.'</textarea>';
			$data .='</div>';
		}else{
			$data .='<div class="section sectionfiles">';
				$data .='<div class="label content">content</div>';
				$data .='<div class="files-listing">';
					if(!empty($asset->assetsfile)){
						foreach($asset->assetsfile as $assetsfile){
							$urlfile = (!empty($assetsfile->file))?Url::base(true)."/uploads/files/". $assetsfile->file:"#"; 
							$data .='<div class="row-file">';
								$data .='<div class="row-file1"><div class="divfile ext-txt"></div><span class="txt-file-name">'.$assetsfile->file.'</span></div>';
								$data .='<div class="row-file2"><a href="'.$urlfile.'" class="downloadfile" target="_blank" download="'.$assetsfile->file.'" title="'.$assetsfile->file.'">Download File</a></div>';
							$data .='</div>';
						}
					}
				$data .='</div>';
			$data .='</div>';
		}
		
		return $data;
	}
 		
	public function actionAssetsdetails() { 

        $id = $_POST["id"];
        //$task = Task::find()->joinWith(['post','post.postfile','post.comment','post.comment.commentfile','projectservice','projectservice.project'])->andWhere(['task.id'=>$id])->one();
        $assets = Assets::find()->joinWith(['project'])->andWhere(['assets.id'=>$id])->one();

        $results = [
            "id" => $id,
            "projectName" => $assets->project->name,
            "assetName" => $assets->title,
            "status" => $assets->status,
            "startDate" => $assets->start_date,
            "dueDate" => $assets->end_date,
        ];
        echo json_encode($results);
        exit();
	}	
	
	public function actionArchive() { 
		 $project_id = $_POST["project_id"];
		// $archive = $_POST["archive"];
		 $project = Project::find()->where(['id'=>$project_id])->one();
		 if(!empty( $project)){
			 $message="";
			 $status="";
			 if($project->archive == 0){
				$project->archive =1;
				$message="Unarchive";
				$status="Archived";
			 }else{
				$project->archive =0;
				$message="Archive";
				$status="Active";
			 }
			 if($project->save(false)){
				$results = [
					"status" => "success",
					"archive" =>$project->archive,
					"message" => $message,
					"statusvalue" => $status
				];	
			 }else{
				$results = [
					"status" => "error",
					"message" => "Project not found!",
				];
			 }

		 }else{
			$results = [
				"status" => "error",
				"message" => "Project not found!",
			];
		 }
		         echo json_encode($results);
        exit(); 
	
	}
	
	public function actionChangeassignuser() {
	  $value = $_POST["value"];
	  $task_id = $_POST["task_id"];
	  $taskuser = TaskUser::find()->where(['user_id'=>$value])->andWhere(['task_id'=>$task_id])->one();
	  $userid=\Yii::$app->user->getId();
	  $name_user = User::find()->where([ 'id' => $userid ])->one();
	  if(!empty($taskuser)){
		$taskuser->delete(false);
		 $task1= Task::find()->where(['id'=>$task_id])->one();
		  if( $task1->level==1 ){
		     $taskuser1 = TaskUser::find()->where(['user_id'=>$value])->andwhere(['task_id'=> $task1->id ])->one();
			 if($taskuser1!=null){
				 $taskuser1->delete(false);
			 }
 		  }
		  if( $task1->level==2 ){
			 $taskuser1 = TaskUser::find()->where(['user_id'=>$value])->andwhere(['task_id'=> $task1->id ])->one();
			 if($taskuser1!=null){
				 $taskuser1->delete(false);
			 }
			 $task0= Task::find()->where(['id'=> $task1->parent_id])->one();
			 $taskuser0 = TaskUser::find()->where(['user_id'=>$value])->andwhere(['task_id'=> $task0->id ])->one();
			 if($taskuser0!=null){
				 $taskuser0->delete(false);
			 }
		  }
		  if( $task1->level==3 ){
			  $taskuser1 = TaskUser::find()->where(['user_id'=>$value])->andwhere(['task_id'=> $task1->id ])->one();
			 if($taskuser1!=null){
				 $taskuser1->delete(false);
			 }
			 $task0= Task::find()->where(['id'=> $task1->parent_id])->one();
			 $taskuser0 = TaskUser::find()->where(['user_id'=>$value])->andwhere(['task_id'=> $task0->id ])->one();
			 if($taskuser0!=null){
				 $taskuser0->delete(false);
			 }
			 $task2= Task::find()->where(['id'=> $task0->parent_id])->one();
			 $taskuser2 = TaskUser::find()->where(['user_id'=>$value])->andwhere(['task_id'=> $task2->id ])->one();
			 if($taskuser2!=null){
				 $taskuser2->delete(false);
			 }
		  }	  
		  if( $task1->level==4 ){
			  $taskuser1 = TaskUser::find()->where(['user_id'=>$value])->andwhere(['task_id'=> $task1->id ])->one();
			 if($taskuser1!=null){
				 $taskuser1->delete(false);
			 }
			 $task0= Task::find()->where(['id'=> $task1->parent_id])->one();
			 $taskuser0 = TaskUser::find()->where(['user_id'=>$value])->andwhere(['task_id'=> $task0->id ])->one();
			 if($taskuser0!=null){
				 $taskuser0->delete(false);
			 }
			 $task2= Task::find()->where(['id'=> $task0->parent_id])->one();
			 $taskuser2 = TaskUser::find()->where(['user_id'=>$value])->andwhere(['task_id'=> $task2->id ])->one();
			 if($taskuser2!=null){
				 $taskuser2->delete(false);
			 }
			 $task3= Task::find()->where(['id'=> $task2->parent_id])->one();
			 $taskuser3 = TaskUser::find()->where(['user_id'=>$value])->andwhere(['task_id'=> $task3->id ])->one();
			 if($taskuser3!=null){
				 $taskuser3->delete(false);
			 }
		  }	  
		echo "success"; die();
	  }else{
		  $taskuser = new TaskUser();
		  $taskuser->task_id =  $task_id;
		  $taskuser->user_id =  $value;
		  $taskuser->status =  0;
		  $task1= Task::find()->where(['id'=>$task_id])->one();
		  if( $task1->level==1 ){
		     if( $task1->parent_id!=0 ){
				  $taskuser1= TaskUser::find()->where(['user_id'=>$value])->andwhere(['task_id'=> $task1->id ])->one();
				  if($taskuser1==null){
					  $taskuser1 = new TaskUser();
					  $taskuser1->task_id = $task1->parent_id;
					  $taskuser1->user_id = $value;
					  $taskuser1->status =  0;
					  $taskuser1->save(false);  
				  }
			  }
 		  }
		  if( $task1->level==2 ){
			 if( $task1->parent_id!=0 ){
				  $taskuser1= TaskUser::find()->where(['user_id'=>$value])->andwhere(['task_id'=> $task1->id ])->one();
				  if($taskuser1==null){
					  $taskuser1 = new TaskUser();
					  $taskuser1->task_id = $task1->parent_id;
					  $taskuser1->user_id = $value;
					  $taskuser1->status =  0;
					  $taskuser1->save(false);  
				  }
			  }
			  $task0= Task::find()->where(['id'=> $task1->parent_id])->one();
			  if($task0!=null){
				$taskuser0= TaskUser::find()->where(['user_id'=>$value])->andwhere(['task_id'=> $task0->id ])->one();
				if($taskuser0==null){
				$taskuser0 = new TaskUser();  
				$taskuser0->task_id = $task0->id;
				$taskuser0->user_id = $value;
				$taskuser0->status =  0;
				$taskuser0->save(false);
				}
			 }
		  }
		  if( $task1->level==3 ){
			  if( $task1->parent_id!=0 ){
				  $taskuser1= TaskUser::find()->where(['user_id'=>$value])->andwhere(['task_id'=> $task1->id ])->one();
				  if($taskuser1==null){
					  $taskuser1 = new TaskUser();
					  $taskuser1->task_id = $task1->parent_id;
					  $taskuser1->user_id = $value;
					  $taskuser1->status =  0;
					  $taskuser1->save(false);  
				  }
			  }
			  $task0= Task::find()->where(['id'=> $task1->parent_id])->one();
			  if($task0!=null){
				$taskuser0= TaskUser::find()->where(['user_id'=>$value])->andwhere(['task_id'=> $task0->id ])->one();
				if($taskuser0==null){
				$taskuser0 = new TaskUser();  
				$taskuser0->task_id = $task0->id;
				$taskuser0->user_id = $value;
				$taskuser0->status =  0;
				$taskuser0->save(false);
				}
			 }
			  $task2= Task::find()->where(['id'=> $task0->parent_id])->one();
			  if($task2!=null){
				$taskuser2= TaskUser::find()->where(['user_id'=>$value])->andwhere(['task_id'=> $task2->id ])->one();
				if($taskuser2==null){
				$taskuser2 = new TaskUser();  
				$taskuser2->task_id = $task2->id;
				$taskuser2->user_id = $value;
				$taskuser2->status =  0;
				$taskuser2->save(false);
				}
			 }
		  }
		  if( $task1->level==4 ){
			  if( $task1->parent_id!=0 ){
				  $taskuser1= TaskUser::find()->where(['user_id'=>$value])->andwhere(['task_id'=> $task1->id ])->one();
				  if($taskuser1==null){
					  $taskuser1 = new TaskUser();
					  $taskuser1->task_id = $task1->parent_id;
					  $taskuser1->user_id = $value;
					  $taskuser1->status =  0;
					  $taskuser1->save(false);  
				  }
			  }
			  $task0= Task::find()->where(['id'=> $task1->parent_id])->one();
			  if($task0!=null){
				$taskuser0= TaskUser::find()->where(['user_id'=>$value])->andwhere(['task_id'=> $task0->id ])->one();
				if($taskuser0==null){
				$taskuser0 = new TaskUser();  
				$taskuser0->task_id = $task0->id;
				$taskuser0->user_id = $value;
				$taskuser0->status =  0;
				$taskuser0->save(false);
				}
			 }
			  $task2= Task::find()->where(['id'=> $task0->parent_id])->one();
			  if($task2!=null){
				$taskuser2= TaskUser::find()->where(['user_id'=>$value])->andwhere(['task_id'=> $task2->id ])->one();
				if($taskuser2==null){
				$taskuser2 = new TaskUser();  
				$taskuser2->task_id = $task2->id;
				$taskuser2->user_id = $value;
				$taskuser2->status =  0;
				$taskuser2->save(false);
				}
			 }
			 $task3= Task::find()->where(['id'=> $task2->parent_id])->one();
			  if($task3!=null){
				$taskuser3= TaskUser::find()->where(['user_id'=>$value])->andwhere(['task_id'=> $task3->id ])->one();
				if($taskuser3==null){  
				$taskuser3 = new TaskUser();  
				$taskuser3->task_id = $task3->id;
				$taskuser3->user_id = $value;
				$taskuser3->status =  0;
				$taskuser3->save(false);
				}
			 }
		  }
		  if($taskuser->save(false)){
			  if($value != $userid ){
				$notifications = new Notifications();
				$notifications->from_id = $userid;
				$notifications->to_id = $value;
				$projectname = $taskuser->task->projectservice->project->name;
				$taskname = $taskuser->task->title;
 				$notifications->type = 2;
				$notifications->task_id = $taskuser->task->id;
				if($taskuser->task->projectservice->type == 0){
					$urltask = \Yii::$app->params['baseurl']."/accounts/oneofftasks?id=".$taskuser->task->projectservice->project_id."&task=".$taskuser->task->id;
				}else if($taskuser->task->projectservice->type == 1){
					$urltask = \Yii::$app->params['baseurl']."/accounts/monthlytasks?id=".$taskuser->task->projectservice->project_id."&task=".$taskuser->task->id;
	            }else{
						$urltask = \Yii::$app->params['baseurl']."/accounts/adhoctasks?id=".$taskuser->task->projectservice->project_id."&task=".$taskuser->task->id;
				}
				if(!empty($projectname)){
				 $notifications->text = $name_user->first_name .' '.$name_user->last_name  ." assigned you to ".$taskname;
				} 
				$notifications->url = $urltask;
				$notifications->save(false);
				$sendGrid = Yii::$app->sendGrid;
				$message = $notifications->text . '  in ' . $projectname ;
				$message = $sendGrid->compose('acceptproject', ['url' => $urltask, 'message' => $message,"name" => $name_user->first_name .' '. $name_user->last_name ]);
				$message->setFrom($name_user->email)
						->setTo($taskuser->user->email)
						->setSubject('Task')
						->send($sendGrid); 
				// FCM
				$userdevices = UserDevice::find()->where(['user_id'=> $userid ])->all();
					if($userdevices){
						$url = "https://fcm.googleapis.com/fcm/send";
						foreach($userdevices as $userdevice){
						$token = $userdevice->device_token;
						$serverKey = 'AAAAihsptdE:APA91bHvnDU2Hin-576xQIRT_7Puz9BLx5P4PUCiIt6rQh2dNpanE7WJCUvaewLCHYkJt70WDXQYB8QtMNYOrIhMaSJHxulNDNtdIP0DkMM2KjWzJptViFrJi14_CKaUXDP12vHkQ-Wr';
						$title = 'Task';
						$body = $name_user->first_name .' '.$name_user->last_name  ." assigned you to ".$taskname;
						$notification = array('title' =>$title , 'body' => $body, 'sound' => 'default', 'badge' => '1');
						$data = array('title' =>$title , 'body' => $body, 'type'=> 2, 'user_id'=> $user_id, 'project_id'=> $taskuser->task->projectservice->project_id,'task_id'=> $taskuser->task->id);
						
						$arrayToSend = array('to' => $token, 'notification' => $notification,'data'=> $data,'priority'=>'high');
						$json = json_encode($arrayToSend);
						$headers = array();
 						$headers[] = 'Content-Type: application/json';
						$headers[] = 'Authorization: key='. $serverKey;
						$ch = curl_init();
						curl_setopt($ch, CURLOPT_URL, $url);
						curl_setopt($ch, CURLOPT_CUSTOMREQUEST,"POST");
						curl_setopt($ch, CURLOPT_POSTFIELDS, $json);
						curl_setopt($ch, CURLOPT_HTTPHEADER,$headers);
						curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
						//Send the request
						$response = curl_exec($ch);
						//Close request
						curl_close($ch); 
   						}
					}		
						
			  }
			
						
				echo "success"; die();
			} else {
				echo "error"; die();
			}
	  }

	}

	
	public function actionChangestatus() { 
	\Yii::$app->response->format = 'json'; $userid=\Yii::$app->user->getId();
	$value = $_POST["value"];
	$task_id = $_POST["task_id"];
	$time = new \DateTime('now');
	$currenttime = $time->format('Y-m-d H:i:s');
	$task = Task::find()->andWhere(['task.id'=>$task_id])->one();
	$oldstatus= $task->status;
	$arrids = array();
	$arrid = array();
	$oldstatus = $task->status;
	  if(!empty($task)){
		$task->status = $value;
		$task->status_update = $currenttime; 
		if($task->save(false)){
			if($oldstatus!= $value)	{ 
					switch ($value) {
					  case 0:
						$newstatus='Select';
						break;
					  case 1:
						$newstatus='Working on it';
						break;
					  case 2:
						$newstatus='Waiting for review';
						break;
					  case 3:
						$newstatus='Stuck';
						break;
					case 4:
						$newstatus='Done';
						break;
					}
					switch ($oldstatus) {
					  case 0:
						$statusold='Select';
						break;
					  case 1:
						$statusold='Working on it';
						break;
					  case 2:
						$statusold='Waiting for review';
						break;
					  case 3:
						$statusold='Stuck';
						break;
					  case 4:
						$statusold='Done';
						break;
					}
					$projectname = $task->projectservice->project->name;
					$taskname = $task->projectservice->service->name . ' / '. $task->title;
					if($task->projectservice->type == 0){
						$urltask = \Yii::$app->params['baseurl']."/accounts/oneofftasks?id=".$task->projectservice->project_id."&task=".$task_id;
					} else if($task->projectservice->type == 1){
					$urltask = \Yii::$app->params['baseurl']."/accounts/monthlytasks?id=".$task->projectservice->project_id."&task=".$task_id ."&notification_id=1";
					$monthlyservice = ProjectMonthlyService::find()->where(['id'=> $task->project_monthly_service ])->one();
 					$monthNum = $monthlyservice->month;
					$dateObj = DateTime::createFromFormat('!m', $monthNum);
					$monthName = $dateObj->format('F');
					$yearname = $monthlyservice->year;
					$taskname = $task->projectservice->service->name .' / '. $monthName .' '. $yearname .' / '. $task->title;
 					}  
				}
			
			if($task->parent_id > 0){
 				$statuschanges = $this->check_status_subtasks($task->parent_id,$task->status);
				//if($statuschanges > 0){
					$arrid = array('status' => 'success','id'=> $task->parent_id,'task_status'=> $statuschanges);
					array_push($arrids, $arrid); 
					$task1 = Task::find()->andWhere(['task.id'=>$task->parent_id])->one();
					$task1->status = $statuschanges;
					$task1->save(false);
					if(!empty($task1) && $task1->parent_id > 0){
						$statuschanges = $this->check_status_subtasks($task1->parent_id,$task->status);
						//if($statuschanges > 0){
							$arrid = array('status' => 'success','id'=> $task1->parent_id,'task_status'=> $statuschanges);
							//$arrid = array('status' => 'success','id'=> $statuschanges);
							array_push($arrids, $arrid);
							$task2 = Task::find()->andWhere(['task.id'=>$task1->parent_id])->one();
							$task2->status = $statuschanges;
							$task2->save(false);
							if(!empty($task2) & $task2->parent_id > 0){
								$statuschanges = $this->check_status_subtasks($task2->parent_id,$task->status);
								//if($statuschanges > 0){
									//$arrid = array('status' => 'success','id'=> $statuschanges);
									$arrid = array('status' => 'success','id'=> $task2->parent_id,'task_status'=> $statuschanges);
									array_push($arrids, $arrid);	
								//}
								$task3 = Task::find()->andWhere(['task.id'=>$task2->parent_id])->one();
								$task3->status = $statuschanges;
								$task3->save(false);
							}
						//}
					}
				
 					$result=[
						'status' => "success",
						'listdata' => $arrids,
					];
					return $result; 
				/*}else{
					$result=[
						'status' => "success",
						'listdata' => $arrids,
					];
					return $result;
				}*/
 			}else{ 
					$result=[
						'status' => "success",
						'listdata' => $arrids,
					];
					return $result;
			}
 		}else{
			$result=[
				'status' => "error",
			];
			return $result;
		}
	  }else{
		$result=[
			'status' => "error",
		];
      return $result;
	  }
		return $result;
	}
	
public function actionChangepriority() { 
	$value = $_POST["value"];
	if(empty($value) || $value == null){$value=0;}
	$task_id = $_POST["task_id"];
	$userid=\Yii::$app->user->getId();
	$task = Task::find()->andWhere(['task.id'=>$task_id])->one();
	$oldpriority = $task->priority_id;
	$arrids = array();
	$arrid = array();
	  if(!empty($task)){
		$task->priority_id = $value;
		if($task->save(false)){
			$activity = new ActivityLogs();
					$activity->user_id= $userid;
					$activity->type= 8;
					$activity->task_id= $task_id;
					$activity->project_id= $task->projectservice->project_id;
					$activity->status_to= $value; $newpriority= ''; $priorityold= '';
					switch ($value) { 
					  case 0:
						$newpriority='Select';
						break;
					  case 1:
						$newpriority='Low';
						break;
					  case 2:
						$newpriority='Normal';
						break;
					  case 3:
						$newpriority='High';
						break;
					  case 4:
						$newpriority='Urgent';
						break;
					}
					switch ($oldpriority) { 
					  case 0:
					    $priorityold='Select';
						break;
					  case 1:
						$priorityold='Low';
						break;
					  case 2:
						$priorityold='Normal';
						break;
					  case 3:
						$priorityold='High';
						break;
					  case 4:
						$priorityold='Urgent';
						break;
					}
					$projectname = $task->projectservice->project->name;
					$taskname = $task->projectservice->service->name .' / '. $task->title ;
					if($task->projectservice->type == 0){
						$urltask = \Yii::$app->params['baseurl']."/accounts/oneofftasks?id=".$task->projectservice->project_id."&task=".$task_id;
					}else if($task->projectservice->type == 1){
						$urltask = \Yii::$app->params['baseurl']."/accounts/monthlytasks?id=".$task->projectservice->project_id."&task=".$task_id ."&notification_id=1";
						$monthlyservice = ProjectMonthlyService::find()->where(['id'=> $task->project_monthly_service ])->one();
 					$monthNum = $monthlyservice->month;
					$dateObj = DateTime::createFromFormat('!m', $monthNum);
					$monthName = $dateObj->format('F');
					$yearname = $monthlyservice->year;
					$taskname = $task->projectservice->service->name .' / '. $monthName .' '. $yearname .' / '. $task->title;
					} 
					$activity->message ='Changed priotity of <a href="'. $urltask .'">'. $taskname  .'</a> from '. $priorityold .' to ' . $newpriority ;	
 					$activity->urltask = $urltask;	
					$activity->save(false);
					
					
			if($task->parent_id > 0){
 				$statuschanges = $this->check_priority_subtasks($task->parent_id,$task->priority_id);
				//if($statuschanges > 0){
					$arrid = array('status' => 'success','id'=> $task->parent_id,'task_priority'=> $statuschanges);
					array_push($arrids, $arrid); 
					$task1 = Task::find()->andWhere(['task.id'=>$task->parent_id])->one();
					$task1->priority_id = $statuschanges;
					$task1->save(false);
					if(!empty($task1) && $task1->parent_id > 0){
						$statuschanges = $this->check_priority_subtasks($task1->parent_id,$task->priority_id);
						//if($statuschanges > 0){
							$arrid = array('status' => 'success','id'=> $task1->parent_id,'task_priority'=> $statuschanges);
							//$arrid = array('status' => 'success','id'=> $statuschanges);
							array_push($arrids, $arrid);
							$task2 = Task::find()->andWhere(['task.id'=>$task1->parent_id])->one();
							$task2->priority_id = $statuschanges;
							$task2->save(false);
							if(!empty($task2) & $task2->parent_id > 0){
								$statuschanges = $this->check_priority_subtasks($task2->parent_id,$task->priority_id);
								//if($statuschanges > 0){
									//$arrid = array('status' => 'success','id'=> $statuschanges);
									$arrid = array('status' => 'success','id'=> $task2->parent_id,'task_priority'=> $statuschanges);
									array_push($arrids, $arrid);	
								//}
								$task3 = Task::find()->andWhere(['task.id'=>$task2->parent_id])->one();
								$task3->priority_id = $statuschanges;
								$task3->save(false);
							}
						//}
					}
				
 					$result=[
						'status' => "success",
						'listdata' => $arrids,
					];
					echo json_encode($result); die();
				/*}else{
					$result=[
						'status' => "success",
						'listdata' => $arrids,
					];
					return $result;
				}*/
 			}else{ 
					$result=[
						'status' => "success",
						'listdata' => $arrids,
					];
					echo json_encode($result); die();
			}
					
					
			$result=[
				'status' => "success",
				'listdata' => $arrids,
			];
			echo json_encode($result); die();
		}else{
					$result=[
						'status' => "error",
						'listdata' => $arrids,
					];
					echo json_encode($result); die();
		}
	  }else{
					$result=[
						'status' => "error",
						'listdata' => $arrids,
					];
					echo json_encode($result); die(); 
	  }

	}
	
	public function actionChangeassetstartdate() {  
	  $value = $_POST["value"];
	  $asset_id = $_POST["asset_id"];
	  $asset = Assets::find()->andWhere(['id'=>$asset_id])->one();
	  if(!empty($asset)){
		$date = date("Y-m-d", strtotime($value));
		$date = str_replace('/', '-', $value);
		$asset->start_date = date("Y-m-d", strtotime($date));
		if($asset->save(false)){
			echo "success"; die();
		}else{
			echo "error"; die();
		}
	  }else{
		  echo "error"; die();
	  }

	}
	
	public function actionChangeassetenddate() {  
	  $value = $_POST["value"];
	  $asset_id = $_POST["asset_id"];
	  $asset = Assets::find()->andWhere(['id'=>$asset_id])->one();
	  if(!empty($asset)){
		$date = date("Y-m-d", strtotime($value));
		$asset->e_date = date("Y-m-d", strtotime($date));
		$date = str_replace('/', '-', $value);
		if($asset->save(false)){
			echo "success"; die();
		}else{
			echo "error"; die();
		}
	  }else{
		  echo "error"; die();
	  }

	}
	
		
	public function actionChangeassetstatus() { 
	  $value = $_POST["value"];
	  $asset_id = $_POST["asset_id"];
	  $asset = Assets::find()->andWhere(['id'=>$asset_id])->one();
	  if(!empty($asset)){
		$asset->status = $value;
		if($asset->save(false)){
			echo "success"; die();
		}else{
			echo "error"; die();
		}
	  }else{
		  echo "error"; die();
	  }

	}
	
	public function actionChangestartdate() {  
		\Yii::$app->response->format = 'json';	
		$arrids = array();
		$arrid = array();
	  $value = $_POST["value"];
	  $task_id = $_POST["task_id"];
	  $task = Task::find()->andWhere(['task.id'=>$task_id])->one();
	  $userid=\Yii::$app->user->getId(); 
	  $oldstartdate = $task->start_date;
	  if(!empty($task)){
		  
		  if($value == null){
			  $task->start_date = null;
		  } else {
			$date = date("Y-m-d", strtotime($value));
			// check if date contain backslash because of date format change :'( 
			if (strpos($date, '\\') !== FALSE) {
				$date = str_replace('/', '-', $value);
			}else{
				$date = str_replace(',', '-', $value);
			}
			 
			$task->start_date = date("Y-m-d", strtotime($date));
		  } 
		  
		if($task->save(false)){
			$activity = new ActivityLogs();
			$activity->user_id= $userid;
			$activity->type= 1;
			$activity->task_id= $task_id;
 			$activity->project_id= $task->projectservice->project_id;
			$activity->date_from= date("Y-m-d", strtotime($date));
			$projectname = $task->projectservice->project->name;
				$taskname = $task->projectservice->service->name .' / '. $task->title;
				if($task->projectservice->type == 0){
					$urltask = \Yii::$app->params['baseurl']."/accounts/oneofftasks?id=".$task->projectservice->project_id."&task=".$task->id;
				}else if($task->projectservice->type == 1){
					$urltask = \Yii::$app->params['baseurl']."/accounts/monthlytasks?id=".$task->projectservice->project_id."&task=".$task->id ."&notification_id=1";
					$monthlyservice = ProjectMonthlyService::find()->where(['id'=> $task->project_monthly_service ])->one();
 					$monthNum = $monthlyservice->month;
					$dateObj = DateTime::createFromFormat('!m', $monthNum);
					$monthName = $dateObj->format('F');
					$yearname = $monthlyservice->year;
					$taskname = $task->projectservice->service->name .' / '. $monthName .' '. $yearname .' / '. $task->title; 
	            }  
			if($oldstartdate==Null){
				$activity->message ='Changed start date of <a href="'. $urltask .'">'. $taskname .'</a> to '. date("d/m/Y", strtotime($date));	
 			} else {
				$activity->message ='Changed start date of <a href="'. $urltask .'">'. $taskname .'</a>' . ' from '. date("d/m/Y", strtotime($oldstartdate)) .' to '. date("d/m/Y", strtotime($date));	
 			}
			$activity->urltask = $urltask;	
			$activity->save(false); 
			/*if($task->parent_id > 0){ 
				$task = Task::find()->andWhere(['task.id'=>$task->parent_id])->one();
				if($task->parent_id > 0){
					$task = Task::find()->andWhere(['task.id'=>$task->parent_id])->one();
					if($task->parent_id > 0){
						$task = Task::find()->andWhere(['task.id'=>$task->parent_id])->one();
					}
				}
			} 
			$changedates = $this->check_dates_subtasks($task->id);
			$changedates = $this->check_dates_subtasks($changedates);
			$changedates = $this->check_dates_subtasks($changedates);*/




			if($task->parent_id > 0){
					$startdatechange = $this->check_startdates_subtasks($task->parent_id,$task->start_date);
					$showstartdatechange =  date('M d', strtotime($startdatechange));
					$arrid = array('status' => 'success','id'=> $task->parent_id,'startDate'=> $startdatechange,'showstartDate'=> $showstartdatechange);
					array_push($arrids, $arrid); 
					$task1 = Task::find()->andWhere(['task.id'=>$task->parent_id])->one();
					if($startdatechange != null && $startdatechange != 0){
						$task1->start_date = $startdatechange;
						$task1->save(false);
					
					}
					if(!empty($task1) && $task1->parent_id > 0){
						$startdatechange = $this->check_startdates_subtasks($task1->parent_id,$task->start_date);
						$showstartdatechange =  date('M d', strtotime($startdatechange));
							$arrid = array('status' => 'success','id'=> $task1->parent_id,'startDate'=> $startdatechange,'showstartDate'=> $showstartdatechange );
							array_push($arrids, $arrid);
							$task2 = Task::find()->andWhere(['task.id'=>$task1->parent_id])->one();
							if($startdatechange != null && $startdatechange != 0){
								$task2->start_date = $startdatechange;
								$task2->save(false);
							}

							if(!empty($task2) & $task2->parent_id > 0){
								$startdatechange = $this->check_startdates_subtasks($task2->parent_id,$task->start_date);
								$showstartdatechange =  date('M d', strtotime($startdatechange));
									$arrid = array('status' => 'success','id'=> $task2->parent_id,'startDate'=> $startdatechange,'showstartDate'=> $showstartdatechange);
									array_push($arrids, $arrid);	
								$task3 = Task::find()->andWhere(['task.id'=>$task2->parent_id])->one();
								if($startdatechange != null && $startdatechange != 0){
								$task3->start_date = $startdatechange;
								$task3->save(false);
								}
							}
					}
				
 					$result=[
						'status' => "success",
						'listdata' => $arrids,
					];
					echo json_encode($result); die();
 			}else{ 
					$result=[
						'status' => "success",
						'listdata' => $arrids,
					];
					echo json_encode($result); die();
			}



			/*$parenttask = Task::find()->where(['task.id'=>$changedates])->one();
			$arrid = array('status' => 'success','startDate'=> $parenttask->start_date,'id' => $parenttask->id);
			array_push($arrids, $arrid);
			$childtask = Task::find()->where(['task.parent_id'=>$changedates])->all();
			if(!empty($childtask)){
				foreach($childtask as $child){
					$arrid = array('status' => 'success','startDate'=> $child->start_date,'id' => $child->id );
					array_push($arrids, $arrid);
					$childtask1 = Task::find()->where(['task.parent_id'=>$child->id])->all();
					if(!empty($childtask1)){
						foreach($childtask1 as $child1){
							$arrid = array('status' => 'success','startDate'=> $child1->start_date,'id' => $child1->id);
							array_push($arrids, $arrid);
							$childtask2 = Task::find()->where(['task.parent_id'=>$child1->id])->all();
							if(!empty($childtask2)){
								foreach($childtask2 as $child2){
									$arrid = array('status' => 'success','startDate'=> $child2->start_date,'id' => $child2->id);
									array_push($arrids, $arrid);
								}
								
							}
						}
					}
				}
			}*/
			
            
			
			/*$result=[
				'status' => "success",
				'listdata' => $arrids,
			];
			echo json_encode($result); die();*/
		}else{
			$result=[
				'status' => "error",
				'listdata' => $arrids,
			];
			echo json_encode($result); die();
		}
	  }else{
		$result=[
			'status' => "error",
			'listdata' => $arrids,
		];
		echo json_encode($result); die();
	  }

	}
	
	public function actionClearenddate() {	
	  $task_id = $_POST["task_id"];
	  $userid = \Yii::$app->user->getId();		
	  $task = Task::find()->andWhere(['task.id'=>$task_id])->one();
	  if(!empty($task)){
	    $task->due_date = null;
			if($task->save(false)){
			$activity = new ActivityLogs();
			$activity->user_id= $userid;
			$activity->project_id= $task->projectservice->project_id;
			$activity->type= 1;
			$activity->task_id= $task_id;
			$activity->project_id= $task->projectservice->project_id;
			$activity->date_to= null;
			$projectname = $task->projectservice->project->name;
				$taskname = $task->projectservice->service->name .' / '. $task->title;
				if($task->projectservice->type == 0){
					$urltask = \Yii::$app->params['baseurl']."/accounts/oneofftasks?id=".$task->projectservice->project_id."&task=".$task->id;
				}else if($task->projectservice->type == 1){
					$urltask = \Yii::$app->params['baseurl']."/accounts/monthlytasks?id=".$task->projectservice->project_id."&task=".$task->id ."&notification_id=1";
					$monthlyservice = ProjectMonthlyService::find()->where(['id'=> $task->project_monthly_service ])->one();
 					$monthNum = $monthlyservice->month;
					$dateObj = DateTime::createFromFormat('!m', $monthNum);
					$monthName = $dateObj->format('F');
					$yearname = $monthlyservice->year;
					$taskname = $task->projectservice->service->name .' / '. $monthName .' '. $yearname .' / '. $task->title; 
	            } 
			$activity->message ='Removed end date of <a href="'. $urltask .'">'. $taskname .'</a>';	
 			$activity->urltask = $urltask;	
			$activity->save(false);
				 return "success"; die();
			}else{
				return "error"; die();
			}
	  }else{
		  return "error"; die();
	  }
	}
	public function actionClearstartdate() {
      $userid = \Yii::$app->user->getId();		
	  $task_id = $_POST["task_id"];
	  $task = Task::find()->andWhere(['task.id'=>$task_id])->one();
	  if(!empty($task)){
	    $task->start_date = null;
			if($task->save(false)){
			$activity = new ActivityLogs();
			$activity->user_id= $userid;
			$activity->type= 1;
			$activity->task_id= $task_id;
 			$activity->project_id= $task->projectservice->project_id;
			$activity->date_from= null;
			$projectname = $task->projectservice->project->name;
				$taskname = $task->projectservice->service->name .' / '. $task->title;
				if($task->projectservice->type == 0){
					$urltask = \Yii::$app->params['baseurl']."/accounts/oneofftasks?id=".$task->projectservice->project_id."&task=".$task->id;
				}else if($task->projectservice->type == 1){
					$urltask = \Yii::$app->params['baseurl']."/accounts/monthlytasks?id=".$task->projectservice->project_id."&task=".$task->id ."&notification_id=1";
					$monthlyservice = ProjectMonthlyService::find()->where(['id'=> $task->project_monthly_service ])->one();
 					$monthNum = $monthlyservice->month;
					$dateObj = DateTime::createFromFormat('!m', $monthNum);
					$monthName = $dateObj->format('F');
					$yearname = $monthlyservice->year;
					$taskname = $task->projectservice->service->name .' / '. $monthName .' '. $yearname .' / '. $task->title;
					
	            } 
			$activity->message ='Removed start date of <a href="'. $urltask .'">'. $taskname .'</a>';	
 			$activity->urltask = $urltask;	
			$activity->save(false);
				
				return "success"; exit;
			}else{
				return "error"; exit;
			}
	  }else{
		  return "error";  exit;
	  }
	}
	
	
	
	public function actionChangeenddate() {
 	  \Yii::$app->response->format = 'json';	
	  $userid = \Yii::$app->user->getId();
	  $arrids = array();
	  $arrid = array();		
	  $value = $_POST["value"];
	  $task_id = $_POST["task_id"];
	  $task = Task::find()->andWhere(['task.id'=>$task_id])->one();
	  $oldenddate = $task->due_date;
	  if(!empty($task)){
		  
		  if($value == null){
			  $task->due_date = null;
		  }else{
			$date = date("Y-m-d", strtotime($value));
 			if (strpos($date, '\\') !== FALSE) {
				$date = str_replace('/', '-', $value);
			}else{
				$date = str_replace(',', '-', $value);
			}
			$task->due_date = date("Y-m-d", strtotime($date));
		  } 
		if($task->save(false)){
			$activity = new ActivityLogs();
			$activity->user_id= $userid;
			$activity->type= 1;
			$activity->task_id= $task_id;
			$activity->project_id= $task->projectservice->project_id;
			$activity->date_to= date("Y-m-d", strtotime($date));
			$projectname = $task->projectservice->project->name;
				$taskname = $task->projectservice->service->name .' / '. $task->title ;
				if($task->projectservice->type == 0){
					$urltask = \Yii::$app->params['baseurl']."/accounts/oneofftasks?id=".$task->projectservice->project_id."&task=".$task->id;
				}else if($task->projectservice->type == 1){
					$urltask = \Yii::$app->params['baseurl']."/accounts/monthlytasks?id=".$task->projectservice->project_id."&task=".$task->id ."&notification_id=1";
					$monthlyservice = ProjectMonthlyService::find()->where(['id'=> $task->project_monthly_service ])->one();
 					$monthNum = $monthlyservice->month;
					$dateObj = DateTime::createFromFormat('!m', $monthNum);
					$monthName = $dateObj->format('F');
					$yearname = $monthlyservice->year;
					$taskname = $task->projectservice->service->name .' / '. $monthName .' '. $yearname .' / '. $task->title;
	            } 
			if($oldenddate==Null){
				$activity->message ='Changed end date of <a href="'. $urltask .'">' . $taskname .'</a> to '. date("d/m/Y", strtotime($date));
			} else {
				$activity->message ='Changed end date of <a href="'. $urltask .'">' . $taskname .'</a> from '. date("d/m/Y", strtotime($oldenddate)) .' to '. date("d/m/Y", strtotime($date));
			}
			
 			
			$activity->urltask = $urltask;	
			$activity->save(false);
			
				if($task->parent_id > 0){
					$enddatechange = $this->check_enddates_subtasks($task->parent_id,$task->due_date);
					$showenddatechange =  date('M d', strtotime($enddatechange));
					$arrid = array('status' => 'success','id'=> $task->parent_id,'endDate'=> $enddatechange,'showendDate'=> $showenddatechange);
					array_push($arrids, $arrid); 
					$task1 = Task::find()->andWhere(['task.id'=>$task->parent_id])->one();
					if($enddatechange != null && $enddatechange != 0){
						$task1->due_date = $enddatechange;
						$task1->save(false);
					
					}
					if(!empty($task1) && $task1->parent_id > 0){
						$enddatechange = $this->check_enddates_subtasks($task1->parent_id,$task->due_date);
						$showenddatechange =  date('M d', strtotime($enddatechange));
							$arrid = array('status' => 'success','id'=> $task1->parent_id,'endDate'=> $enddatechange,'showendDate'=> $showenddatechange );
							array_push($arrids, $arrid);
							$task2 = Task::find()->andWhere(['task.id'=>$task1->parent_id])->one();
							if($enddatechange != null && $enddatechange != 0){
								$task2->due_date = $enddatechange;
								$task2->save(false);
							}

							if(!empty($task2) & $task2->parent_id > 0){
								$enddatechange = $this->check_enddates_subtasks($task2->parent_id,$task->due_date);
								$showenddatechange =  date('M d', strtotime($enddatechange));
									$arrid = array('status' => 'success','id'=> $task2->parent_id,'endDate'=> $enddatechange,'showendDate'=> $showenddatechange);
									array_push($arrids, $arrid);	
								$task3 = Task::find()->andWhere(['task.id'=>$task2->parent_id])->one();
								if($enddatechange != null && $enddatechange != 0){
								$task3->due_date = $enddatechange;
								$task3->save(false);
								}
							}
					}
				
 					$result=[
						'status' => "success",
						'listdata' => $arrids,
						'dueDate' => $task->due_date,
						'idtask' => $task->id,
					];
					echo json_encode($result); die();
 			}else{ 
					$result=[
						'status' => "success",
						'listdata' => $arrids,
						'dueDate' => $task->due_date,
						'idtask' => $task->id,
					];
					echo json_encode($result); die();
			}

			/*if($task->parent_id > 0){
				$task = Task::find()->andWhere(['task.id'=>$task->parent_id])->one();
				if($task->parent_id > 0){
					$task = Task::find()->andWhere(['task.id'=>$task->parent_id])->one();
					if($task->parent_id > 0){
						$task = Task::find()->andWhere(['task.id'=>$task->parent_id])->one();
					}
				}
			}

			$changedates = $this->check_dates_subtasks($task->id);
			$changedates = $this->check_dates_subtasks($changedates);
			$changedates = $this->check_dates_subtasks($changedates);


			$parenttask = Task::find()->where(['task.id'=>$changedates])->one();
			$arrid = array('status' => 'success','dueDate'=> $parenttask->due_date,'id' => $parenttask->id);
			array_push($arrids, $arrid);
			$childtask = Task::find()->where(['task.parent_id'=>$changedates])->all();
			if(!empty($childtask)){ 
				foreach($childtask as $child){
					$arrid = array('status' => 'success','dueDate'=> $child->due_date,'id' => $child->id );
					array_push($arrids, $arrid);
					$childtask1 = Task::find()->where(['task.parent_id'=>$child->id])->all();
					if(!empty($childtask1)){
						foreach($childtask1 as $child1){
							$arrid = array('status' => 'success','dueDate'=>$child1->due_date,'id' => $child1->id);
							array_push($arrids, $arrid);
							$childtask2 = Task::find()->where(['task.parent_id'=>$child1->id])->all();
							if(!empty($childtask2)){
								foreach($childtask2 as $child2){
									$arrid = array('status' => 'success','dueDate'=> $child2->due_date,'id' => $child2->id);
									array_push($arrids, $arrid);
								}
							}
						}
					}
				}
			}*/
			

			$result=[
				'status' => "success",
				'listdata' => $arrids,
				'dueDate' => $task->due_date,
				'idtask' => $task->id,
				
			];
			return $result;
		}else{
			$result=[
				'status' => "error",
				'listdata' => $arrids,
			];
			return $result;
		
		  

		}
	  }else{
		$result=[
			'status' => "error",
			'listdata' => $arrids,
		];
		return $result;
	  }

	}
	public function actionChangetitle() { 
	  $value = $_POST["value"];
	  $task_id = $_POST["task_id"];
	  $task = Task::find()->andWhere(['task.id'=>$task_id])->one();
	  if(!empty($task)){
		$task->title = $value;
		if($task->save(false)){
			echo "success"; die();
		}else{
			echo "error"; die();
		}
	  }else{
		  echo "error"; die();
	  }

	}
	public function actionEventdetails() { 

        $id = $_POST["id"];
        //$task = Task::find()->joinWith(['post','post.postfile','post.comment','post.comment.commentfile','projectservice','projectservice.project'])->andWhere(['task.id'=>$id])->one();
        $task = Task::find()->joinWith(['projectservice','projectservice.project'])->andWhere(['task.id'=>$id])->one();
       
	
       
        $results = [
            "id" => $id,
            "projectName" => $task->projectservice->project->name,
            "taskName" => $task->title,
            "priority" => $task->priority_id,
            "status" => $task->status,
            "startDate" => $task->start_date,
            "dueDate" => $task->due_date,
            "details" => $task->details,
        ];
        echo json_encode($results);
        exit();
	}
	
	public function actionChangedatetask(){
		$newdate = $_POST["newdate"];
		$taskid = $_POST["taskid"];
		 $task = Task::find()->andWhere(['task.id'=>$taskid])->one();
		 $task->due_date = $newdate;
		 if($task->save(false)){

			echo "success";
			exit();
		 }else{
			echo "error";
			exit();

		 }
	}
	
	
	public function actionReordertasks(){
		$jsontasklevel = $_POST["jsontasklevel"];
        $arraytasklevel = json_decode($jsontasklevel);
        $where = '';
        foreach ($arraytasklevel as $arraytaklevel) { 
			$task = Task::find()->where(['id'=>$arraytaklevel->task_id])->one();
			$task->level= $arraytaklevel->data_level;
			$task->parent_id= $arraytaklevel->parent_id;
			$task->order= $arraytaklevel->order;
			$task->save(false);
		}
		return "1";
	}
	
	
	
	
	/*public function actionAddoneoffservice(){
		\Yii::$app->response->format = 'json';
		$project_id = $_POST["project_id"];
		$service_id = $_POST["service_id"];
		$project_service = ProjectService::find()->where(['service_id'=>$service_id])->andWhere(['project_id'=>$project_id])->andwhere(['type'=>0])->one();
		if(empty($project_service)){
		$time = new \DateTime('now');
		$today = $time->format('Y-m-d');
		$firstdate =  date('Y-m-01', strtotime($today));

		$lastdate =  date('Y-m-t', strtotime($today));
			$project_service = new ProjectService();
			$project_service->service_id = $service_id;
			$project_service->project_id = $project_id;
			$project_service->type = 0;
			$project_service->save(false);


				
			$templates = TemplateTask::find()->andWhere(['service_id'=>$service_id])->andWhere(['template_task_id'=>0])->all();
			if(!empty($templates)){
				foreach($templates as $template){
					
					$task = new Task();
					$task->project_service_id = $project_service->id;
					$task->project_monthly_service = 0;
					$task->title = $template->title;
					//$task->start_date = $firstdate;
					//$task->due_date = $lastdate;
					$task->due_date = null;
					$task->due_date = null;
					$task->order = $template->order;
					$task->level =$template->level;
					$task->priority_id =0;
					$task->status = 0;
					$task->parent_id = 0;
					$task->save(false);
					
					$childtemplates = TemplateTask::find()->where(['service_id'=>$service_id])->andWhere(['template_task_id'=>$template->id])->all();
					if(!empty($childtemplates)){
						foreach($childtemplates as $childtemplate){
							$childtask = new Task();
							$childtask->project_service_id = $project_service->id;
							$childtask->project_monthly_service = 0;
							$childtask->title = $childtemplate->title;
							//$childtask->start_date = $firstdate;
							//$childtask->due_date = $lastdate;
							$childtask->due_date = null;
							$childtask->due_date = null;
							$childtask->order = $childtemplate->order;
							$childtask->level =$childtemplate->level;
							$childtask->priority_id =0;
							$childtask->status = 0;
							$childtask->parent_id = $task->id;
							$childtask->save(false);
						}				
					}	
				}
			}
			$results = [
				"status" => "success",
				"message" => "success!",
			];
		}else{
			$results = [
				"status" => "error",
				"message" => "Project service not found!",
			];
		}


	   return $results;

	}*/
	
	public function actionAddoneoffservice(){
		\Yii::$app->response->format = 'json';
		$project_id = $_POST["project_id"];
		$services_id = $_POST["services_id"];
		$arrayservices = explode(',', $services_id);
		if(!empty($arrayservices)){
			for($i=0;$i< count($arrayservices); $i++){
			$project_service = ProjectService::find()->where(['service_id'=>$arrayservices[$i]])->andWhere(['project_id'=>$project_id])->andwhere(['type'=>0])->one();
			if(empty($project_service)){
			$time = new \DateTime('now');
			$today = $time->format('Y-m-d');
			$firstdate =  date('Y-m-01', strtotime($today));

			$lastdate =  date('Y-m-t', strtotime($today));
				$project_service = new ProjectService();
				$project_service->service_id = $arrayservices[$i];
				$project_service->project_id = $project_id;
				$project_service->type = 0;
				$project_service->save(false);

				$templates = TemplateTask::find()->andWhere(['service_id'=>$arrayservices[$i]])->andWhere(['template_task_id'=>0])->all();
				if(!empty($templates)){
					foreach($templates as $template){
						
						$task = new Task();
						$task->project_service_id = $project_service->id;
						$task->project_monthly_service = 0;
						$task->title = $template->title;
						//$task->start_date = $firstdate;
						//$task->due_date = $lastdate;
						$task->due_date = null;
						$task->due_date = null;
						$task->order = $template->order;
						$task->level =$template->level;
						$task->priority_id =0;
						$task->status = 0;
						$task->parent_id = 0;
						$task->save(false);
						
						$childtemplates = TemplateTask::find()->where(['service_id'=>$arrayservices[$i]])->andWhere(['template_task_id'=>$template->id])->all();
						if(!empty($childtemplates)){
							foreach($childtemplates as $childtemplate){
								$childtask = new Task();
								$childtask->project_service_id = $project_service->id;
								$childtask->project_monthly_service = 0;
								$childtask->title = $childtemplate->title;
								//$childtask->start_date = $firstdate;
								//$childtask->due_date = $lastdate;
								$childtask->due_date = null;
								$childtask->due_date = null;
								$childtask->order = $childtemplate->order;
								$childtask->level =$childtemplate->level;
								$childtask->priority_id =0;
								$childtask->status = 0;
								$childtask->parent_id = $task->id;
								$childtask->save(false);
							}				
						}	
					}
				}

			}

			}
				$results = [
					"status" => "success",
					"message" => "success!",
				];
		}else{
			$results = [
				"status" => "error",
				"message" => "Services is empty!",
			];
		}
	   return $results;

	}
	
	
	public function actionAddmonthservice(){	 
		\Yii::$app->response->format = 'json';
		$project_id = $_POST["project_id"];
		$date = $_POST["date"];
		$services_id = $_POST["services_id"];
		$arrayservices = explode(',', $services_id);
		if(!empty($arrayservices)){
			for($i=0;$i< count($arrayservices); $i++){
			$service_id = $arrayservices[$i];
			

		
		
		$month = date("m", strtotime($date));
		$year = date("Y", strtotime($date));
		$project_service = ProjectService::find()->where(['service_id'=>$service_id])->andWhere(['project_id'=>$project_id])->one();
		if(empty($project_service)){
			$project_service = new ProjectService();
			$project_service->project_id = $project_id;
			$project_service->service_id = $service_id;
			$project_service->type = 1;
			$project_service->save(false);
		}
		if(!empty($project_service)){
			$projmonthservice = ProjectMonthlyService::find()->where(['project_service_id'=>$project_service->id])->andWhere(['month'=>$month])->andWhere(['year'=>$year])->one();
			if(!empty($projmonthservice)){
				/*$results = [
					"status" => "error",
					"message" => "Service already added in this month!",
				];*/
			}else{
				$projmonthservice = new ProjectMonthlyService();
				$projmonthservice->project_service_id = $project_service->id;
				$projmonthservice->month = $month;
				$projmonthservice->year = $year;
				$projmonthservice->start_date = null;
				$projmonthservice->start_date = null;
				$projmonthservice->save(false);
				
				$templates = TemplateTask::find()->andWhere(['service_id'=>$service_id])->andWhere(['template_task_id'=>0])->orderBy(['order' => SORT_ASC])->all();
				if(!empty($templates)){
					foreach($templates as $template){
						
						$task = new Task();
						$task->project_service_id = $project_service->id;
						$task->project_monthly_service = $projmonthservice->id;
						$task->title = $template->title;

						$task->start_date = null;
						$task->due_date = null;
						$task->order = $template->order;
						$task->level =$template->level;
						//$task->priority_id =$priority_id;
						$task->priority_id =0;
						//$task->status = $status;
						$task->status = 0;
						$task->parent_id = 0;
						$task->save(false);
						

						
						$childtemplates = TemplateTask::find()->where(['service_id'=>$service_id])->andWhere(['template_task_id'=>$template->id])->orderBy(['order' => SORT_ASC])->all();
						if(!empty($childtemplates)){
							foreach($childtemplates as $childtemplate){
								$childtask = new Task();
								$childtask->project_service_id = $project_service->id;
								$childtask->project_monthly_service = $projmonthservice->id;
								$childtask->title = $childtemplate->title;
								//$childtask->start_date = $startDate;
								//$childtask->due_date = $endDate;
								$childtask->start_date = null;
								$childtask->due_date = null;
								$childtask->order = $childtemplate->order;
								$childtask->level =$childtemplate->level;
								//$childtask->priority_id =$priority_id;
								$childtask->priority_id =0;
								//$childtask->status = $status;
								$childtask->status = 0;
								$childtask->parent_id = $task->id;
								$childtask->save(false);
								
														
								/*if(is_array($arrayassignusres) && !empty($arrayassignusres)){
									//foreach ($arrayassignusres as $arrayuser) { 
									for($i=0; $i<count($arrayassignusres); $i++) { 
										  $taskuser = new TaskUser();
										  $taskuser->task_id =  $childtask->id;
										  $taskuser->user_id =  $arrayassignusres[$i];
										  $taskuser->status =  0;
										  $taskuser->save(false);
									}
								}*/
							}				
						}	
					}
				}
				

			}
		}
	}
	
				$results = [
					"status" => "success",
					"message" => "success!",
				];
		
			}else{
			$results = [
				"status" => "error",
				"message" => "Project service not found!",
			];
		}
		 return $results;
		
	}
	
	/*public function actionAddmonthservice(){	 
		\Yii::$app->response->format = 'json';
		$jsontusers = $_POST["jsontusers"];
		$project_id = $_POST["project_id"];
		$service_id = $_POST["service_id"];
		$priority_id = $_POST["priority_id"];
		$monthDate = $_POST["monthDate"];
		$startDate = $_POST["startDate"];
		$endDate = $_POST["endDate"];
		$status = $_POST["status"];
		$jsontassignusres = $_POST["jsontassignusres"];
		
		$arrayassignusres  = json_decode($jsontassignusres);
		
        $users = json_decode($jsontusers);
		
		$startDate = str_replace('/', '-', $startDate);
		$startDate = date("Y-m-d", strtotime($startDate));
		$endDate = str_replace('/', '-', $endDate);
		$endDate = date("Y-m-d", strtotime($endDate));
		
		
		$month = date("m", strtotime($monthDate));
		$year = date("Y", strtotime($monthDate));
		$project_service = ProjectService::find()->where(['service_id'=>$service_id])->andWhere(['project_id'=>$project_id])->one();
		if(empty($project_service)){
			$project_service = new ProjectService();
			$project_service->project_id = $project_id;
			$project_service->service_id = $service_id;
			$project_service->type = 1;
			$project_service->save(false);
		}
		if(!empty($project_service)){
			$projmonthservice = ProjectMonthlyService::find()->where(['project_service_id'=>$project_service->id])->andWhere(['month'=>$month])->andWhere(['year'=>$year])->one();
			if(!empty($projmonthservice)){
				$results = [
					"status" => "error",
					"message" => "Service already added in this month!",
				];
			}else{
				$projmonthservice = new ProjectMonthlyService();
				$projmonthservice->project_service_id = $project_service->id;
				$projmonthservice->month = $month;
				$projmonthservice->year = $year;
				$projmonthservice->start_date = $startDate;
				$projmonthservice->start_date = $endDate;
				$projmonthservice->save(false);
				
				$templates = TemplateTask::find()->andWhere(['service_id'=>$service_id])->andWhere(['template_task_id'=>0])->all();
				if(!empty($templates)){
					foreach($templates as $template){
						
						$task = new Task();
						$task->project_service_id = $project_service->id;
						$task->project_monthly_service = $projmonthservice->id;
						$task->title = $template->title;

						$task->start_date = null;
						$task->due_date = null;
						$task->order = $template->order;
						$task->level =$template->level;
						//$task->priority_id =$priority_id;
						$task->priority_id =0;
						//$task->status = $status;
						$task->status = 0;
						$task->parent_id = 0;
						$task->save(false);
						
						if(is_array($arrayassignusres) && !empty($arrayassignusres)){
							//foreach ($arrayassignusres as $arrayuser) { 
							for($i=0; $i<count($arrayassignusres); $i++) { 
								  $taskuser = new TaskUser();
								  $taskuser->task_id =  $task->id;
								  $taskuser->user_id =  $arrayassignusres[$i];
								  $taskuser->status =  0;
								  $taskuser->save(false);
							}
						}
						
						$childtemplates = TemplateTask::find()->where(['service_id'=>$service_id])->andWhere(['template_task_id'=>$template->id])->all();
						if(!empty($childtemplates)){
							foreach($childtemplates as $childtemplate){
								$childtask = new Task();
								$childtask->project_service_id = $service_id;
								$childtask->project_monthly_service = $project_monthly_service;
								$childtask->title = $childtemplate->title;
								//$childtask->start_date = $startDate;
								//$childtask->due_date = $endDate;
								$childtask->start_date = null;
								$childtask->due_date = null;
								$childtask->order = $childtemplate->order;
								$childtask->level =$childtemplate->level;
								//$childtask->priority_id =$priority_id;
								$childtask->priority_id =0;
								//$childtask->status = $status;
								$childtask->status = 0;
								$childtask->parent_id = $task->id;
								$childtask->save(false);
								
														
								if(is_array($arrayassignusres) && !empty($arrayassignusres)){
									//foreach ($arrayassignusres as $arrayuser) { 
									for($i=0; $i<count($arrayassignusres); $i++) { 
										  $taskuser = new TaskUser();
										  $taskuser->task_id =  $childtask->id;
										  $taskuser->user_id =  $arrayassignusres[$i];
										  $taskuser->status =  0;
										  $taskuser->save(false);
									}
								}
							}				
						}	
					}
				}
				
				$results = [
					"status" => "success",
					"message" => "success!",
				];
			}
		}else{
			$results = [
				"status" => "error",
				"message" => "Project service not found!",
			];
		}
		 return $results;
		
	}*/
	

	public function actionAddsiblingsubtask(){
		$parent_id = $_POST["parent_id"];
		$data_level = $_POST["data_level"];
		$project_id = $_POST["project_id"];
		$data_order = $_POST["data_order"];
		
		$parent_task = Task::find()->where(['id'=>$parent_id])->one();
		$tasks = Task::find()->where(['task.project_service_id'=>$parent_task->project_service_id])->andWhere('task.order >'.$data_order)->all();
		
		foreach($tasks as $task){
			 $order = $task->order + 1;
			 $task->order = $order;
			 $task->save(false);
		}
		
		
		$data_order = (int)$data_order + 1;
		
		
		$task = new Task();
		$task->project_service_id = $parent_task->project_service_id;
		$task->hereandthere_id = $parent_task->hereandthere_id;
		$task->project_monthly_service = $parent_task->project_monthly_service;
		$task->title = "";
		$task->start_date = null;
		$task->due_date = null;
		$task->parent_id = $parent_task->id;
		$task->priority_id = 0;
		$task->order = $data_order;
		$task->level = $data_level;
		$task->save(false);
		$data ='';
			/*$data .='<ul class="datalevel" data_level="'.$task->level.'" data_servicetask="3">';
	$data .='<li class="parentitem'.$parent_task->id.' isparent " data_id="'.$task->id.'" data_parent="'.$parent_task->id.'" data_servicetask="'.$parent_task->project_service_id.'" data_order="'.$task->order.'"> ';
	$data .='<div class="task-row">';
	$data .='<div class="for-title" data_id="'.$task->id.'">';
		$data .='<span class="t-title">';
			$data .='<input type="text" class="edittext" value="test new " data_id="'.$task->id.'">';
				 $data .='</span></div>';
				  $data .='<div class="for-assignees showassignes">';
						$data .='<div class="filter-block forcalendar">';
						$data .='<select class="selecteduser" multiple="multiple" style="display: none;"';																
							$data .='<option value="3" data_task_id="'.$task->id.'">Rana Rahme</option>';						
							$data .='<option value="4" data_task_id="'.$task->id.'">Andrew Adebiyi</option>';									
							$data .='<option value="6" data_task_id="'.$task->id.'">Rita Bejjany</option>';							
							$data .='<option value="1" data_task_id="'.$task->id.'">Rony Chiha</option>';							
							$data .='<option value="20" data_task_id="'.$task->id.'">Barbara Abou Rjeily</option>';
						$data .='</select>';
						$data .='<div class="btn-group">';
						$data .='<button type="button" class="multiselect dropdown-toggle custombuttonmulti firstselect0" data-toggle="dropdown" title="None selected"><span class="multiselect-selected-text">None selected</span> <b class="caret"></b></button>';
						$data .='<ul class="multiselect-container dropdown-menu" style="display: none;">';
							$data .='<li><a tabindex="0"><label class="checkbox"><input type="checkbox" value="3"> Rana Rahme</label></a></li>';
							$data .='<li><a tabindex="0"><label class="checkbox"><input type="checkbox" value="4"> Andrew Adebiyi</label></a></li>';
							$data .='<li><a tabindex="0"><label class="checkbox"><input type="checkbox" value="6"> Rita Bejjany</label></a></li>';
							$data .='<li><a tabindex="0"><label class="checkbox"><input type="checkbox" value="1"> Rony Chiha</label></a></li>';
							$data .='<li><a tabindex="0"><label class="checkbox"><input type="checkbox" value="20"> Barbara Abou Rjeily</label></a></li>';
						$data .='</ul>';
						$data .='</div>';
					$data .='</div>';
			$data .='</div>';
			$data .='<div class="for-status">';
				$data .='<select class="hidden selectstatus changestatus changestatus'.$task->id.'" data_id="'.$task->id.'" name="changestatus" style="display: none;">';
				$data .='<option data-display="Select" value="">Select</option>';
				$data .='<option value="0">Select</option>';
				$data .='<option value="1">Working on it</option>';
				$data .='<option value="2">Waiting for review</option>';
				$data .='<option value="3">Done</option>';
				$data .='<option value="4">Stuck</option>';
				$data .='</select><div class="nice-select hidden selectstatus changestatus changestatus'.$task->id.'" tabindex="0"><span class="current">Select</span><ul class="list"><li data-value="" data-display="Select" class="option selected">Select</li><li data-value="0" class="option">Select</li><li data-value="1" class="option">Working on it</li><li data-value="2" class="option">Waiting for review</li><li data-value="3" class="option">Done</li><li data-value="4" class="option">Stuck</li></ul></div>';
				$data .='<div class="showforstatus" data-id="'.$task->id.'">';
					$data .='<div class="selectedoption" id="forstatus'.$task->id.'"><div class="statusselect"> Select </div> </div>';
					$data .='<div class="myoptions" style="display: none;"> ';
						$data .='<div class="statustoselect optionselect" data-id="0">Select</div>';
						$data .='<div class="statustoselect optionworking" data-id="1">Working on it</div>';
						$data .='<div class="statustoselect optionwaiting" data-id="2">Waiting for review </div>';
						$data .='<div class="statustoselect optiondone" data-id="3">Done</div>';
						$data .='<div class="statustoselect optionstuck" data-id="4">Stuck</div>';
					$data .='</div>';
				$data .='</div>';
			$data .='</div>';
			$data .='<div class="for-start">';
				$data .='<input class="changeStartDate changeStartDate'.$task->id.' hasDatepicker" value="" data_id="'.$task->id.'" placeholder="Add Start Date" id="dp1575119864057">';
			$data .='</div>';
			$data .='<div class="for-due">';
				$data .='<input class="changeEndDate changeEndDate'.$task->id.' hasDatepicker" value="" data_id="'.$task->id.'" placeholder="Add Due Date" id="dp1575119864076">';
			$data .='</div>';
			$data .='<div class="for-priority">';
				$data .='<div class="for-priority hidden">';
					$data .='<select class="wide selectstatus changepriority changepriority'.$task->id.'" name="changepriority" data_id="'.$task->id.'" style="display: none;">';
							$data .='<option data-display="Select" value="">Select</option>';
							$data .='<option value="1">Low</option>';
							$data .='<option value="2">Normal</option>';
							$data .='<option value="3">High</option>';
							$data .='<option value="4">Urgent</option>';
						$data .='</select>';
						$data .='<div class="nice-select wide selectstatus changepriority changepriority'.$task->id.'" tabindex="0">';
							$data .='<span class="current">Select</span>';
							$data .='<ul class="list">';
								$data .='<li data-value="" data-display="Select" class="option selected">Select</li>';
								$data .='<li data-value="1" class="option">Low</li><li data-value="2" class="option">Normal</li>';
								$data .='<li data-value="3" class="option">High</li><li data-value="4" class="option">Urgent</li>';
							$data .='</ul>';
						$data .='</div>';
			$data .='</div>';
					$data .='<div class="showforpriorities" data-id="'.$task->id.'">';
						$data .='<div class="selectedoption" id="forprio'.$task->id.'"><div class="statusselect"> Select </div> </div>';
						$data .='<div class="myoptions" style="display: none;"> ';
						$data .='<div class="prioritytoselect Select" data-id="0">Select</div>';
							$data .='<div class="prioritytoselect Low" data-id="1">Low</div>';
							$data .='<div class="prioritytoselect Normal" data-id="2">Normal</div>';
							$data .='<div class="prioritytoselect High" data-id="3">High</div>';
							$data .='<div class="prioritytoselect Urgent" data-id="4">Urgent</div>';
						$data .='</div>';
					$data .='</div>';
			$data .='</div>';
			$data .='<div class="for-actions">';
				$data .='<div class="add-task-icon bottom-add" data-id="'.$task->id.'" data_level="2"></div>';
				$data .='<div class="add-sub-icon bottom-sub-add" data-id="'.$task->id.'" data_level="2"></div>';
				$data .='<div class="remove-task-icon task-remove" data-id="'.$task->id.'" data_level="2"></div>';
		   $data .='</div>';
	$data .='</div>';
	$data .='<ul class="datalevel" data_level="3" data_servicetask="3"></ul>';
  $data .='</li>';
$data .='</ul>';*/
		

		//return $data;
		return $data_order;
		
	}
	public function actionAddnewtask(){
		$data_level = $_POST["data_level"];
		$data_service_id = $_POST["data_service_id"];
		$project_id = $_POST["project_id"];
		$data_monthly_id = $_POST["data_monthly_id"];
		$data_order = $_POST["data_order"];
		$userid = \Yii::$app->user->getId();
		$task = new Task();
		$task->project_service_id = $data_service_id;
		$task->hereandthere_id = 0;
		$task->project_monthly_service = $data_monthly_id;
		$task->title = "No Title";
		$task->start_date = null;
		$task->due_date = null;
		$task->parent_id = 0;
		$task->priority_id = 0;
		$task->order = $data_order;
		$task->level = $data_level;
		$task->save(false);
		$data ='';
 		$activity = new ActivityLogs();
		$activity->user_id= $userid;
		$activity->type= 3;
		$activity->task_id= $task->id;
		$activity->project_id= $task->projectservice->project->id;
		$projectname = $task->projectservice->project->name;
		$taskname = $task->projectservice->service->name .' / '. $task->title;
 		if($task->projectservice->type == 0){
			$urltask = \Yii::$app->params['baseurl']."/accounts/oneofftasks?id=".$task->projectservice->project_id."&task=".$task->id;
		}else if($task->projectservice->type == 1){
			$urltask = \Yii::$app->params['baseurl']."/accounts/monthlytasks?id=".$task->projectservice->project_id."&task=".$task->id;
			$monthlyservice = ProjectMonthlyService::find()->where(['id'=> $task->project_monthly_service ])->one();
 					$monthNum = $monthlyservice->month;
					$dateObj = DateTime::createFromFormat('!m', $monthNum);
					$monthName = $dateObj->format('F');
					$yearname = $monthlyservice->year;
					$taskname = $task->projectservice->service->name .' / '. $monthName .' '. $yearname .' / '. $task->title;
			
		}
		$activity->message ='Created a new task <a href="'. $urltask .'">' .$taskname  .'</a>';	
		$activity->urltask = $urltask;	
		$activity->save(false);
		//return "1";	
		return $task->id;	
	}
	public function actionAddmonthlysubtask(){
		$userid = \Yii::$app->user->getId();
		$parent_id = $_POST["parent_id"];
		$data_parent_level = $_POST["data_parent_level"];
		$project_id = $_POST["project_id"];
		$data_monthly_id = $_POST["data_monthly_id"];
		
		$parent_task = Task::find()->where(['id'=>$parent_id])->one();
		$tasks = Task::find()->where(['task.project_service_id'=>$parent_task->project_service_id])->andWhere('task.order > '.$parent_task->order)->all();
		
		foreach($tasks as $task){
			 $order = $task->order + 1;
			 $task->order = $order;
			 $task->save(false);
		}
 		$task = new Task();
		$task->project_service_id = $parent_task->project_service_id;
		$task->hereandthere_id = $parent_task->hereandthere_id;
		$task->project_monthly_service = $parent_task->project_monthly_service;
		$task->title = "";
		$task->start_date = null;
		$task->due_date = null;
		$task->parent_id = $parent_task->id;
		$task->priority_id = 0;
		$task->order = $parent_task->order + 1;
		$task->level = $parent_task->level+1;
		$task->save(false);
		$data ='';
		$activity = new ActivityLogs();
		$activity->user_id= $userid;
		$activity->type= 4;
		$activity->task_id= $task->id;
		$activity->project_id= $task->projectservice->project->id;
		$projectname = $task->projectservice->project->name;
		$taskname = $task->projectservice->service->name .' / '. $task->title;
 		if($task->projectservice->type == 0){
			$urltask = \Yii::$app->params['baseurl']."/accounts/oneofftasks?id=".$task->projectservice->project_id."&task=".$task->id;
		}else if($task->projectservice->type == 1){
			$urltask = \Yii::$app->params['baseurl']."/accounts/monthlytasks?id=".$task->projectservice->project_id."&task=".$task->id;
			$monthlyservice = ProjectMonthlyService::find()->where(['id'=> $task->project_monthly_service ])->one();
 			$monthNum = $monthlyservice->month;
			$dateObj = DateTime::createFromFormat('!m', $monthNum);
			$monthName = $dateObj->format('F');
			$yearname = $monthlyservice->year;
			$taskname = $task->projectservice->service->name .' / '. $monthName .' '. $yearname .' / '. $task->title;
 		} 
		$activity->message ='Created a new subtask  <a href="'. $urltask .'">' . $taskname  .'</a>';
 		$activity->urltask = $urltask;	
		$activity->save(false);
		return "success";exit;
	}
	
	public function actionGetlogintime(){
			$parent_id = $_POST["id"];
			$userid=\Yii::$app->user->getId();
		$currentuser = User::findOne($userid);
		  $totaltime  = TrakingTime::workingtimeononetaskbyuser($parent_id,$currentuser->id); 
						 
						 $hours = floor($totaltime / 60);
						 $mins = $totaltime%60;
						echo 	$hours.'h '.$mins.'m';

		//return $data;
	}	
		public function actionGetassignes(){
		$task_id = $_POST["id"]; 
		$id = $_POST["data_project_id"]; 
		$userid=\Yii::$app->user->getId();
		$currentuser = User::findOne($userid);
		$project_users =  ProjectUser::find()->joinWith(['user'])->where(['project_user.project_id'=>$id])->andWhere(['project_user.status'=>1])->andWhere(['user.deleted'=>0])->andWhere(['user.active'=>1])->all();
		
		?>
	
	<?php if($currentuser->role_id == 1 || $currentuser->role_id == 2){ ?>
					    <div class="for-assignees showassignes">
					    <div class="filter-block forcalendar">
							<select class="selecteduser hidden" multiple="multiple" >
							 <optgroup label="All People">
							 <?php 
								$assignusers  = Task::UserAssignTasks($task_id);
							 ?><?php 	foreach($project_users as $project_user){ 
									$name = "";			
									$name .= (!empty($project_user->user->first_name)?$project_user->user->first_name." ":"");
									$name .= (!empty($project_user->user->last_name)?$project_user->user->last_name:"");
									$user_img= (!empty($project_user->user->image)?$project_user->user->image:"default.png");
								?> 
									<option value="<?=  $project_user->user_id; ?>" <?php echo (in_array($project_user->user_id, $assignusers))?"selected":""; ?> data_task_id="<?= $task_id; ?>" data-img="<?= $user_img; ?>"  ><?= $name; ?></option>
								<?php	}	?>
								</optgroup>
							</select>
					    </div>
					    </div>
					  <?php }else{ ?>
						<div class="users_assign_imagea">
							<?php 
								$assignusers  = Task::ListUserAssignTasks($task_id);
							?>
							<?php 	foreach($assignusers as $listuser){ ?>
								<div class="user_assign_image">
									<?php $url = (!empty($listuser->user->image))?Url::base(true)."/uploads/users/".$listuser->user->image:Url::base(true)."/uploads/users/default.png"; ?>
									<img class="user_assign_image" src="<?= $url; ?>">
								</div>
							<?php } ?>
						</div>
					  <?php } ?>
		<script>
		    $('.modal-top-section .selecteduser').multiselect({
			includeSelectAllOption: false,
			 enableFiltering: true,
			 enableHTML: true,
             optionLabel: function(element) {
             return '<img src="<?= Url::base(); ?>/uploads/users/'+ $(element).attr('data-img')+'"> '+ $(element).text();
            },
			buttonText: function(options, select) {
				var icons='';
				if(options.length==0){
					$(this).parent().find('div.btn-group').find('span.multiselect-selected-text').html('Non Selected');	
					icons = '<span class="no-user-selected">Non Selected</span>';
					return icons;
				}else{
				options.each(function () {
						icons +='<img class="selectedicon" src="<?= Url::base(); ?>/uploads/users/'+ $(this).attr('data-img')+'"> ';
                    });
					$(this).parent().find('div.btn-group').find('span.multiselect-selected-text').html(icons);	
					return icons;
				}
			},
		    enableCaseInsensitiveFiltering: true,
			//includeSelectAllOption : true,
		   // buttonWidth: '100%',
		    buttonClass: 'custombuttonmulti firstselect0', 
			onChange: function(option, checked, select) {
				var value = option[0].value;
				var task_id =option[0].attributes.data_task_id.value;
				$.ajax({
					url: '<?php echo Yii::$app->getUrlManager()->createUrl(''); ?>accounts/changeassignuser',
					type: 'post',
					data: {
						value: value,
						task_id: task_id,
					},
					dataType: "text",
					success: function (data) {
                      // $(this).parent('.subhselectfildwrap').find('div.btn-group').find('span.multiselect-selected-text').text(str);
					var icons='';
                    option.each(function () {
                        //labels.push($(this).attr('data-img'));
						icons +="<img src="+$(this).attr('data-img')+">";
                    });
					//alert(icons);
					$(this).parent().find('div.btn-group').find('span.multiselect-selected-text').html(icons);
					if(data == "error"){
							//alert("Something wrong please try again");
							location.reload();
					}
					},
					complete: function(data) {
							//location.reload();
					}
				});
				
				
				
			}
	});	
		</script>
<?php
		//return $data;
	
		
	}	
	
	public function actionAddsubtask(){
		$parent_id = $_POST["parent_id"];
		$data_parent_level = $_POST["data_parent_level"];
		$project_id = $_POST["project_id"];
		$userid = \Yii::$app->user->getId();
		$parent_task = Task::find()->where(['id'=>$parent_id])->one();
		$tasks = Task::find()->where(['task.project_service_id'=>$parent_task->project_service_id])->andWhere('task.order > '.$parent_task->order)->all();
		
		foreach($tasks as $task){
			 $order = $task->order + 1;
			 $task->order = $order;
			 $task->save(false);
		}
		
		$task = new Task();
		$task->project_service_id = $parent_task->project_service_id;
		$task->hereandthere_id = $parent_task->hereandthere_id;
		$task->project_monthly_service = $parent_task->project_monthly_service;
		$task->title = "";
		$task->start_date = null;
		$task->due_date = null;
		$task->parent_id = $parent_task->id;
		$task->priority_id = 0;
		$task->order = $parent_task->order + 1;
		$task->level = $parent_task->level+1;
		$task->save(false);
		$data ='';
		$activity = new ActivityLogs();
		$activity->user_id= $userid;
		$activity->type= 4;
		$activity->task_id= $task->id;
		$activity->project_id= $task->projectservice->project->id;
		$projectname = $task->projectservice->project->name;$taskname = $task->projectservice->service->name .' / '. $task->title;
 		if($task->projectservice->type == 0){
			$urltask = \Yii::$app->params['baseurl']."/accounts/oneofftasks?id=".$task->projectservice->project_id."&task=".$task->id;
		}else if($task->projectservice->type == 1){
			$urltask = \Yii::$app->params['baseurl']."/accounts/monthlytasks?id=".$task->projectservice->project_id."&task=".$task->id;
 			$monthlyservice = ProjectMonthlyService::find()->where(['id'=> $task->project_monthly_service ])->one();
 					$monthNum = $monthlyservice->month;
					$dateObj = DateTime::createFromFormat('!m', $monthNum);
					$monthName = $dateObj->format('F');
					$yearname = $monthlyservice->year;
					$taskname = $task->projectservice->service->name .' / '. $monthName .' '. $yearname .' / '. $task->title;
		} 
		$activity->message ='Created a new subtask  <a href="'. $urltask .'">' . $taskname  .'</a>';
		$activity->urltask = $urltask;	
		$activity->save(false);
	/*$data .='<ul class="datalevel" data_level="'.$task->level.'" data_servicetask="3">';
	$data .='<li class="parentitem'.$parent_task->id.' isparent " data_id="'.$task->id.'" data_parent="'.$parent_task->id.'" data_servicetask="'.$parent_task->project_service_id.'" data_order="'.$task->order.'"> ';
	$data .='<div class="task-row">';
	$data .='<div class="for-title" data_id="'.$task->id.'">';
		$data .='<span class="t-title">';
			$data .='<input type="text" class="edittext" value="test new " data_id="'.$task->id.'">';
				 $data .='</span></div>';
				  $data .='<div class="for-assignees showassignes">';
						$data .='<div class="filter-block forcalendar">';
						$data .='<select class="selecteduser" multiple="multiple" style="display: none;"';																
							$data .='<option value="3" data_task_id="'.$task->id.'">Rana Rahme</option>';						
							$data .='<option value="4" data_task_id="'.$task->id.'">Andrew Adebiyi</option>';									
							$data .='<option value="6" data_task_id="'.$task->id.'">Rita Bejjany</option>';							
							$data .='<option value="1" data_task_id="'.$task->id.'">Rony Chiha</option>';							
							$data .='<option value="20" data_task_id="'.$task->id.'">Barbara Abou Rjeily</option>';
						$data .='</select>';
						$data .='<div class="btn-group">';
						$data .='<button type="button" class="multiselect dropdown-toggle custombuttonmulti firstselect0" data-toggle="dropdown" title="None selected"><span class="multiselect-selected-text">None selected</span> <b class="caret"></b></button>';
						$data .='<ul class="multiselect-container dropdown-menu" style="display: none;">';
							$data .='<li><a tabindex="0"><label class="checkbox"><input type="checkbox" value="3"> Rana Rahme</label></a></li>';
							$data .='<li><a tabindex="0"><label class="checkbox"><input type="checkbox" value="4"> Andrew Adebiyi</label></a></li>';
							$data .='<li><a tabindex="0"><label class="checkbox"><input type="checkbox" value="6"> Rita Bejjany</label></a></li>';
							$data .='<li><a tabindex="0"><label class="checkbox"><input type="checkbox" value="1"> Rony Chiha</label></a></li>';
							$data .='<li><a tabindex="0"><label class="checkbox"><input type="checkbox" value="20"> Barbara Abou Rjeily</label></a></li>';
						$data .='</ul>';
						$data .='</div>';
					$data .='</div>';
			$data .='</div>';
			$data .='<div class="for-status">';
				$data .='<select class="hidden selectstatus changestatus changestatus'.$task->id.'" data_id="'.$task->id.'" name="changestatus" style="display: none;">';
				$data .='<option data-display="Select" value="">Select</option>';
				$data .='<option value="0">Select</option>';
				$data .='<option value="1">Working on it</option>';
				$data .='<option value="2">Waiting for review</option>';
				$data .='<option value="3">Done</option>';
				$data .='<option value="4">Stuck</option>';
				$data .='</select><div class="nice-select hidden selectstatus changestatus changestatus'.$task->id.'" tabindex="0"><span class="current">Select</span><ul class="list"><li data-value="" data-display="Select" class="option selected">Select</li><li data-value="0" class="option">Select</li><li data-value="1" class="option">Working on it</li><li data-value="2" class="option">Waiting for review</li><li data-value="3" class="option">Done</li><li data-value="4" class="option">Stuck</li></ul></div>';
				$data .='<div class="showforstatus" data-id="'.$task->id.'">';
					$data .='<div class="selectedoption" id="forstatus'.$task->id.'"><div class="statusselect"> Select </div> </div>';
					$data .='<div class="myoptions" style="display: none;"> ';
						$data .='<div class="statustoselect optionselect" data-id="0">Select</div>';
						$data .='<div class="statustoselect optionworking" data-id="1">Working on it</div>';
						$data .='<div class="statustoselect optionwaiting" data-id="2">Waiting for review </div>';
						$data .='<div class="statustoselect optiondone" data-id="3">Done</div>';
						$data .='<div class="statustoselect optionstuck" data-id="4">Stuck</div>';
					$data .='</div>';
				$data .='</div>';
			$data .='</div>';
			$data .='<div class="for-start">';
				$data .='<input class="changeStartDate changeStartDate'.$task->id.' hasDatepicker" value="" data_id="'.$task->id.'" placeholder="Add Start Date" id="dp1575119864057">';
			$data .='</div>';
			$data .='<div class="for-due">';
				$data .='<input class="changeEndDate changeEndDate'.$task->id.' hasDatepicker" value="" data_id="'.$task->id.'" placeholder="Add Due Date" id="dp1575119864076">';
			$data .='</div>';
			$data .='<div class="for-priority">';
				$data .='<div class="for-priority hidden">';
					$data .='<select class="wide selectstatus changepriority changepriority'.$task->id.'" name="changepriority" data_id="'.$task->id.'" style="display: none;">';
							$data .='<option data-display="Select" value="">Select</option>';
							$data .='<option value="1">Low</option>';
							$data .='<option value="2">Normal</option>';
							$data .='<option value="3">High</option>';
							$data .='<option value="4">Urgent</option>';
						$data .='</select>';
						$data .='<div class="nice-select wide selectstatus changepriority changepriority'.$task->id.'" tabindex="0">';
							$data .='<span class="current">Select</span>';
							$data .='<ul class="list">';
								$data .='<li data-value="" data-display="Select" class="option selected">Select</li>';
								$data .='<li data-value="1" class="option">Low</li><li data-value="2" class="option">Normal</li>';
								$data .='<li data-value="3" class="option">High</li><li data-value="4" class="option">Urgent</li>';
							$data .='</ul>';
						$data .='</div>';
			$data .='</div>';
					$data .='<div class="showforpriorities" data-id="'.$task->id.'">';
						$data .='<div class="selectedoption" id="forprio'.$task->id.'"><div class="statusselect"> Select </div> </div>';
						$data .='<div class="myoptions" style="display: none;"> ';
						$data .='<div class="prioritytoselect Select" data-id="0">Select</div>';
							$data .='<div class="prioritytoselect Low" data-id="1">Low</div>';
							$data .='<div class="prioritytoselect Normal" data-id="2">Normal</div>';
							$data .='<div class="prioritytoselect High" data-id="3">High</div>';
							$data .='<div class="prioritytoselect Urgent" data-id="4">Urgent</div>';
						$data .='</div>';
					$data .='</div>';
			$data .='</div>';
			$data .='<div class="for-actions">';
				$data .='<div class="add-task-icon bottom-add" data-id="'.$task->id.'" data_level="2"></div>';
				$data .='<div class="add-sub-icon bottom-sub-add" data-id="'.$task->id.'" data_level="2"></div>';
				$data .='<div class="remove-task-icon task-remove" data-id="'.$task->id.'" data_level="2"></div>';
		   $data .='</div>';
	$data .='</div>';
	$data .='<ul class="datalevel" data_level="3" data_servicetask="3"></ul>';
  $data .='</li>';
$data .='</ul>';*/
		

		//return $data;
		return "1";
		
	}			

	public function actionAddtasks(){	
		$jsontarrayTasks = $_POST["jsontarrayTasks"];
		$project_id = $_POST["project_id"];
        $arraytasks = json_decode($jsontarrayTasks);
        $where = '';
		$project_service_id = 0;
		$parent_id=0;
		$order=0;
		foreach ($arraytasks as $arraytask) { 
		$jsontassignusres = $arraytask->jsontassignusres;
		$arrayassignusres  = json_decode($jsontassignusres);
			if($arraytask->service_id > 0){ 
				$project_service = ProjectService::find()->where(['project_id'=>$project_id])->andWhere(['service_id'=>$arraytask->service_id])->andWhere(['type'=>2])->one();
				if(empty($project_service)){
					$project_service = new ProjectService();
					$project_service->project_id = $project_id;
					$project_service->service_id = $arraytask->service_id;
					$project_service->type = 2;
					$project_service->save(false);
				}
				$project_service_id = $project_service->id;
				$lasttask = Task::find()->where(['project_service_id'=>$project_service->id])->orderBy(['order' => SORT_DESC])->one();
				if(!empty($lasttask)){
					$order = $lasttask->order;
				}
				$parent_id=0;
			}
			$order++;
			
			$startDateTask = str_replace('/', '-', $arraytask->startDate);
			$endDateTask = str_replace('/', '-', $arraytask->endDate);
			
			$task = new Task();
			$task->project_service_id = $project_service_id;
			$task->title = $arraytask->title;
			$task->start_date = date("Y-m-d", strtotime($startDateTask));
			$task->due_date = date("Y-m-d", strtotime($endDateTask));
			$task->order = $order;
			$task->priority_id = $arraytask->priority_id;
			if($arraytask->parent ==0){
				$task->parent_id = 0;
			}else{
				if($arraytask->fakeparent > 0){
			
					foreach($arraytaskid as $ids){
						if($ids['fakeID'] == $arraytask->fakeparent){
						$task->parent_id = $ids['id'];  
					}
					
					}
				}
			}
			
			$task->save(false);
			
			if(is_array($arrayassignusres) && !empty($arrayassignusres)){
				//foreach ($arrayassignusres as $arrayuser) { 
				for($i=0; $i<count($arrayassignusres); $i++) { 
					  $taskuser = new TaskUser();
					  $taskuser->task_id =  $task->id;
					  $taskuser->user_id =  $arrayassignusres[$i];
					  $taskuser->status =  0;
					  $taskuser->save(false);
				}
			}
			
		  $arraytaskid [] = array('id' => $task->id,'fakeparent'=> $arraytask->fakeparent, 'fakeID' => $arraytask->fakeID);
			$parent_id = $task->id;
		}

		return "1";
	}
	public function actionGetusers(){
		$role_id = $_POST["role_id"];
		$users = User::find()->where(['deleted'=>0])->andWhere(['role_id'=>$role_id])->all();
		$result="";
		foreach($users as $user){	
				$name = "";			
				$name .= (!empty($user->first_name)?$user->first_name." ":"");
				$name .= (!empty($user->last_name)?$user->last_name:"");
			$result .="<option value=".$user->id.">".$name."</option>";
		}
		return $result;
	}
	public function actionDeletetask(){
		$id = $_POST["id"];
		
		$task = Task::find()->where(['id'=>$id])->one();
		if(!empty($task)){
			Task::deleteAll(['parent_id' => $id]);
			TrakingTime::deleteAll(['task_id' => $task->id]);
			Post::deleteAll(['task_id' => $task->id]);
			TaskUser::deleteAll(['task_id' => $task->id]);
			$task->delete(false);

			return "success";
		}else{
			return "success";
		}

	}
	
	public function actionArchivetask(){
		$id = $_POST["id"];
		
		$task = Task::find()->where(['id'=>$id])->one();
		$allchildtask  = Task::find()->where(['parent_id'=>$id])->all();
		if(!empty($task)){
			$task->archive = 1;
			$task->save(false);
			foreach($allchildtask as $childtask){
				$childtask->archive = 1;
				$childtask->save(false);	
			}
			return "success";
		}else{
			return "success";
		}
	}
	public function actionAssetremove(){
		$id = $_POST["id"];
		
		$assets = Assets::find()->where(['id'=>$id])->one();
		if(!empty($assets)){
			AssetsFile::deleteAll(['assets_id' => $id]);
			$assets->delete(false);
			return "success";
		}else{
			return "success";
		}

	}
	
	
	public function actionDeletemonthlyservice(){
		$project_service_id = $_POST["project_service_id"];
		$project_monthly_service = $_POST["data_project_monthly_service"];
		$project_service = ProjectService::find()->where(['id'=>$project_service_id])->one();
		$projectmonthlyservice = ProjectMonthlyService::find()->where(['id'=>$project_monthly_service])->andWhere(['project_service_id'=>$project_service_id])->one();
		if(!empty($projectmonthlyservice)){
			$tasks = Task::find()->where(['project_service_id'=>$project_service_id])->andWhere(['project_monthly_service'=>$project_monthly_service])->all();
			foreach($tasks as $task){
				$posts = Post::find()->joinWith(['postfile','comment','comment.commentfile'])->where(['task_id'=>$task->id])->all();
				foreach($posts as $post){
					if(!empty($post->postfile)){
						foreach($post->postfile as $postfile){
							$postfile->delete(false);
						}
					}
					if(!empty($post->comment)){
						foreach($post->comment as $comment){
							if(!empty($comment->commentfile)){
								foreach($comment->commentfile as $commentfile){
									$commentfile->delete(false);
								}
							}
							$comment->delete(false);
						}
					}
					$post->delete(false);
				}
				TrakingTime::deleteAll(['task_id' => $task->id]);
				$task->delete(false);
				
			}
			$projectmonthlyservice->delete(false);		
			$checkprojectmonthlyservice = ProjectMonthlyService::find()->where(['project_service_id'=>$project_service_id])->one();
			if(empty($checkprojectmonthlyservice)){
				$project_service->delete(false);
			}
			return "success";			
		}else{
			return "error";
		}
		return "success";
	}
	
		
	public function actionDeletemonthly(){

		$project_monthly_service = $_POST["data_project_monthly_service"];
		//$project_service = ProjectService::find()->where(['id'=>$project_service_id])->one();
		
		$projectmonthlyservice = ProjectMonthlyService::find()->where(['id'=>$project_monthly_service])->one();
		$projectmonthlyservices = ProjectMonthlyService::find()->where(['month'=>$projectmonthlyservice->month])->andWhere(['year'=>$projectmonthlyservice->year])->all();
		if(!empty($projectmonthlyservices)){
			foreach($projectmonthlyservices as $projectmonthlyservice){ 
			$project_service = ProjectService::find()->where(['id'=>$projectmonthlyservice->project_service_id])->one();
			$tasks = Task::find()->where(['project_service_id'=>$projectmonthlyservice->project_service_id])->andWhere(['project_monthly_service'=>$project_monthly_service])->all();
			foreach($tasks as $task){
				$posts = Post::find()->joinWith(['postfile','comment','comment.commentfile'])->where(['task_id'=>$task->id])->all();
				foreach($posts as $post){
					if(!empty($post->postfile)){
						foreach($post->postfile as $postfile){
							$postfile->delete(false);
						}
					}
					if(!empty($post->comment)){
						foreach($post->comment as $comment){
							if(!empty($comment->commentfile)){
								foreach($comment->commentfile as $commentfile){
									$commentfile->delete(false);
								}
							}
							$comment->delete(false);
						}
					}
					$post->delete(false);
				}
				TrakingTime::deleteAll(['task_id' => $task->id]);
				$task->delete(false);
				
			}
			$projectmonthlyservice->delete(false);		
			//$checkprojectmonthlyservice = ProjectMonthlyService::find()->where(['project_service_id'=>$projectmonthlyservice->project_service_id])->one();
			if(empty($project_service)){
				$project_service->delete(false);
			}
		}
			return "success";			
		}else{
			return "error";
		}
		return "success";
	}
	public function actionDeleteservice(){
		$project_service_id = $_POST["project_service_id"];
		$project_service = ProjectService::find()->where(['id'=>$project_service_id])->one();
		if(!empty($project_service)){
			$tasks = Task::find()->where(['project_service_id'=>$project_service_id])->all();
			foreach($tasks as $task){
				$posts = Post::find()->joinWith(['postfile','comment','comment.commentfile'])->where(['task_id'=>$task->id])->all();
				foreach($posts as $post){
					if(!empty($post->postfile)){
						foreach($post->postfile as $postfile){
							$postfile->delete(false);
						}
					}
					if(!empty($post->comment)){
						foreach($post->comment as $comment){
							if(!empty($comment->commentfile)){
								foreach($comment->commentfile as $commentfile){
									$commentfile->delete(false);
								}
							}
							$comment->delete(false);
						}
					}
					$post->delete(false);
				}
				TrakingTime::deleteAll(['task_id' => $task->id]);
				$task->delete(false);
			}
			$project_service->delete(false);		
			return "success";			
		}else{
			return "error";
		}
		return "success";		
	}
	
	
	public function actionInvitteam(){
		$userid=\Yii::$app->user->getId();
		$adminuser = User::findOne($userid);
		$messages = $_POST["message"];
		$team = $_POST["team"];
		$project_id = $_POST["project_id"];
		$project = Project::find()->where(['id'=>$project_id])->one();
			$adminname = "";			
			$adminname .= (!empty($adminuser->first_name)?$adminuser->first_name." ":"");
			$adminname .= (!empty($adminuser->last_name)?$adminuser->last_name:"");
			$adminemail = $adminuser->email;
			
		
		for($i=0; $i < count($team); $i++ ){
			$user_id = $team[$i];
			$user = User::findOne($user_id);
			if(!empty($user)){
				$user->generateAuthKey();
				$user->save(false);
				$name = "";
				$name .= (!empty($user->first_name)?$user->first_name." ":"");
				$name .= (!empty($user->last_name)?$user->last_name:"");
				
			   $project_user = ProjectUser::find()->where(['user_id'=>$user->id])->andWhere(['project_id'=>$project_id])->one();
			   if(empty($project_user)){
				   $project_user =  new ProjectUser();
				   $project_user->user_id = $user->id;
				   $project_user->project_id = $project_id;
				   $project_user->status = 1;
				   $project_user->save(false); 
			   }	
				$link = Yii::$app->urlManager->createAbsoluteUrl(["accounts/activity",'id' => $project_id ]);
				$subject = $adminname." invited you to ".$project->name; 
				
				$notifications = new Notifications();
				$notifications->from_id = $adminuser->id;
				$notifications->to_id = $user_id;
				$notifications->text = $adminname." Invited you to a new project ".$project->name;
				$notifications->type = 1;
				$notifications->project_id = $project_id;
				$notifications->save(false);
				//$notificationurltask =  Yii::$app->urlManager->createAbsoluteUrl(["accounts/calendar",'id' => $project_id ,'notification_id' => $notifications]); 
				$notificationurltask = \Yii::$app->params['baseurl']."/accounts/activity?id=".$project_id."&notification_id=".$notifications->id;				
				$notifications->url = $notificationurltask;
				$notifications->save(false);
				/* Get device token */
					$userdevices = UserDevice::find()->where(['user_id'=> $user_id ])->all();
 					if($userdevices){
						$url = "https://fcm.googleapis.com/fcm/send";
						foreach($userdevices as $userdevice){
						$token = $userdevice->device_token;
						$serverKey = 'AAAAihsptdE:APA91bHvnDU2Hin-576xQIRT_7Puz9BLx5P4PUCiIt6rQh2dNpanE7WJCUvaewLCHYkJt70WDXQYB8QtMNYOrIhMaSJHxulNDNtdIP0DkMM2KjWzJptViFrJi14_CKaUXDP12vHkQ-Wr';
						$title = $adminname." invited you to ".$project->name;
						$body = $adminname." Invited you to a new project ".$project->name;
						$notification = array('title' =>$title , 'body' => $body, 'sound' => 'default', 'badge' => '1');
						$data = array('title' =>$title , 'body' => $body, 'type'=> 1, 'project_id'=> $project_id, 'user_id'=> $user_id);
						$arrayToSend = array('to' => $token, 'notification' => $notification, 'data' => $data, 'priority'=>'high');
						$json = json_encode($arrayToSend);
						$headers = array();
						$headers[] = 'Content-Type: application/json';
						$headers[] = 'Authorization: key='. $serverKey;
						$ch = curl_init();
						curl_setopt($ch, CURLOPT_URL, $url);
						curl_setopt($ch, CURLOPT_CUSTOMREQUEST,"POST");
						curl_setopt($ch, CURLOPT_POSTFIELDS, $json);
						curl_setopt($ch, CURLOPT_HTTPHEADER,$headers);
						curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
						//Send the request
						$response = curl_exec($ch);
  						//Close request
						curl_close($ch); 
  						}
					}
				
				
				$sendGrid = Yii::$app->sendGrid;
				$message = $sendGrid->compose('acceptproject', ['url' => $link, 'message' => $messages,"name" => $name]);
				$message->setFrom($adminemail)
						->setTo($user->email)
						->setSubject($subject)
						->send($sendGrid);
			}
			
		}
		echo 'success';
		//$userarray = explode(',', $team);


		
		
		// send email here
        /*$sendGrid = Yii::$app->sendGrid;
        $message = $sendGrid->compose('inviteuser', ['url' => $link, 'message' => $message]);
        $message->setFrom("".$name." <noreply@adcreators.com.au>")
                ->setTo($email)
                ->setSubject($subject)
                ->send($sendGrid);
        echo 'success';*/

		
		
		
	}

	public function actionAddasset(){
		$userid=\Yii::$app->user->getId();
		$project_id = $_POST["project_id"];
		$title = $_POST["title"];
		$startDate = $_POST["startDate"];
		$endDate = $_POST["endDate"];
		$status = $_POST["status"];
		$type = $_POST["type"];
		$text = $_POST["text"];
		$status = $_POST["status"];
		$jsonfiles = $_POST["jsonfiles"];
		if(!empty($jsonfiles)){
			$arrayfiles = json_decode($jsonfiles);
		}
		$startDate = str_replace('/', '-', $startDate);
		$endDate = str_replace('/', '-', $endDate);


		$assets = new Assets();
		$assets->project_id = $project_id;
		$assets->user_id = $userid;
		$assets->title = $title;
		$assets->start_date = date("Y-m-d", strtotime($startDate));
		$assets->end_date = date("Y-m-d", strtotime($endDate));
		$assets->type = $type;
		$assets->status = $status;
		if($type == 0){
			$assets->text = $text;
			$assets->save(false);
		}else if( $type == 1){
			$assets->save(false);
			if(!empty($jsonfiles)){
				foreach ($arrayfiles as $arrayfile) {
					$assets_file = new AssetsFile();
					$assets_file->assets_id = $assets->id;
					$assets_file->file = $arrayfile->namefile;
					$assets_file->save(false);
				}
			}
		}
		
		
		
		return "success";
	}
	public function actionAddsublisttasks(){
		

		\Yii::$app->response->format = 'json';
		$results = [];
		$arraytaskid = array();
		//$arraytaskid = [];
		
		$jsontarrayTasks = $_POST["jsontarrayTasks"];
		$project_id = $_POST["project_id"];
		$parent_task_id = $_POST["parent_task_id"];
		$project_service_id = $_POST["service_id"];
		$order = $_POST["order"];
		$count_row = $_POST["count_row"];
        $arraytasks = json_decode($jsontarrayTasks);
        $where = '';
		$parent_id=0;
		$monthly_service=0;
		if(isset($_POST["monthly_service"]) && $_POST["monthly_service"] > 0){
		$monthly_service = $_POST["monthly_service"];
		}
		$project_service = ProjectService::find()->where(['id'=>$project_service_id])->one();
		
		if(!empty($project_service)){
			// bade e3mol change lal task order numbers before save the new tasks  based 3al count of task need to insert and current order level
			$project_service_id =$project_service->id;
			$changesordertask = Task::find()->where('task.order > '.$order)->andWhere(['task.project_service_id'=>$project_service_id])->all();
			foreach($changesordertask as $changeordertask){
				$changeordertask->order = $changeordertask->order + $count_row;
				$changeordertask->save(false);
			}
			foreach ($arraytasks as $arraytask) { 
				$startDateTask = str_replace('/', '-', $arraytask->startDate);
				$endDateTask = str_replace('/', '-', $arraytask->endDate);
				$order++;
				$task = new Task();
				$task->project_service_id = $project_service_id;
				$task->	project_monthly_service = $monthly_service;
				$task->title = $arraytask->title;
				$task->start_date = date("Y-m-d", strtotime($startDateTask));
				$task->due_date = date("Y-m-d", strtotime($endDateTask));
				$task->order = $order;
				$task->priority_id = $arraytask->priority_id;
				$task->level = $arraytask->level;
				if($arraytask->fakeparent > 0){
					foreach($arraytaskid as $ids){
						if($ids['fakeID'] == $arraytask->fakeparent){
						$task->parent_id = $ids['id'];  
					}
					}
				}else if($arraytask->parent){
					$task->parent_id = $arraytask->parent;
				}else{
					$task->parent_id = 0;
				}
				
				$task->save(false);
				
			  $arraytaskid [] = array('id' => $task->id,'fakeparent'=> $arraytask->fakeparent, 'parent' => $arraytask->parent, 'fakeID' => $arraytask->fakeID);
			}
		}else{
			$results = [
				'status' => 'error'
			];
			//echo json_encode($results);
			return $results;
		}
		//$check_dates_subtasks = $this->check_dates_subtasks($parent_task_id);
		
		$results = [
			'status' => 'success'
		];
		return $results;
		//echo json_encode($results);
	}
	
	
	public function actionUpdateasset(){
		 $id = $_POST["id"];
		 $status = $_POST["status"];
		 $start_date = $_POST["start_date"];
		 $end_date = $_POST["end_date"];
		$start_date = str_replace('/', '-', $start_date);
		$start_date = date('Y-m-d', strtotime($start_date));
		$end_date = str_replace('/', '-', $end_date);
		$end_date = date('Y-m-d', strtotime($end_date));

		  $assets = Assets::find()->andWhere(['id'=>$id])->one();
		  $result="success";
		  if(!empty($assets)){
			  $assets->start_date = $start_date;
			  $assets->end_date = $end_date;
			  $assets->status = $status;
			  if( $assets->save(false)){
				   $result="success";
			  }else{
				  $result="error";
			  }
		  }else{
			  $result="error";
		  }
		  return $result;
	}
	
	public function actionUpdateduedatetask(){

		$id = $_POST["id"];
		$due_date = $_POST["due_date"];
		$due_date = str_replace('/', '-', $due_date);
		$due_date = date('Y-m-d', strtotime($due_date));

		  $task = Task::find()->andWhere(['task.id'=>$id])->one();
		  $result="success";
		  if(!empty($task)){
			  $task->due_date = $due_date;
			  if( $task->save(false)){
				   $result="success";
			  }else{
				  $result="error";
			  }
		  }else{
			  $result="error";
		  }
		  return $result;
	
	
	}
	
	public function actionUpdatestartdatetask(){

		$id = $_POST["id"];
		$start_date = $_POST["start_date"];
		$start_date = str_replace('/', '-', $start_date);
		$start_date = date('Y-m-d', strtotime($start_date));

		  $task = Task::find()->andWhere(['task.id'=>$id])->one();
		  $result="success";
		  if(!empty($task)){
			  $task->start_date = $start_date;
			  if( $task->save(false)){
				   $result="success";
			  }else{
				  $result="error";
			  }
		  }else{
			  $result="error";
		  }
		  return $result;
	
	
	}
	
	
	public function  check_status_subtasks($task_id,$taskstatus) {
		$parenttask = Task::find()->where(['task.id'=>$task_id])->one();
		$id_task = 0;
		$allcompleted = 1;
		$parent_status = 4;
		//if($taskstatus == 3 || $taskstatus == 4){
			$childtask = Task::find()->where(['task.parent_id'=>$task_id])->all();
			if(!empty($childtask)){
					foreach($childtask as $child){
							if((int)$child->status < $parent_status ){	$parent_status = (int)$child->status; $allcompleted =0; }
							//$childtask1 = Task::find()->where(['task.parent_id'=>$child->id])->all();
							/*if(!empty($childtask1)){
									foreach($childtask1 as $child1){ if($child1->status != $taskstatus){	$allcompleted =0; return $id_task;}
										$childtask2 = Task::find()->where(['task.parent_id'=>$child1->id])->all();
										if(!empty($childtask2)){
												foreach($childtask2 as $child2){ 
													 if($child2->status != $taskstatus){	$allcompleted =0; return $id_task;}
												}
										}
									}
							}*/
					}
			}
			return $parent_status;
			//if($allcompleted ==1){$parenttask->status=$taskstatus; $parenttask->save(false); return $parenttask->id; }
			//if($allcompleted ==1 && $parenttask->status != 4){$parenttask->status=$taskstatus; $parenttask->save(false); return $parenttask->id; }
		/*}else{
			/*if($parenttask->status == 3 || $parenttask->status == 4){ 
				$parenttask->status=$taskstatus; $parenttask->save(false); return $parenttask->id;
			}*/
		//	if($parenttask->status > $taskstatus){
		//		$parenttask->status=$taskstatus; $parenttask->save(false); return $parenttask->id;
		//	}
			
	//	}*/

	}
	
	
	public function  check_priority_subtasks($task_id,$taskstatus) {
		$parenttask = Task::find()->where(['task.id'=>$task_id])->one();
		$id_task = 0;
		$allcompleted = 1;
		$parent_priority = 0;
			$childtask = Task::find()->where(['task.parent_id'=>$task_id])->all();
			if(!empty($childtask)){
				foreach($childtask as $child){
					if((int)$child->priority_id > $parent_priority ){	$parent_priority = (int)$child->priority_id; $allcompleted =0; }
				}
			}
			return $parent_priority;

	}


	public function  check_enddates_subtasks($task_id,$enddate) {
		$parenttask = Task::find()->where(['task.id'=>$task_id])->one();
		$id_task = 0;
		$allcompleted = 1;
		$parent_enddate = date("Y-m-d", strtotime('2000-1-1'));
			$childtask = Task::find()->where(['task.parent_id'=>$task_id])->all();
			if(!empty($childtask)){
				foreach($childtask as $child){
					if(strtotime($child->due_date) > strtotime($parent_enddate) ){	$parent_enddate = $child->due_date; $allcompleted =0; }
				}
			}
			return $parent_enddate;

	}
	public function  check_startdates_subtasks($task_id,$startdate) {
		$parenttask = Task::find()->where(['task.id'=>$task_id])->one();
		$id_task = 0;
		$allcompleted = 1;
		//$parent_startdate = '2099-1-1';
		$parent_startdate = date("Y-m-d", strtotime('2099-1-1'));
			$childtask = Task::find()->where(['task.parent_id'=>$task_id])->all();
			if(!empty($childtask)){
				foreach($childtask as $child){
					if(strtotime($child->start_date) < strtotime($parent_startdate) ){	$parent_startdate = $child->start_date; $allcompleted =0; }
				}
			}
			return $parent_startdate;

	}
		

	public function  check_dates_subtasks($task_id) {

		$parenttask = Task::find()->where(['task.id'=>$task_id])->one();
		$mindate = $parenttask->start_date;
		$maxdate = $parenttask->due_date;
		$childtask = Task::find()->where(['task.parent_id'=>$task_id])->all();
		
		if(!empty($childtask)){
			// by default byekhdo awal value mn l subtasks w iza l2ayna ba3den value azghar mn 7eto bel min
			$mindate = $childtask[0]->start_date;
			$maxdate = $childtask[0]->due_date;
			foreach($childtask as $child){
				$mindate1 = $child->start_date;
				$maxdate1 = $child->due_date;
				if($mindate1 < $mindate){$mindate = $mindate1;}
				if($maxdate1 > $maxdate){$maxdate = $maxdate1;}

				$childtask1 = Task::find()->where(['task.parent_id'=>$child->id])->all();
				if(!empty($childtask1)){
					$mindate1 = $childtask1[0]->start_date;
					$maxdate1 = $childtask1[0]->due_date;
					foreach($childtask1 as $child1){
						
							$mindate2 = $child1->start_date;
							$maxdate2 = $child1->due_date;
							if($mindate2 < $mindate){$mindate = $mindate2;}
							if($maxdate2 > $maxdate){$maxdate = $maxdate2;}
							if($mindate2 < $mindate1){$mindate1 = $mindate2;}
							if($maxdate2 > $maxdate1){$maxdate1 = $maxdate2;}
							
							$childtask2 = Task::find()->where(['task.parent_id'=>$child1->id])->all();
							if(!empty($childtask2)){
								$mindate2 =$childtask2[0]->start_date;
								$maxdate2 = $childtask2[0]->due_date;
								foreach($childtask2 as $child2){
									$mindate3 = $child2->start_date;
									$maxdate3 = $child2->due_date;
									if($mindate3 < $mindate){$mindate = $mindate3;}
									if($mindate3 > $maxdate){$maxdate = $maxdate3;}
									if($mindate3 < $mindate1){$mindate1 = $mindate3;}
									if($mindate3 > $maxdate1){$maxdate1 = $maxdate3;}
									if($mindate3 < $mindate2){$mindate2 = $mindate3;}
									if($maxdate3 > $maxdate2){$maxdate2 = $maxdate3;}
									
									
								}
								$child2->start_date = $mindate3;
								$child2->due_date = $maxdate3;
								$child2->save(false);
							}
						$child1->start_date = $mindate2;
						$child1->due_date = $maxdate2;
						$child1->save(false);
							
					}
				}
				$child->start_date = $mindate1;
				$child->due_date = $maxdate1;
				$child->save(false);
			}
		}
		$parenttask->start_date = $mindate;
		$parenttask->due_date = $maxdate;
		$parenttask->save(false);


		
		return $task_id;
	}
	
    public function actionActivitylogs($id){
		$project =  Project::find()->where(['id'=>$id])->one();
		$userid=\Yii::$app->user->getId();
 		 $activities = ActivityLogs::find()->joinWith(['user'])->where(['project_id'=>  $id])->orderBy(['activity_logs.created_date' => SORT_DESC])->all();
		 $currentuser = User::findOne($userid);
		 return $this->render('activity-logs', [
			'activities' => $activities, 'currentuser'=> $currentuser , 'project' => $project
        ]);
	}


	public function actionUpdateexpensestatus(){
		$userid=\Yii::$app->user->getId();
		$user = User::findOne($userid);
		$expense_id = $_POST["expense_id"];
		$status = $_POST["status"];
		$expense = Expense::find()->where(['expense.id'=>$expense_id])->one();
		$expense->status = $status;
		$expense->save(false);
		
		 return "success"; 
	}

	public function actionUpdateexpenseassign(){
		$expense_id = $_POST["expense_id"];
		$arrayassign = [];
		if(isset($_POST["selectassign"]) && !empty($_POST["selectassign"])){
			$arrayassign = $_POST["selectassign"];
		}
	
		$expense = Expense::find()->joinWith(['expenseuser'])->where(['expense.id'=>$expense_id])->one();
			if(!empty($expense)){
				foreach($expense as $expenseuser){
					if (!in_array($expenseuser->user_id, $arrayassign)){   
						$expenseuser->delete(false);
					}
				}
			}
			for($i=0; $i < count($arrayassign); $i++){
				$expenseuser = ExpenseUser::find()->where(['user_id'=>$arrayassign[$i]])->andWhere(['expense_id'=>$expense_id])->one();
				if(empty($expenseuser)){
					$expenseuser = new ExpenseUser();
					$expenseuser->expense_id = $expense_id;
					$expenseuser->user_id =$arrayassign[$i];
					$expenseuser->save(false);
				}
				
			}
		
			$expenseusers = ExpenseUser::find()->andWhere(['expense_id'=>$expense_id])->all();
			$arrayusers = [];
			$usersString="";
			if(!empty($expenseusers)){ 
				 foreach($expenseusers as $expenseuser){
					 if(!empty($expenseuser->user->first_name)){
						 array_push($arrayusers, $expenseuser->user->first_name);
					 }else if(!empty($expenseuser->user->last_name)){
						 array_push($arrayusers, $expenseuser->user->last_name);
					 }
					
				 } 
				 
				 $totalUsres = count($arrayusers);
				 if ($totalUsres>1) {
					 $usersString = implode(' - ', array_slice($arrayusers, 0, $totalUsres));
				 } else {
					 $usersString = implode(' - ', $arrayusers);
				 }

			 }
		
		return  $usersString;
		
	}

	public function actionAddexpense(){
		$project_id = 0;
		$supplier_id = 0;
		$expense_title = '';
		$expense_quantity = 0;
		$expense_cost = 0;
		$expense_currency = 0;
		$markup = 0;
		$expense_total = 0;
		$expense_date = '';
		$expense_description = '';	

				
		
		
		if(isset($_POST['project_id']) && $_POST['project_id'] > 0){
			$project_id = $_POST['project_id'];
		}
		if(isset($_POST['supplier_id']) && $_POST['supplier_id'] > 0){
			$supplier_id = $_POST['supplier_id'];
		}
		if(isset($_POST['expense_title'])){
			$expense_title = $_POST['expense_title'];
		}
		if(isset($_POST['expense_quantity']) && $_POST['expense_quantity'] > 0){
			$expense_quantity = $_POST['expense_quantity'];
		}
		if(isset($_POST['expense_cost']) && $_POST['expense_cost'] > 0){
			$expense_cost = $_POST['expense_cost'];
		}
		if(isset($_POST['expense_currency']) && $_POST['expense_currency'] > 0){
			$expense_currency = $_POST['expense_currency'];
		}
		if(isset($_POST['markup']) && $_POST['markup'] > 0){
			$markup = $_POST['markup'];
		}
		if(isset($_POST['expense_total']) && $_POST['expense_total'] > 0){
			$expense_total = $_POST['expense_total'];
		}
		if(isset($_POST['expense_description'])){
			$expense_description = $_POST['expense_description'];
		}
		if(isset($_POST['expense_date'])){
			$expense_date = $_POST['expense_date'];
		}
		
		$model = new Expense;
		$userid=\Yii::$app->user->getId();
		$model->status = 0;
		$model->user_id = $userid;
		$model->project_id = $project_id; 
		$model->supplier_id = $supplier_id; 
		$model->title = $expense_title;
		$model->quantity = $expense_quantity;
		$model->cost = $expense_cost;
		$currency_id = Currency::find()->all();
		$model->currency_id = $expense_currency;
		$model->markup = $markup;
		$model->total = $expense_total;
		$model->description = $expense_description;
		$model->date = $expense_date;

		if(isset($_FILES['file'])){
			$filename = $_FILES['file']['name'];
			$location = "uploads/expenses/".$filename;
			$uploadOk = 1;
			$imageFileType = pathinfo($location,PATHINFO_EXTENSION);
			// Check image format
			if($imageFileType != "jpg" && $imageFileType != "png" && $imageFileType != "jpeg" && $imageFileType != "gif" && $imageFileType != "PNG"  && $imageFileType != "JPG" && $imageFileType != "JPEG" && $imageFileType != "GIF" && $imageFileType != "PDF" && $imageFileType != "pdf"&& $imageFileType != "docx" ) {
			 $uploadOk = 0;
			}
			if($uploadOk == 0){

			}else{
				$random = time();
				$location = "uploads/expenses/".$random.".".$imageFileType;
				 // Upload file 
				if(move_uploaded_file($_FILES['file']['tmp_name'],$location)){
					$model->invoice = $random.".".$imageFileType;
					$file = Url::base('https').'/uploads/expenses/'.$random."".$imageFileType;
				}
			}
		}
		$model->save(false);
		return $this->redirect(['accounts/timexpense', 'id'=>$project_id]);
		//return $this->redirect([Url::current()]);
		

		// if ($model->save()){
		// 	return $this->redirect([Url::current()]);
		// }else{
		// 	return "Failed";
		// }
		
	}

	public function actionUploadinvoiceexpenses(){
		$model = Expense::find()->where(['id' => $_POST['expense_id']])->one();
		if(isset($_FILES['file'])){
			$filename = $_FILES['file']['name'];
			$location = "uploads/expenses/".$filename;
			$uploadOk = 1;
			$imageFileType = pathinfo($location,PATHINFO_EXTENSION);
			// Check image format
			if($imageFileType != "jpg" && $imageFileType != "png" && $imageFileType != "jpeg" && $imageFileType != "gif" && $imageFileType != "PNG"  && $imageFileType != "JPG" && $imageFileType != "JPEG" && $imageFileType != "GIF" && $imageFileType != "PDF" && $imageFileType != "pdf"&& $imageFileType != "docx" ) {
			 $uploadOk = 0;
			}
			if($uploadOk == 0){

			}else{
				$random = time();
				$location = "uploads/expenses/".$random.".".$imageFileType;
				 // Upload file 
				if(move_uploaded_file($_FILES['file']['tmp_name'],$location)){
					$model->invoice = $random.".".$imageFileType;
					$model->save(false);
					$file = Url::base('https').'/uploads/expenses/'.$random."".$imageFileType;
				}
			}
		}
		return $this->redirect(['accounts/timexpense', 'id'=>$model->project_id]);
	}
	public function actionUploadinvoice(){
		
		$model = Expense::find()->where(['id' => $_POST['expense_id']])->one();
		$invoice = $_FILES['invoice'];
		if (!empty($invoice)) {
		   $value = (explode(".", $invoice['name']));
		   $ext = $value[1];
		   $filename = $model->id . ".{$ext}";
		   $pathinvoice = '/uploads/expenses/' . $filename;
		   $model->invoice = $pathinvoice;
		   $temp_name = $_FILES['invoice']['tmp_name']; print_r($temp_name);die;
		   move_uploaded_file($temp_name,$pathinvoice);

		}
	}
}
